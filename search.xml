<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS3动画</title>
      <link href="/2018/03/24/css-animation/"/>
      <url>/2018/03/24/css-animation/</url>
      
        <content type="html"><![CDATA[<h2 id="transform属性"><a href="#transform属性" class="headerlink" title="transform属性"></a>transform属性</h2><p>基本语法:<code>transform: none | transform-functions</code></p><font color="tomato">注意: 转换不会改变元素实际占有位置, 即不会改变页面原有布局</font><h3 id="transform-functions类型"><a href="#transform-functions类型" class="headerlink" title="transform-functions类型"></a>transform-functions类型</h3><h4 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h4><ol><li><p>平移: <code>translate(left [, top])</code></p><ul><li><font color="deepskyblue">*top值不设值, 只做水平方向平移, 支持负值, 需要带单位</font> </li><li><font color="deep">*当单位是百分比(%)时, 百分比的参照对象时当前元素的宽高</font></li></ul></li><li><p>缩放: <code>scale(水平 [, 垂直])</code> </p><font color="deepskyblue">*只设一个值表示水平和垂直方向缩放相同倍数, 取值范围 [0, +无穷)</font></li><li><p>轴旋转: <code>rotate(value)</code> </p><font color="deepskyblue">*支持单位: deg, rad, turn(一圈), grad(百分度), 转换后会改变轴方向</font></li><li><p>轴倾斜: <code>skew(x轴, y轴)</code></p><p>使用比较少, 仅支持X轴和Y轴</p></li></ol><h4 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h4><p>比2D转换多了个Z轴, 可在在2D转换类型名字后面接着轴名字单独设置每一条轴的转换, 如transform: translateX(100px) 表示沿着沿着X轴向右平移100px</p><ul><li><font color="tomato">*也可以通过类型名称接3d设置一个类型的转换, 如transform: translate3d(100px, 100px, 100px), 表示沿着3条轴的正方向平移100px</font></li><li><font color="deep">*在移动端设备, 3D转换会开启GPU加速, 从而减轻CPU的消耗, 提高性能</font> </li></ul><h3 id="3D透视效果-远小近大效果"><a href="#3D透视效果-远小近大效果" class="headerlink" title="3D透视效果(远小近大效果)"></a>3D透视效果(远小近大效果)</h3><ol><li><p><code>transform-style: peserve-3d</code> </p><font color="deepskyblue">*添加在祖先元素样式上, 让子元素在3D空间呈现</font></li><li><p><code>perspective: 500px</code></p><font color="deepskyblue">*眼睛, 站在哪看3D元素, 设在祖先元素上, 取值300-500px最佳</font></li><li><p><code>perspective-origin: 水平 垂直</code></p><p>*透视基准线, left, right, bottom, top, center</p></li><li><p><code>backface-visibility: hidden</code></p><font color="deepskyblue">*背面隐藏, 设置在转换(子)元素上, 默认visible(显示)</font></li></ol><h3 id="设置轴原点"><a href="#设置轴原点" class="headerlink" title="设置轴原点"></a>设置轴原点</h3><p><code>transform-origin: x轴 y轴 [z轴]</code></p><font color="deepskyblue">*默认在元素中心点</font><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><font color="tomato" size="4">transform-functions 组合使用时, 注意轴方向的改变</font><h2 id="transition属性"><a href="#transition属性" class="headerlink" title="transition属性"></a>transition属性</h2><p>过渡: 元素从一个状态到另一个状态</p><p>过渡三要素: </p><p>a) 需要执行过渡的属性 </p><p>b) 过渡属性的属性值必须发生变化 </p><p>c) 过渡效果的持续时长</p><p>基本语法: <code>transition: property duration [timing-function] [delay]</code></p><h3 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h3><p>transition-property 设置需要过渡效果的属性</p><p>语法:<code>transition-property: none|all|property</code></p><p><strong>属性值</strong></p><ol><li><code>none</code> 表示没有属性获得过渡效果</li><li><code>al</code> 表示所有属性获得过渡效果</li><li><code>property</code> 用来定义需要过渡的CSS属性名称列表, 列表用逗号(,)隔开</li></ol><h3 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h3><p>transition-duration 设置过渡效果持续的时长</p><font color="deepskyblue">*默认值为0, 表示没有过渡效果, 设置值时需要带单位(s, ms)</font><h3 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h3><p>transition-timing-function 设置过渡效果的速度曲线</p><p><strong>属性值</strong></p><ol><li><code>ease</code> 默认值,  先慢后快再慢</li><li><code>ease-in</code> 先慢后快</li><li><code>ease-out</code> 先快后慢</li><li><code>ease-in-out</code> 先快后慢再快</li><li><code>linear</code> 匀速</li><li><code>cubic-bezier(n, n, n, n)</code> 自定义速度曲线</li></ol><h3 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h3><p>transition-delay 设置延时效果</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> transform </tag>
            
            <tag> transition </tag>
            
            <tag> animation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - 布局技巧及flex布局</title>
      <link href="/2018/02/03/css-flex/"/>
      <url>/2018/02/03/css-flex/</url>
      
        <content type="html"><![CDATA[<blockquote><p>根据上一篇文章的总结介绍, 可以得出一般布局技巧:</p><ol><li>垂直布局, 使用 <strong>标准流</strong></li><li>水平布局, 使用 <strong>浮动流</strong></li><li>层叠布局, 使用 <strong>定位流</strong></li><li><strong>子绝父相</strong>, 给绝对定位元素的父元素设置 <code>position : relative</code>, 方便更好的进行布局</li></ol></blockquote><p>在本文开始之前, 先总结2个布局相关公式</p><ol><li>标准流包含块宽度 = 子元素实际占用宽度 + <code>margin-left</code> + <code>margin-right</code></li><li>绝对定位包含块宽度 = 子元素事件占用宽度 + <code>margin-left</code> + <code>margin-right</code> + <code>left</code> + <code>right</code></li></ol><p>根据这2公式, 可以得出以下技巧:</p><ol><li>通过给标准流包含块设置<strong>负值左右外边距</strong>, 可以增加子元素的实际占用宽度</li><li>绝对定位元素<strong>不设置宽高</strong>, 只设置<code>left : 0;right : 0;top : 0;bottom : 0;margin : auto</code>可填充整个包含块</li></ol><h2 id="居中技巧"><a href="#居中技巧" class="headerlink" title="居中技巧"></a>居中技巧</h2><p>在一个网页中, 使用最多的布局就是<strong>元素在父元素居中</strong>, 以下是元素居中的一些技巧</p><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><ol><li>在<strong>标准流</strong>中, 对于<strong>行内级/行内块级元素</strong>, <code>text-align : center</code></li><li>在<strong>标准流</strong>中, 对于<strong>块级元素</strong>, 设置<strong>宽度</strong>( <code>width</code> ), <strong>左右外边距</strong>( <code>margin</code> )设为<code>auto</code></li><li>在<strong>定位流</strong>中, 对于<strong>相对定位元素</strong>, <code>margin-left : 50%; left : -元素宽度/2</code></li><li>在<strong>定位流</strong>中, 对于<strong>绝对定位元素</strong>, 设置<strong>宽度</strong>( <code>width</code> ), 然后设置 <code>left : 0; right : 0; margin-left : auto; margin-right : auto</code></li></ol><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><ol><li>对于<strong>单行文本</strong>, <code>line-height : 元素高度</code></li><li>对于<strong>行内级/行内块级元素</strong>, 可尝试使用 <code>vertical-align : middle</code></li><li>对于<strong>相对定位元素</strong>, <code>margin-top : 50%; top : -元素高度/2</code></li><li>对于<strong>绝对定位元素</strong>, 设置<strong>高度</strong>( <code>height</code> ), 然后设置 <code>top : 0; bottom : 0; maigin-top : auto; margin-bottom : auto</code></li></ol><h3 id="vertical-align属性"><a href="#vertical-align属性" class="headerlink" title="vertical-align属性"></a>vertical-align属性</h3><p>设置元素的垂直对齐方式</p><p>语法: <code>vertical-align : val</code></p><p>注意点: <font color="deep">只对行内级/行内块级元素生效</font></p><p>可选值:</p><ol><li><code>baseline</code> 默认值, 基线对齐</li><li><code>sub</code> 对齐文本下标</li><li><code>super</code> 对齐文本上标</li><li><code>top</code> 对齐父元素顶部</li><li><code>text-top</code> 对齐字体顶部</li><li><code>bottom</code> 对齐父元素底部</li><li><code>text-bottom</code> 对齐字体底部</li><li><code>middle</code> 对齐父元素中线(中部)</li></ol><h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><p>Flexible Box(简称: Flex), “弹性盒子”, CSS3新增的盒模型布局方式</p><h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>任何一个容器都能指定为Flex布局</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span> <span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>行内Flex布局</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span> <span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><font color="deepskyblue">注意点, 当设为Flex布局后, 容器中所有元素的<code>float</code>、<code>clear</code>、<code>vertical-align</code> 属性将失效</font><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>设为Flex布局的元素称为<strong>Flex容器</strong>(flex container), 简称”容器”, 起所有子元素称为<strong>Flex项目</strong>(flex item), 简称”项目”</p><p><strong>项目是参照容器的两根轴进行布局的</strong>:</p><ol><li><strong>主轴</strong>(main axis), 默认水平方向</li><li><strong>侧轴</strong>(交叉轴, cross axis), 垂直于主轴</li></ol><p><img src="/images/flex-container.png" alt="Flex弹性盒子"></p><p><font color="tomato">容器图解: main start(主轴开端)、main end(主轴末端)、cross start(侧轴开端)、cross end(侧轴末端)</font></p><p><font color="tomato">项目图解: main size — 项目占据主轴的空间、cross size — 项目占据侧轴的空间</font></p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><ol><li><p><strong>flex-direction</strong></p><p>设置<strong>主轴方向</strong>, 语法: <code>flex-direction : val</code></p><p>属性值:</p><p>a) <code>row</code> 默认值, 水平, 从左到右</p><p>b) <code>row-reverse</code> 水平, 从右到左</p><p>c) <code>column</code> 垂直, 从上打下</p><p>d) <code>column-reverse</code> 垂直, 从下到上</p><p><img src="/images/flex-direction.png" alt="flex-direction"></p></li><li><p><strong>flex-wrap</strong></p><p>设置<strong>换行处理</strong>, 语法: <code>flex-wrap : val</code></p><p>属性值:</p><p>a) <code>nowrap</code> 默认值, 不换行</p><p>b) <code>wrap</code> 换行, 第一行在最上方</p><p>c) <code>wrap-reverse</code> 换行, 第一行在最下方</p></li><li><p><strong>flex-flow</strong></p><p><code>flex-direction</code> 和 <code>flex-wrap</code> 的整合属性, 语法: <code>flex-flow : &lt;direction&gt; &lt;wrap&gt;</code></p><p>默认值: <code>row nowrap</code></p></li><li><p><strong>justify-content</strong></p><p>设置<strong>项目</strong>在<strong>主轴</strong>上的<strong>对齐方式</strong>, 语法: <code>justify-content : val</code></p><p>属性值:</p><p>a) <code>flex-start</code> 默认值, 向主轴开端对齐</p><p>b) <code>flex-end</code> 向主轴末端对齐</p><p>c) <code>space-between</code> 主轴两端对齐, 项目之间的间隔相等</p><p>d) <code>space-around</code> 每个项目的两侧的间隔相等</p><p>e) <code>center</code> 主轴方向居中</p><p><img src="/images/justify-content.png" alt="justify-content"></p></li><li><p><strong>align-items</strong></p><p>设置<strong>项目</strong>在<strong>侧轴</strong>上的<strong>对齐方式</strong>, 语法: <code>align-items : val</code></p><p>属性值:</p><p>a) <code>stretch</code>  默认值, 如果项目没有设置<strong>侧轴空间</strong>( cross size ), 默认填充整个容器侧轴长度</p><p>b) <code>flex-start</code> 向侧轴开端对齐</p><p>c) <code>flex-end</code> 向侧轴末端对齐</p><p>d) <code>baseline</code> 项目第一行文本的基线对齐</p><p>e) <code>center</code> 侧轴方向居中</p><p><img src="/images/align-items.png" alt="align-items"></p></li><li><p><strong>align-content</strong></p><p>当设置了<code>flex-wrap : wrap|wrap-reverse</code>且项目换行显示时, 此属性才生效</p><p>语法: <code>align-content : val</code></p><p>属性值:</p><p>a) <code>stretch</code> 默认值, 项目<strong>侧轴空间</strong>平分侧轴长度</p><p>b) <code>flex-start</code> 向侧轴开端对齐</p><p>c) <code>flex-end</code> 向侧轴末端对齐</p><p>d) <code>space-between</code> 侧轴两端对齐, 每行项目之间间隔相等</p><p>e) <code>space-around</code> 每行项目上下侧间隔相等</p><p>f) <code>center</code> 侧轴方向居中</p><p><img src="/images/align-content.png" alt="align-content"></p></li></ol><h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><ol><li><p><strong>flex-grow</strong></p><p>设置项目的放大比例, 语法: <code>flex-grow : number</code></p><p>默认值: <code>0</code>, 表示即使存在剩余空间也不放大</p><font color="tomato">当所有项目设为1, 则平分剩余空间; 如有有一个项目设为2, 则该项目所占得剩余空间是其他项目的2倍</font></li><li><p><strong>flex-shrink</strong></p><p>设置项目的缩小比例, 语法: <code>flex-shrink : number</code></p><p>默认值: <code>1</code>, 表示空间不足时, 项目缩小</p><font color="tomato">当一个项目设为0, 其他项目为默认值1, 则当空间不足时, 该小木不缩小</font></li><li><p><strong>flex-basis</strong></p><p>设置在分配剩余空间前, 项目的<strong>主轴空间</strong>( main size ), 浏览器也是通过此属性判断是否有剩余空间</p><p>默认值: <code>auto</code>, 即项目本来的大小</p></li><li><p><strong>flex</strong></p><p><code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>的整合属性</p><p>语法: <code>flex : &lt;grow&gt; [shrink] [basis]</code></p><p>默认值: <code>0 1 auto</code>, 后2属性可省略</p><p>注意点: </p><p>a) <code>auto</code>(<code>1 1 auto</code>) 和 <code>none</code>(<code>0 0 auto</code>)</p><p>b) 建议<strong>优先使用</strong>此整合属性</p></li><li><p><strong>order</strong></p><p>设置项目的排列顺序, 语法: <code>order : number</code></p><p>默认值: <code>0</code>, 值越小越靠前, 支持负数</p></li><li><p><strong>align-self</strong></p><p>单独设置项目的侧轴的对齐方式, 语法: <code>align-self : val</code></p><p>默认值: <code>auto</code>, 表示继承容器的<code>align-items</code>属性, 其他取值与<code>align-items</code>一样</p></li></ol><h2 id="三栏布局-双飞翼布局、圣杯布局"><a href="#三栏布局-双飞翼布局、圣杯布局" class="headerlink" title="三栏布局(双飞翼布局、圣杯布局)"></a>三栏布局(双飞翼布局、圣杯布局)</h2><p><img src="/images/layout.png" alt="三栏布局效果"></p><h3 id="浮动流实现"><a href="#浮动流实现" class="headerlink" title="浮动流实现"></a>浮动流实现</h3><p><strong>CSS部分</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>html部分</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="定位流实现"><a href="#定位流实现" class="headerlink" title="定位流实现"></a>定位流实现</h3><p><strong>CSS部分</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>html部分</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="Flex布局-1"><a href="#Flex布局-1" class="headerlink" title="Flex布局"></a>Flex布局</h3><p><strong>CSS部分</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>html部分</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - 页面布局相关属性</title>
      <link href="/2018/01/12/css-layout/"/>
      <url>/2018/01/12/css-layout/</url>
      
        <content type="html"><![CDATA[<h2 id="设置元素的显示形式"><a href="#设置元素的显示形式" class="headerlink" title="设置元素的显示形式"></a>设置元素的显示形式</h2><h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h3><p><code>display</code>属性可以改变元素的显示形式</p><p>常用属性值:</p><ol><li><code>none</code> 隐藏元素</li><li><code>block</code> 将元素显示为块级元素</li><li><code>inline</code> 将元素显示为行内级元素</li><li><code>inline-block</code> 将元素显示为行内块级元素(能自定义宽高、内外边距, 并跟其他行内/行内块级元素在同一行显示)</li></ol><p>注意点: <code>display</code> 属性是<strong>强制</strong>改变元素的显示形式, 你也可以通过<code>list-item</code>、<code>table</code>等属性值将其他元素改成 <strong>列表元素</strong> 和 <strong>表格元素</strong>, 但 <font color="red">强烈反对此做法</font>( <font color="yellowgreen">标签语义化</font> )</p><h3 id="overflow属性"><a href="#overflow属性" class="headerlink" title="overflow属性"></a>overflow属性</h3><p><code>overflow</code> 属性设置内容(content)溢出盒子模型(边框)时的行为表现</p><p>语法: <code>overflow : val</code></p><p>取值:</p><ol><li><code>visible</code> 默认值, 不作任何处理, 内容完整显示</li><li><code>hidden</code> 修剪内容, 溢出部分不可见</li><li><code>scroll</code> 修剪内容, 溢出部分通过滚动条显示</li><li><code>auto</code> 如果内容被修剪, 溢出部分通过滚动条显示</li></ol><p>注意点: </p><ol><li>可按方向细分, <code>overflow-x</code> 和 <code>overflow-y</code></li><li>滚动条所占空间属于 <code>width</code> 和 <code>height</code></li></ol><h3 id="resize属性"><a href="#resize属性" class="headerlink" title="resize属性"></a>resize属性</h3><p><code>resize</code> 属性设置用户是否能调整元素大小</p><p>语法: <code>resize : none(默认)|horizontal(可调宽度)|vertical(可调高度)|both(自由调整)</code></p><p>注意点: 当 <code>overflow</code> 不为默认值 <code>visible</code> 时, <code>resize</code> 属性才生效</p><h3 id="visibility属性"><a href="#visibility属性" class="headerlink" title="visibility属性"></a>visibility属性</h3><p><code>visibility</code> 属性设置元素是否可见</p><p>语法: <code>visibility : visible(默认可见)|hidden(隐藏)</code></p><p>注意点: 在<strong>表格元素</strong>中设置 <code>visibility : collapse</code> 表示删除一行或者一列, 但不影响表格布局</p><h3 id="opacity属性"><a href="#opacity属性" class="headerlink" title="opacity属性"></a>opacity属性</h3><p><code>opacity</code> 属性设置元素的透明度</p><p>语法: <code>opacity : val</code></p><p>注意点:</p><ol><li><code>val</code> 取值 <strong>0.0</strong>(完全透明) 到 <strong>1.0</strong>(完全不透明), 默认值为1</li><li><strong>兼容性</strong>: IE8之前, 使用 <code>filter : Alpha(opacity = val)</code> 代替, <code>val</code> 取值 <strong>0 - 100</strong></li></ol><h3 id="让元素隐藏-不可见-的三种方式对比"><a href="#让元素隐藏-不可见-的三种方式对比" class="headerlink" title="让元素隐藏(不可见)的三种方式对比"></a>让元素隐藏(不可见)的三种方式对比</h3><p>让元素隐藏(不可见)可通过以下三种方式实现</p><ol><li><code>display : none</code></li><li><code>visibility : hidden</code></li><li><code>opacity : 0</code></li></ol><p>区别:</p><ol><li><code>diaplay : none</code> 是真正意义上的隐藏, 不占空间, 通过此方式控制显示隐藏会影响<strong>标准流</strong>布局, 而 <code>visibility : hidden</code> 和 <code>opacity : 0</code> 2中方式则仍会占原空间大小(不会影响标准流布局)</li><li><code>opacity : 0</code> 改变的仅是元素的透明度, 仍可被用户选中, 而<code>display : none</code> 和 <code>visibility : hidden</code> 2中方式则不可被选中</li></ol><h2 id="标准流-normal-flow"><a href="#标准流-normal-flow" class="headerlink" title="标准流(normal flow)"></a>标准流(normal flow)</h2><p>标准流指的是文本从左到右, 从上到下排列显示, 这也是传统HTML文档的文本布局</p><p>在标准流中, 块级元素独占一行, 垂直排列, 行内级/行内块级元素在水平方向一个接着一个排列, <strong>不会出现层叠现象</strong></p><h3 id="标准流中盒模型的上下外边距传递和折叠问题"><a href="#标准流中盒模型的上下外边距传递和折叠问题" class="headerlink" title="标准流中盒模型的上下外边距传递和折叠问题"></a>标准流中盒模型的上下外边距传递和折叠问题</h3><h4 id="上下外边距的传递"><a href="#上下外边距的传递" class="headerlink" title="上下外边距的传递"></a>上下外边距的传递</h4><ol><li>块级元素上顶线与块级父元素上顶线重合, <code>margin-top</code>传递到父元素</li><li>块级元素下底线与块级父元素下底线框重合, 父元素<code>height: auto</code>, <code>margin-bottom</code>传递到父元素</li></ol><p>解决方案:</p><ol><li>设置 <code>display : inline-block</code>, 改变元素的显示形式</li><li>通过给父元素设置上下内边距(<code>padding</code>)代替子元素的上下外边距(<code>margin</code>)</li><li>给父元素设置边框(<code>border</code>)</li></ol><h4 id="上下外边距的折叠"><a href="#上下外边距的折叠" class="headerlink" title="上下外边距的折叠"></a>上下外边距的折叠</h4><ol><li>垂直方向中, 两个相邻块级元素的 <code>margin-top</code> 和 <code>margin-bottom</code> 会合并, 取两者中的较大值</li><li>无内容的块级元素, 上下外边距折叠(<strong>不生效</strong>)</li></ol><p>解决方案:</p><ol><li>设置 <code>display : inline-block</code>, 改变元素的显示形式</li><li>只设一个外边距(治标不治本), 且对第二种情况不生效</li><li>设置上下内边距(<code>padding</code>)代替上下外边距(<code>margin</code>)</li></ol><h2 id="定位和浮动"><a href="#定位和浮动" class="headerlink" title="定位和浮动"></a>定位和浮动</h2><p>在工作中, 我们经常需要让元素层叠(即<strong>脱离标准流</strong>), 在CSS中我们可以通过 <code>position</code>(定位) 或者 <code>float</code>(浮动) 属性实现</p><h3 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h3><ol><li><p><strong>静态定位</strong>(默认)</p><p>语法: <code>position : static</code></p><p>注意点: <strong>标准流布局</strong>, 元素只能通过 <code>margin</code>(外边距) 和 <code>padding</code> (内边距) 调整位置</p></li><li><p><strong>相对定位</strong></p><p>语法: <code>position : relative</code></p><p>注意点:</p><ol><li><strong>标准流布局</strong>, 元素仍占着原本的位置空间</li><li>参照对象是元素原本的位置</li><li>可通过<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>以及<strong>内外边距</strong>进行调整</li><li>不会影响其他兄弟元素的布局, 可实现层叠效果 </li></ol></li><li><p><strong>绝对定位</strong></p><p>语法: <code>position : absolute</code></p><p>注意点:</p><ol><li><strong>脱离标准流</strong>, 不占原来位置</li><li>参照对象是<strong>最邻近的定位祖先元素</strong>, 如果没有, 则参照<strong>视口</strong>( <strong>viewport</strong> )</li><li>可通过<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>以及<strong>内外边距</strong>进行调整</li></ol></li><li><p><strong>固定定位</strong></p><p>语法: <code>position : fixed</code></p><p>注意点:</p><ol><li><strong>脱离标准流</strong>, 不占原来位置</li><li>参照对象是<strong>视口</strong>( <strong>viewport</strong> )</li><li>可通过<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>以及<strong>内外边距</strong>进行调整</li><li><strong>画布</strong>( document )滚动时, 元素固定不动</li></ol><p><img src="/images/position.png" alt="四种定位对比"></p></li><li><p><strong>z-index属性</strong></p><p><code>z-index</code> 属性指定元素的层叠顺序</p><p>语法: <code>z-index : number</code></p><p>注意点:</p><ol><li><p>只对<strong>定位元素</strong>生效, 而<strong>静态定位</strong>元素一般在最底层</p></li><li><p>值越高, 越靠近顶层, 可设<strong>负值</strong>, 表示被<strong>静态定位</strong>元素覆盖</p></li><li><p>两个定位元素的层叠顺序比较</p><p>a) 设置了相同<code>z-index</code>且<strong>祖先元素没有设置</strong>, 后面的覆盖前面的</p><p>b) 祖先元素设置了<code>z-index</code>,  子元素在比较时, 先比较最外层祖先元素的<code>z-index</code>属性, 然后逐层比较, 较大值覆盖较低值</p></li></ol></li></ol><h3 id="float属性"><a href="#float属性" class="headerlink" title="float属性"></a>float属性</h3><p>语法: <code>float : none(默认)|left(向左浮动)|right(向右浮动)</code></p><p>注意点:</p><ol><li><strong>脱离标准流</strong></li><li>向左或向右移动, 直到自己边界紧贴包含块(一般是父元素)或者其他浮动元素的边界</li><li>浮动元素不会跟行内级/行内块级元素层叠</li><li>浮动元素之间互不层叠</li><li>定位元素一般层叠在浮动元素上</li><li>行内级/行内块级元素浮动后, 元素顶部与该行顶部对齐</li><li>之后浮动的元素顶部不会超过之前所有浮动元素的顶部</li><li><strong>绝对定位元素</strong>会忽视<code>float</code>属性</li></ol><h4 id="浮动导致的父元素高度坍塌问题"><a href="#浮动导致的父元素高度坍塌问题" class="headerlink" title="浮动导致的父元素高度坍塌问题"></a>浮动导致的父元素高度坍塌问题</h4><p>由于元素浮动后, 不再向父元素报备高度, 因此当所有子元素都浮动后会导致父元素高度坍塌</p><p>解决办法:</p><ol><li><p>快速解决, 给父元素设置 <code>overflow : hidden</code>, 改变父元素对内容溢出的默认行为(不推荐), 一般开发测试阶段使用</p></li><li><p>清浮动, 给对应父元素加<code>clear-fix</code>类名</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clear-fix</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>    <span class="token property">content</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span> <span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">clear</span> <span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">height</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 兼容旧浏览器 */</span>    <span class="token property">visibility</span> <span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 兼容旧浏览器 */</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clear-fix</span> </span><span class="token punctuation">{</span>    *<span class="token property">zoom</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 兼容IE6~7浏览器 */</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> display </tag>
            
            <tag> position </tag>
            
            <tag> float </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - 盒子模型</title>
      <link href="/2017/12/25/css-boxmodel/"/>
      <url>/2017/12/25/css-boxmodel/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言: 盒子模型分为IE盒模型和W3C标准盒模型, IE盒模型指的是IE6之前IE浏览器所识别的盒子模型, IE6之后IE浏览器在标准兼容模式下使用的是W3C标准盒模型, 本文只研究W3C标准盒模型</p></blockquote><p>盒子包括4部分, 从里到外分别是: <code>content</code>(内容)、<code>border</code>(边框)、<code>padding</code>(内边距)、<code>margin</code>(外边距)</p><p><img src="/images/boxModel.png" alt="W3C标准盒模型"></p><h2 id="标准盒子模型中的CSS属性"><a href="#标准盒子模型中的CSS属性" class="headerlink" title="标准盒子模型中的CSS属性"></a>标准盒子模型中的CSS属性</h2><h3 id="width属性"><a href="#width属性" class="headerlink" title="width属性"></a>width属性</h3><p>语法: <code>width : 数值 + 单位</code></p><font color="deepskyblue">注意点: 指的是内容(content)的宽度</font><h3 id="height属性"><a href="#height属性" class="headerlink" title="height属性"></a>height属性</h3><p>语法: <code>height : 数值 + 单位</code></p><font color="deepskyblue">注意点: 指的是内容(content)的高度</font><h3 id="border整合属性"><a href="#border整合属性" class="headerlink" title="border整合属性"></a>border整合属性</h3><p>语法: <code>border: width style color</code></p><p>注意点: 三个属性值均允许省略(缺失), 但不建议</p><p><strong>分类属性:</strong></p><ol><li>按方向(<code>direction</code>)细分: <code>border-top</code>、<code>border-right</code>、<code>border-bottom</code>、<code>border-left</code></li><li>按类型(<code>type</code>)细分: <code>border-width</code>(边框大小)、<code>border-style</code>(边框样式)、<code>border-color</code>(边框颜色)</li></ol><p>注意点:</p><ol><li><p>边框的方向属性语法: <code>border-(direction) : width style color</code> </p></li><li><p><code>border</code>整合属性实际是同时设置四个方向属性的<code>width</code>、<code>style</code>、<code>color</code></p></li><li><p>根据 <strong>方向</strong> 和 <strong>类型</strong> 可以继续细分出 <code>border-(direnction)-(type)</code> <strong>12</strong>个属性</p></li><li><p><code>border-color</code> 不设值, 默认和目标元素的前景色(<code>color</code>)一致</p></li><li><p><code>border-style</code> 常用值</p><p><img src="/images/border.png" alt="边框样式"></p></li></ol><h3 id="padding整合属性"><a href="#padding整合属性" class="headerlink" title="padding整合属性"></a>padding整合属性</h3><p>语法: <code>padding: val</code></p><p>可按 <strong>方向</strong> 细分: <code>padding-top</code>、<code>padding-right</code>、<code>padding-bottom</code>、<code>padding-left</code></p><p>注意点:</p><ol><li>可取值 <strong>auto(自动)</strong> 或者 <strong>具体数值 + 单位</strong></li><li><code>padding</code>整合属性, 设置4个值时, 表示分别设置 <strong>上右下左</strong> 方向的内边距</li><li><code>padding</code>整合属性, 只设置一个值, 表示同时四个方向的内边距</li><li><code>padding</code>整合属性设置2个值, 即<code>padding : x y</code> , 表示 <strong>padding-left</strong> 和 <strong>padding-right</strong> 的值为 <code>x</code>, <strong>padding-top</strong> 和 <strong>padding-bottom</strong> 的值为 <code>y</code></li><li><code>padding</code>整合属性设置3个值, 即<code>padding: left y right</code>, 表示 <strong>padding-left</strong> 值为 <code>left</code>, <strong>padding-right</strong> 值为 <code>right</code>, <strong>padding-top</strong> 和 <strong>padding-bottom</strong> 的值为 <code>y</code></li></ol><h3 id="margin整合属性"><a href="#margin整合属性" class="headerlink" title="margin整合属性"></a>margin整合属性</h3><p>语法: <code>margin : val</code></p><p>可按 <strong>方向</strong> 细分: <code>marigin-top</code>、<code>margin-right</code>、<code>margin-bottom</code>、<code>margin-left</code></p><p>注意点:</p><ol><li>可取值 <strong>auto(自动)</strong> 或者 <strong>具体数值 + 单位</strong></li><li><code>margin</code>整合属性, 设置4个值时, 表示分别设置 <strong>上右下左</strong> 方向的外边距</li><li><code>margin</code>整合属性, 只设置一个值, 表示同时四个方向的外边距</li><li><code>margin</code>整合属性设置2个值, 即<code>margin: x y</code> , 表示 <strong>margin-left</strong> 和 <strong>margin-right</strong> 的值为 <code>x</code>, <strong>margin-top</strong> 和 <strong>margin-bottom</strong> 的值为 <code>y</code></li><li><code>margin</code>整合属性设置3个值, 即<code>margin: left y right</code>, 表示 <strong>margin-left</strong> 值为 <code>left</code>, <strong>margin-right</strong> 值为 <code>right</code>, <strong>margin-top</strong> 和 <strong>margin-bottom</strong> 的值为 <code>y</code></li></ol><h2 id="box-sizing属性"><a href="#box-sizing属性" class="headerlink" title="box-sizing属性"></a>box-sizing属性</h2><p>CSS3属性, 设置元素的盒模型的表现形式</p><p>语法: <code>box-sizing : content-box(默认值, 标准盒模型)|border-box(可理解为IE盒模型)</code></p><p><img src="/images/borderbox.png" alt="border-box"></p><p>观察上图可得, 当 <code>box-sizing</code> 设置为 <code>border-box</code> 时：</p><ol><li><code>width</code> 包括 <strong>content</strong>、<strong>padding-left</strong>、<strong>padding-right</strong>、<strong>border-left</strong>、<strong>border-right</strong></li><li><code>height</code> 包括 <strong>content</strong>、<strong>padding-top</strong>、<strong>padding-bottom</strong>、<strong>border-top</strong>、<strong>border-bottom</strong></li></ol><h2 id="盒子模型的其他属性"><a href="#盒子模型的其他属性" class="headerlink" title="盒子模型的其他属性"></a>盒子模型的其他属性</h2><h3 id="border-radius整合属性"><a href="#border-radius整合属性" class="headerlink" title="border-radius整合属性"></a>border-radius整合属性</h3><p>设置圆角边框(圆角半径)</p><p>语法: <code>border-radius : val</code></p><p>分类属性: </p><ol><li><code>border-top-left-radius : x [y]</code> 左上角</li><li><code>border-top-right-radius : x [y]</code> 右上角</li><li><code>border-bottom-right-radius : x [y]</code> 右下角</li><li><code>border-bottom-left-radius : x [y]</code> 左下角</li></ol><p>注意点:</p><ol><li><p>当使用单位为 <strong>%</strong> 时, <strong>x</strong> 相对当前元素<code>width</code>进行计算,  <strong>y</strong> 相对当前元素<code>height</code>进行计算</p></li><li><p>只设一个值, 表示水平和垂直半径值一样(非计算值)</p></li><li><p><code>border-radius</code>整合属性实际是同时设置4个角的圆角半径, 效果如下</p><ol><li>水平和垂直半径值一样</li></ol><pre class=" language-css"><code class="language-css"><span class="token property">border-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token property">border-top-left-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">border-top-right-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-right-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-left-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token property">border-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px <span class="token number">25</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token property">border-top-left-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">border-top-right-radius</span> <span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-right-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-left-radius</span> <span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token property">border-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px <span class="token number">25</span>px <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token property">border-top-left-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">border-top-right-radius</span> <span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-right-radius</span> <span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-left-radius</span> <span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token property">border-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px <span class="token number">25</span>px <span class="token number">15</span>px <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token property">border-top-left-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">border-top-right-radius</span> <span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-right-radius</span> <span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-left-radius</span> <span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span></code></pre><ol start="2"><li>水平和垂直方向半径不一样, 设置垂直方向半径, 与水平方向半径赋值效果一样, 最终效果如下</li></ol><pre class=" language-css"><code class="language-css"><span class="token property">border-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px <span class="token number">25</span>px <span class="token number">15</span>px <span class="token number">5</span>px / <span class="token number">5</span>px <span class="token number">15</span>px <span class="token number">25</span>px <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token property">border-top-left-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token property">border-top-right-radius</span> <span class="token punctuation">:</span> <span class="token number">25</span>px <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-right-radius</span> <span class="token punctuation">:</span> <span class="token number">15</span>px <span class="token number">25</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-left-radius</span> <span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token number">35</span>px<span class="token punctuation">;</span></code></pre></li></ol><h3 id="outline整合属性"><a href="#outline整合属性" class="headerlink" title="outline整合属性"></a>outline整合属性</h3><p>在盒子模型(边框外)设置轮廓</p><p>语法: <code>outline : width style color</code></p><p>注意点: <code>outline</code> 整合属性和 <code>border</code> 整合属性用法一样</p><p>分类属性:</p><ol><li><code>outline-width</code> 用法与 <code>border-width</code> 一样</li><li><code>outline-style</code> 用法与 <code>border-style</code> 一样</li><li><code>outline-color</code> 用法与 <code>border-color</code> 一样</li><li><code>outline-offset : 数值 + 单位</code> 设置轮廓与边框的偏移, 支持负值</li></ol><p><code>outline</code>(轮廓) 与 <code>border</code>(边框) 的<strong>区别</strong>:</p><ol><li><p>轮廓不占用实际空间, 即<strong>不会影响页面布局</strong></p></li><li><p>边框可以通过<code>border-radius</code>属性设置圆角(可以为圆形), 轮廓只能是直角</p></li><li><p>轮廓不能单独设置某一边的属性(没有按方向细分的分类属性)</p></li><li><p>对于<strong>行内级元素</strong>, <strong>文本(一定行高内)换行</strong>时, <strong>轮廓是连续的, 边框则不连续</strong></p><p><img src="/images/border&amp;outline.png" alt="轮廓与边框"></p></li></ol><h3 id="box-shadow属性"><a href="#box-shadow属性" class="headerlink" title="box-shadow属性"></a>box-shadow属性</h3><p>给盒模型(<strong>边框</strong>)设置阴影</p><p>语法: <code>box-shadow: x y [blur [spread]] [color] [inset]</code></p><p>注意点:</p><ol><li>必须值: <strong>x</strong> — 水平位置  <strong>y</strong> — 垂直位置,  均支持负值</li><li>可选值: <strong>blur</strong> — 阴影距离, 仅<strong>正值,</strong> 值越大越模糊, 默认为0</li><li>可选值: <strong>spread</strong> — 阴影尺寸, 支持<strong>负值</strong>, 需要设置在 <strong>blur</strong> 后面(即blur需占位), 默认为 <code>border-box</code>的宽高</li><li>可选值: <strong>color</strong> — 阴影颜色, 默认跟随当前元素<strong>前景色(color)</strong></li><li>可选值: <strong>inset</strong> — 设为内部阴影, 默认为 (outset) 外部阴影</li><li>需要按顺序设置, <strong>color</strong> 可放在<strong>最前</strong>或者<strong>最后</strong></li><li>可添加多个阴影,  阴影列表用 ( <strong>,</strong> ) 逗号隔开</li><li>阴影不占实际空间, 即<strong>不会影响页面布局</strong></li></ol><h3 id="min-width-和-min-height"><a href="#min-width-和-min-height" class="headerlink" title="min-width 和 min-height"></a>min-width 和 min-height</h3><p>设置元素的最小宽高, 一般配合<code>width : 数值 + 计算单位</code>使用</p><p>语法: <code>min-width : val</code>、<code>min-height ： val</code></p><font color="deep"><strong>计算单位:  %、em、rem</strong></font><h3 id="max-width-和-max-height"><a href="#max-width-和-max-height" class="headerlink" title="max-width 和 max-height"></a>max-width 和 max-height</h3><p>设置元素的最大宽度,  一般配合<code>width : 数值 + 计算单位</code>使用</p><p>语法: <code>max-width : val</code>、<code>max-height ： val</code></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Box Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - 常用属性以及继承和优先级</title>
      <link href="/2017/12/21/css-styles/"/>
      <url>/2017/12/21/css-styles/</url>
      
        <content type="html"><![CDATA[<h2 id="字体-font-属性"><a href="#字体-font-属性" class="headerlink" title="字体(font)属性"></a>字体(font)属性</h2><ol><li><p><strong>设置字体大小</strong></p><p>语法: <code>font-size : 具体数值 + 单位</code></p><p>常用单位: <code>px</code>、<code>em</code>、<code>rem</code>、<code>%</code></p><font color="deepskyblue"><strong>em</strong> 和 <strong>%</strong> 是基于父元素字体大小进行计算, <strong>rem</strong>则基于html字体大小进行计算</font></li><li><p><strong>设置文字的粗细</strong></p><p>语法: <code>font-weight : val</code></p><p>取值: <code>n*100(1&lt;=n&lt;=9)</code>、<code>normal(400)</code>、<code>bold(700)</code></p></li><li><p><strong>设置文字的行高</strong></p><p>语法: <code>line-height : val</code></p><p><font color="deepskyblue">文字垂直方向居中:</font> <code>line-height = 容器 height</code></p></li><li><p><strong>设置字体的样式</strong></p><p>语法: <code>font-style : val</code></p><p>取值: <code>normal</code>(默认)、<code>italic</code>(斜体)、<code>oblique</code>(倾斜, 针对没有斜体的文字)</p></li><li><p><strong>设置英文字母大小写</strong></p><p>语法: <code>font - variant : val</code></p><p>取值: <code>normal</code>(默认)、<code>small-caps</code>(小型大写字母)</p></li><li><p><strong>设置字体</strong></p><p>语法: <code>font - family : val</code></p><p>注意点: </p><ol><li>可设置多个值, 用( <strong>,</strong> )逗号隔开, 解决兼容, 一直找到可用字体</li><li>字体名称包含空格, 它必须加上引号</li></ol></li><li><p><strong>自定义字体(加载网络字体)</strong></p><p>语法:</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 定义(引入)字体 */</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>     <span class="token property">font-family</span><span class="token punctuation">:</span> 自定义字体名称<span class="token punctuation">;</span>     <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('Sansation_Light.ttf')</span>,          <span class="token url">url('Sansation_Light.eot')</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* IE9 */</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* 使用字体 */</span><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> 自定义字体名称<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其他可选属性:</p><ol><li><code>font-stretch</code> 设置字体改如何被拉长</li><li><code>font-style</code> 设置字体样式</li><li><code>font-weight</code> 设置字体粗细</li><li><code>unicode-range</code> 设置字体支持的Unicode字符范围</li></ol></li><li><p><strong>font整合属性</strong></p><p>语法: <code>font: [font-style] [font-variant] [font-weight] font-size[/line-height] font-family</code></p><p>注意点:</p><ol><li>需要按顺序设置</li><li><code>font-size</code> 和 <code>font-family</code> 的值是必需的</li><li><code>line-height</code> 必须紧跟着 <code>font-size</code> 通过 <code>/</code> 连接</li></ol></li></ol><h2 id="文本-text-属性"><a href="#文本-text-属性" class="headerlink" title="文本(text)属性"></a>文本(text)属性</h2><ol><li><p><strong>设置文本水平对齐方式</strong></p><p>语法: <code>text-align : center|left|right|justify(两端对齐)</code></p></li><li><p><strong>设置文本装饰线</strong></p><p>语法: <code>text-decoration : val</code></p><p>取值: <code>none|underline|overline|line-through|blnk(闪烁文本)</code></p></li><li><p><strong>设置文本首行缩进</strong></p><p>语法: <code>text-indent : 数值 + 单位</code></p><p>注意点:</p><ol><li>支持负数, 表示向左缩进</li><li>常用单位 <strong>em</strong> , 表示缩进多少个字符</li></ol></li><li><p><strong>设置文本阴影</strong></p><p>语法: <code>text-shadow : x y [blur] [color]</code></p><p>注意点:</p><ol><li>必须值: <strong>x</strong> — 水平位置  <strong>y</strong> — 垂直位置,  均支持负值</li><li>可选值: <strong>blur</strong> — 阴影距离(仅正值)  <strong>color</strong> — 阴影颜色(默认跟随字体颜色)</li><li>需要按顺序设置, <strong>color</strong> 可放在<strong>最前</strong>或者<strong>最后</strong></li><li>可添加多个阴影,  阴影列表用 ( <strong>,</strong> ) 逗号隔开</li><li>阴影不占实际空间, 即<strong>不会影响页面布局</strong></li></ol></li><li><p><strong>设置文本大小写</strong></p><p>语法: <code>text-transform : val</code></p><p>取值: <code>none</code>(默认)、<code>capitalize</code>(首字母大写)、<code>uppercase</code>(全大写)、<code>lowercase</code>(全小写)</p></li><li><p><strong>设置字符间距</strong></p><p>语法: <code>letter-spacing : 数值 + 单位</code></p><p>注意点: 默认<code>normal</code>, 支持负值</p></li><li><p><strong>设置单词间距</strong></p><p>语法: <code>word-spacing : 数值 + 单位</code></p><p>注意点: 默认<code>normal</code>, 支持负值, <font color="deepskyblue">需要手动用空格区分单词</font></p></li><li><p><strong>设置当文本溢出容器时处理方式</strong></p><p>语法: <code>text-overflow : val</code></p><p>取值: <code>clip</code>(默认值, 修剪)、<code>ellipsis</code>(省略号代替修剪部分)、<code>string</code>(指定字符串代替)</p></li><li><p><strong>设置自动换行的处理方式</strong></p><p>语法: <code>word-break : val</code></p><p>取值: <code>normal</code>(默认)、<code>break-all</code>(允许单词内换行)、<code>keep-all</code>(只能在摆角空格/连字符处换行)</p></li><li><p><strong>允许长内容(单词/URL)自动转行</strong></p><p>语法: <code>word-wrap : normal|break-word(允许)</code></p></li><li><p><strong>设置元素内空白的处理方式</strong></p><p>语法:  <code>white-space : val</code></p><p>取值:</p><ol><li><code>normal</code> 默认忽略空白</li><li><code>pre</code> 保留空白, 与<code>&lt;pre&gt;</code>标签类似</li><li><code>nowrap</code> 不换行, 直到遇到 <code>&lt;br&gt;</code> 标签</li><li><code>pre-wrap</code> 保留空白符序列, 正常换行</li><li><code>pre-line</code> 合并空白符序列, 保留换行符</li></ol></li></ol><h3 id="文本单行忽略显示"><a href="#文本单行忽略显示" class="headerlink" title="文本单行忽略显示"></a>文本单行忽略显示</h3><pre class=" language-css"><code class="language-css"><span class="token property">white-space</span> <span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token property">text-overflow</span> <span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></code></pre><h2 id="列表-list-style-属性"><a href="#列表-list-style-属性" class="headerlink" title="列表(list-style)属性"></a>列表(list-style)属性</h2><ol><li><p><strong>设置项目标志的类型</strong></p><p>语法: <code>list-style-type : typename</code></p><p>常用属性值: <code>none</code>(无标记)、<code>disc</code>(实心圆)、<code>circle</code>(空心圆)、<code>square</code>(实心方块)、<code>decimal</code>(数字)</p></li><li><p><strong>设置项目标记的位置</strong></p><p>语法: <code>list-style-position : outside(默认)|inside</code></p><p>效果:</p><ol><li><p><code>outside</code> : 列表项目标记放置在文本以外, 且环绕文本不根据标记对齐</p></li><li><p><code>inside</code> : 列表项目标记放置在文本以内, 且环绕文本根据标记对齐</p><p><img src="/images/list-style-position.png" alt="项目标志位置"></p></li></ol></li><li><p><strong>设置图片项目标志</strong></p><p>语法: <code>list-style-image : 图片URL</code></p><p>注意点: 以防图像不可用, 使用图片项目标志时, 建议设置 <code>list-style-type</code></p></li><li><p><strong>list-style整合属性</strong></p><p>语法: <code>list-style : list-style-type list-style-position list-style-image</code></p><p>注意点: 需要按顺序设置, 但可不设置其中某个属性, 表示该属性使用默认值</p></li></ol><h2 id="表格相关样式"><a href="#表格相关样式" class="headerlink" title="表格相关样式"></a>表格相关样式</h2><ol><li><p><strong>设置单元格边框是否合并</strong></p><p>语法: <code>border-collapse : separate(默认分开)|collapse(合并)</code></p></li><li><p><strong>设置相邻单元格边框之间的距离</strong></p><p>语法: <code>border-spacing : x [y]</code></p><p>注意: </p><ol><li>需要带单位, 只设一个值表示水平和垂直方向的间距一致</li><li>当<code>border-collapse</code> 设置为 <code>collapse</code> 时, 该属性不起作用</li></ol></li><li><p><strong>设置表格标题(<code>&lt;caption&gt;标签</code>)的位置</strong></p><p>语法: <code>caption-side : top(默认)|bottom</code></p></li><li><p><strong>隐藏空单元格</strong></p><p>语法: <code>empty-cells : show(默认)|hide(隐藏)</code></p><p>注意点: <code>empty-cells : hide</code> 仅在 <code>border-collapse : separate</code> 时生效</p></li><li><p><strong>设置表格布局</strong></p><p>语法: <code>table-layout : auto|fixed</code></p><p>注意点:</p><ol><li><code>auto</code> 默认值, 列宽根据单元格内容设置</li><li><code>fixed</code> 列宽根据表格宽度设置</li></ol></li></ol><h2 id="设置颜色"><a href="#设置颜色" class="headerlink" title="设置颜色"></a>设置颜色</h2><ol><li><p><strong>前景颜色</strong></p><p>语法: <code>color : 颜色</code></p><p>注意: 前景包括 <strong>文本</strong> 、<strong>边框</strong>、<strong>阴影</strong></p></li><li><p><strong>背景颜色</strong></p><p>语法: <code>background-color : 颜色</code></p></li><li><p><strong>CSS中设置颜色</strong></p><p>a) <strong>基本颜色关键字(英文)</strong></p><p>​    如 <code>white</code>、<code>black</code>、<code>pink</code>、<code>skyblue</code>、<code>deepskyblue</code> 等</p><p>​    局限性: 仅提供百来种基本颜色关键字</p><p>b) <strong>RGB颜色(常用形式)</strong></p><p>​    十进制语法: <code>rgb(red,green,blue)</code>, 取值 <strong>0 - 255</strong></p><p>​    十六进制语法: <code>#rrggbb</code> 可简写: <code>#rgb</code>, 取值 <strong>00 - ff</strong> </p><p>​    白色: <code>rgb(255,255,255)</code>|<code>#fff</code></p><p>​    黑色: <code>rgb(0,0,0)</code>|<code>#000</code></p><p>c) <strong>RGBA颜色(一般做特效用, 带透明度)</strong></p><p>​    A — alpha透明度, 取值 <strong>0 - 1</strong></p><p>​    语法: <code>rhba(red,green,blue,alpha)</code></p><p>​    完全透明: <code>transparent</code>|<code>rgba(red,green,blue,0)</code></p></li></ol><h2 id="设置鼠标指针样式"><a href="#设置鼠标指针样式" class="headerlink" title="设置鼠标指针样式"></a>设置鼠标指针样式</h2><p>语法: <code>cursor : style</code></p><p>常用值:</p><ol><li><code>auto</code> 默认值, 使用浏览器设置的光标</li><li><code>none</code> 不显示光标</li><li><code>default</code> 系统默认光标(斜箭头)</li><li><code>pointer</code> 链接光标(小手)</li><li><code>text</code> 文本输入/选择光标</li><li><code>move</code> 移动光标</li></ol><h3 id="设置图片光标"><a href="#设置图片光标" class="headerlink" title="设置图片光标"></a>设置图片光标</h3><p>语法:  <code>cursor : url(图片URL) x y , replaceStyle</code></p><p>注意点:</p><ol><li><code>x</code> 和 <code>y</code> 代表图片光标与当前像素格(1px*1px区域)的偏移量, 支持负值</li><li><code>replaceStyle</code> 代表当图片失效时, 代替的指针样式</li></ol><h2 id="样式的继承与优先级"><a href="#样式的继承与优先级" class="headerlink" title="样式的继承与优先级"></a>样式的继承与优先级</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承指的是: 没有设置样式的元素会继承父元素的样式</p><p>注意点:</p><ol><li><p><strong>默认继承的属性</strong>: 子元素的<strong>字体样式</strong>和<strong>文本样式</strong>如果不设值, 默认继承父元素的对应样式</p></li><li><p>对于不可继承的样式属性, 可通过 <code>inherit</code> 属性<strong>强制继承</strong></p><p>语法: <code>样式属性名: inherit</code></p><p>注意点:</p><ol><li><strong>只继承属性值</strong>, 不继承样式名称</li><li>继承的是 <strong>计算值</strong></li></ol></li></ol><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>优先级指的是: 同一个元素的同一个样式属性被多次赋值时, 该元素优先使用哪个属性值</p><p>为了方便比较CSS属性的优先级, 给CSS属性所处的环境定义一个权重(从大到小):</p><font color="yellowgreen">!important &gt; 内联样式 &gt; id选择器 &gt; 类/属性/伪类选择器 &gt; 元素(标签)/伪元素选择器 &gt;通用选择器</font><p><code>!important</code> 属性语法: <code>样式属性名 : 属性值 !important</code></p><p>注意点:</p><ol><li>每条样式属性都有自己的优先级</li><li><code>!important</code> 属性只针对某条样式属性</li></ol><p>总结:</p><ol><li>针对性越强的选择器, 优先级越高</li><li>权重可叠加</li><li>优先级一样, 就近原则(后面的覆盖前面的)</li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> styles </tag>
            
            <tag> inheritance </tag>
            
            <tag> priority </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS简介</title>
      <link href="/2017/12/12/css-intro/"/>
      <url>/2017/12/12/css-intro/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="结构与样式分离"><a href="#结构与样式分离" class="headerlink" title="结构与样式分离"></a>结构与样式分离</h2><p>在介绍CSS前, 先说说结构和样式分离</p><p>结构和样式分离即<strong>尽可能不使用HTML元素来设置样式</strong></p><p>意义:</p><ol><li>各司其职, 功能分明</li><li>方便维护管理</li></ol></blockquote><h2 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h2><p>CSS(Cascading Style Sheets), 层叠样式表, 可以给每个元素设置样式</p><p><strong>样式书写格式</strong>: <code>样式名: 样式值</code></p><p>注意: <font color="tomato">css的样式名都是小写</font></p><h3 id="CSS的三种引入方式"><a href="#CSS的三种引入方式" class="headerlink" title="CSS的三种引入方式"></a>CSS的三种引入方式</h3><h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><p>直接将样式写在元素的style属性上</p><font color="yellowgreen"><strong>不推荐</strong>(结构与样式分离), 并且只能在一个元素上生效</font><p>语法: <code>&lt;标签名 style=&quot;样式1; 样式2&quot;&gt;</code></p><h4 id="文档样式表"><a href="#文档样式表" class="headerlink" title="文档样式表"></a>文档样式表</h4><p>将样式写在head元素的style元素中</p><font color="yellowgreen">写demo或者测试时常用, 方便对照管理, 但在项目中会造成混乱</font><p>语法:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">选择器 </span><span class="token punctuation">{</span>            样式<span class="token number">1</span><span class="token punctuation">;</span>            样式<span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p>注意点: <font color="tomato">style元素的type属性默认值是 text/css, 可省略</font></p><h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><p>将样式写在单独的CSS文件中, 然后在html文件head元素中引入</p><font color="yellowgreen">真正的结构和样式分离, 分文件管理</font><p>引入CSS文件的2种方式</p><ol><li><p><strong>link</strong> 标签引入</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CSS文件的URL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>注意点:</p><p>​    a) <font color="tomato">link元素的type属性默认值是 text/css, 可省略</font></p><p>​    b) <font color="tomato">CSS文件中, 最好在开头写上 @charset “UTF-8”; 然后直接写选择器和样式</font></p></li><li><p><strong>@import</strong> 引入, <font color="tomato">不建议使用, 效率比link低</font></p></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token atrule"><span class="token rule">@import</span> <span class="token string">"CSS文件的URL"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="CSS的注释语法"><a href="#CSS的注释语法" class="headerlink" title="CSS的注释语法"></a>CSS的注释语法</h3><p>CSS的注释语法: <code>/* 注释 */</code></p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>选择器编写原则: <strong>保证精准的情况下尽量简洁</strong></p><h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><font color="tomato">注意点: 通配符会降低网页显示的速度, 尽量不用</font><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><pre class=" language-css"><code class="language-css"><span class="token selector">标签名 </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="类选择器-最常用的选择器"><a href="#类选择器-最常用的选择器" class="headerlink" title="类选择器(最常用的选择器)"></a>类选择器(<font color="deepskyblue">最常用的选择器</font>)</h3><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.class</span>值 </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点: </p><p>a) 在一个HTML文档中, class值可以重复使用, 表示一类元素</p><p>b) 多单词class命名规则: 用 <code>-</code>、<code>_</code> 链接, 或者使用<strong>小驼峰命名</strong></p><p>c) 一个元素可以有多个class值, 通过空格分隔</p><p>d) 最好不要用标签名作为class值</p><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#id</span>值 </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点:</p><p>a) 一个HTML文档中, <strong>id</strong> 值是唯一的, 不能重复(即<strong>一个id对应一个元素</strong>)</p><p>b) 多单词id命名规则: 用 <code>-</code>、<code>_</code> 链接, 或者使用<strong>小驼峰命名</strong></p><p>c) 最好不要用标签名作为id值</p><h3 id="属性选择器-一般用于表单元素"><a href="#属性选择器-一般用于表单元素" class="headerlink" title="属性选择器(一般用于表单元素)"></a>属性选择器(<font color="deep">一般用于表单元素</font>)</h3><font color="yellowgreen">att — attribute(属性)、val — value(属性值)</font><h4 id="选择拥有某属性的元素"><a href="#选择拥有某属性的元素" class="headerlink" title="选择拥有某属性的元素"></a>选择拥有某属性的元素</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[att]</span> </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h4 id="选择指定属性值的元素"><a href="#选择指定属性值的元素" class="headerlink" title="选择指定属性值的元素"></a>选择指定属性值的元素</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[att=val]</span> </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="选择属性值包含某字符串的元素"><a href="#选择属性值包含某字符串的元素" class="headerlink" title="选择属性值包含某字符串的元素"></a>选择属性值包含某字符串的元素</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[att~=val]</span> </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="选择属性值恰好等于某值-或者以某值开头且后面紧接着连字符-的元素"><a href="#选择属性值恰好等于某值-或者以某值开头且后面紧接着连字符-的元素" class="headerlink" title="选择属性值恰好等于某值, 或者以某值开头且后面紧接着连字符 - 的元素"></a>选择属性值恰好等于某值, 或者以某值开头且后面紧接着连字符 - 的元素</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[att|=val]</span> </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点: 此选择器一般用在 <code>lang</code> 属性上</p><h4 id="选择属性值以某值开头的元素"><a href="#选择属性值以某值开头的元素" class="headerlink" title="选择属性值以某值开头的元素"></a>选择属性值以某值开头的元素</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[att^=val]</span> </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="选择属性值以某值结尾的元素"><a href="#选择属性值以某值结尾的元素" class="headerlink" title="选择属性值以某值结尾的元素"></a>选择属性值以某值结尾的元素</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[att$=val]</span> </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="选择属性值包含某值的元素"><a href="#选择属性值包含某值的元素" class="headerlink" title="选择属性值包含某值的元素"></a>选择属性值包含某值的元素</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[att*=val]</span> </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>选择器中包含某些后代选择器的元素</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 后代选择器 <span class="token class">...</span></span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点:</p><ol><li>用空格隔开</li><li>包括直接子元素和间接子元素</li></ol><h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><p>特殊的后代选择器, 只包括直接子元素</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器>子选择器><span class="token class">...</span></span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点:</p><ol><li>用 <strong>&gt;</strong> 连接, 最好不要有空格</li><li>只包括直接子元素</li></ol><h4 id="兄弟选择器-sibling"><a href="#兄弟选择器-sibling" class="headerlink" title="兄弟选择器(sibling)"></a>兄弟选择器(sibling)</h4><h5 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h5><p>选择器1后面<strong>紧挨着</strong>的选择器2的元素</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器1+选择器2+<span class="token class">...</span></span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点: 用 <strong>+</strong> 连接, 最好不要有空格, 只能选后面的兄弟选择器</p><h5 id="全体兄弟选择器"><a href="#全体兄弟选择器" class="headerlink" title="全体兄弟选择器"></a>全体兄弟选择器</h5><p>选择器1后面<strong>所有</strong>选择器的元素</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器1~选择器2~<span class="token class">...</span></span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点: 用 <strong>~</strong> 连接, 最好不要有空格, 只能选后面的兄弟选择器</p><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><p>同时符合选择器1, 选择器2条件的元素</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器1选择器2<span class="token class">...</span></span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点:</p><ol><li>不留空格连接</li><li>标签名放在最前面</li></ol><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p>等价于给选择器1 选择器2的元素设置相同样式</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器1, 选择器2, <span class="token class">...</span></span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点: 用 <strong>,</strong> (逗号)连接, 可留空格</p><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><h4 id="动态伪类"><a href="#动态伪类" class="headerlink" title="动态伪类"></a>动态伪类</h4><ol><li><code>a:link</code> 未访问的网页</li><li><code>a:visited</code> 访问过的网页</li><li><code>a:focus</code> 当前拥有输入焦点的元素</li><li><code>a:hover</code> 鼠标移到元素上显示的样式<strong>(常用)</strong></li><li><code>a:active</code> 激活状态 (鼠标单击连接时, 未打开)</li></ol><p>注意点:</p><ol><li>除a元素外, <code>:hover</code> 和 <code>:active</code> 可以应用到其他元素上 (不常用, 兼容问题)</li><li><code>:hover</code>必须放在 <code>:link</code> 和 <code>:visited</code> 后面, <code>:active</code> 放在 <code>:hover</code> 后面</li><li><font color="deepskyblue">给a设置样式相当于给所有动态伪类设置样式</font></li></ol><h4 id="结构伪类-可单独使用"><a href="#结构伪类-可单独使用" class="headerlink" title="结构伪类(可单独使用)"></a>结构伪类(<font color="tomato">可单独使用</font>)</h4><ol><li><code>:nth-child(an+b)</code> 父元素的第an+b个子元素, a、b是常数, n是0和正整数</li><li><code>:nth-last-child(an+b)</code> 父元素的倒数第an+b个子元素</li><li><code>:nth-of-type(an+b)</code> 父元素中第an+b个该标签的子元素</li><li><code>:nth-last-of-type(an+b)</code> 父元素中倒数第an+b个该标签的子元素</li><li><code>:first-child</code> 等同于 :nth-child(1)</li><li><code>:last-child</code> 等同于 :nth-last-child(1)</li><li><code>:only-child</code> 父元素中唯一的子元素, 等同于 :first-child:last-child</li><li><code>:nth-child(2n)</code>、<code>:nth-child(even)</code> 父元素的第偶数个子元素</li><li><code>:nth-child(2n+1)</code>、<code>:nth-child(odd)</code> 父元素的第奇数个子元素</li><li><code>:empty</code> 代表内容完全空白的元素</li><li><code>:root</code> 根元素, 即html元素</li></ol><h4 id="否定伪类"><a href="#否定伪类" class="headerlink" title="否定伪类"></a>否定伪类</h4><p>语法: <code>:not(x)</code> x为简单选择器(否定伪类除外), 表示除x以外的元素</p><p>注意点</p><ol><li>最好加上标签</li><li>没有标签时, 一般加上 <code>:not(body):not(html)</code></li></ol><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><p>注意点: <font color="tomato">伪元素也能使用单冒号, 但为了更好区分伪元素和伪类, 建议伪元素使用双冒号</font></p><ol><li><p><code>::first-line</code> 针对首行文本设置(只能设置字体 颜色 背景属性)</p></li><li><p><code>::first-letter</code>  针对首字母设置(字体 margin padding)</p></li><li><p><code>::before</code> 和 <code>::after</code> 往元素前后加内容(<strong>比较常用</strong>)</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"文字内容"</span><span class="token punctuation">;</span>        -----插入文本    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token url">url("图片url")</span><span class="token punctuation">;</span>   -----插入图片    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>属性名<span class="token punctuation">)</span><span class="token punctuation">;</span>     -----获取属性值, 并插入元素中<span class="token punctuation">}</span></code></pre><p><font color="tomato"><strong>伪元素可以被鼠标选中</strong></font></p><p><font color="tomato"><strong>在伪元素选择器可以设置任何样式, 改变伪元素的行为表现</strong></font></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS introduce </tag>
            
            <tag> querySelector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML - 其他元素(持续更新)</title>
      <link href="/2017/12/09/html-elements-updating/"/>
      <url>/2017/12/09/html-elements-updating/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="标签语义化"><a href="#标签语义化" class="headerlink" title="标签语义化"></a>标签语义化</h2><p>其实单独使用任何一个元素标签(如div), 通过CSS和JS的渲染后即可编写一个完整的网页, 但这不利于团队开发</p><p><strong>标签语义化</strong>即选择标签时让每个标签都有正确的语义</p><p>意义:</p><ol><li>方便代码维护</li><li>减少开发者之间的沟通成本</li><li>让语音合成工具正确识别网页元素的用途</li><li>SEO优化</li></ol></blockquote><h2 id="vedio元素"><a href="#vedio元素" class="headerlink" title="vedio元素"></a>vedio元素</h2><p>视频标签, 支持 <strong>ogg</strong>、<strong>mp4</strong>、<strong>webm</strong> 格式</p><p>语法: <code>&lt;video src=&quot;视频URL&quot; poster=&quot;海报图片URL&quot; controls&gt;&lt;/video&gt;</code></p><p>属性:</p><ol><li><p><code>autoplay</code> 布尔属性, 自动播放, 高版本浏览器限制失效</p></li><li><p><code>muted</code> 布尔属性, 静音播放</p></li><li><p><code>width</code>和<code>height</code></p></li><li><p><code>loop</code> 循环次数, 值为 <strong>loop</strong> 或者 <strong>-1</strong> 表示无限循环</p></li><li><p><code>preload</code> 预加载, 取值 <strong>auto</strong>(默认全加载, 会影响整个网页加载速度)|<strong>metadata</strong>(加载元数据)</p></li><li><p>解决兼容性问题</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">poster</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>海报图片URL<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>视频URL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="audio元素"><a href="#audio元素" class="headerlink" title="audio元素"></a>audio元素</h2><p>音频标签, 支持 <strong>ogg</strong>、<strong>mp3</strong>、<strong>wav</strong> 格式</p><p>语法: <code>&lt;audio src=&quot;音频URL&quot; controls&gt;&lt;/audio&gt;</code></p><p>属性与<code>vedio</code>类似, 没有 <code>poster</code>、<code>width</code>、<code>height</code> 属性</p><h2 id="details元素"><a href="#details元素" class="headerlink" title="details元素"></a>details元素</h2><p>详情标签</p><p>语法: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>概要标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre><p>注意点:</p><ol><li>如果没有 <code>&lt;summary&gt;</code> 标签, 标题默认为 “<strong>详细信息</strong>“</li><li>有多个 <code>&lt;summary&gt;</code> 标签, 只认<strong>第一个</strong>, 其他当详情内容</li></ol><h2 id="被HTML5废弃的元素"><a href="#被HTML5废弃的元素" class="headerlink" title="被HTML5废弃的元素"></a>被HTML5废弃的元素</h2><h3 id="marquee元素"><a href="#marquee元素" class="headerlink" title="marquee元素"></a>marquee元素</h3><p>走马灯标签(目前使用不多, 被JS动画取代)</p><p>语法: <code>&lt;marquee behavior=&quot;行为&quot; direction=&quot;滚动方向&quot;&gt;&lt;/marquee&gt;</code></p><p>属性:</p><ol><li><code>behavior</code>: <strong>scroll</strong>(循环滚动)|<strong>slide</strong>(滚一次)|<strong>alternate</strong>(来回滚)</li><li><code>scrollamount</code>: 滚动速度, 单位像素(px/s)</li><li><code>loop</code>: 循环次数, 默认无限循环</li></ol><h3 id="不-bu-是-is-标签"><a href="#不-bu-是-is-标签" class="headerlink" title="不(bu)是(is)标签"></a>不(bu)是(is)标签</h3><ol><li>加粗强调: <code>&lt;b&gt;&lt;/b&gt;</code> —–&gt; <code>&lt;strong&gt;&lt;/strong&gt;</code></li><li>下划线: <code>&lt;u&gt;&lt;/u&gt;</code> —-&gt; <code>&lt;ins&gt;&lt;/ins&gt;</code></li><li>斜体: <code>&lt;i&gt;&lt;/i&gt;</code> —–&gt; <code>&lt;em&gt;&lt;/em&gt;</code></li><li>删除线: <code>&lt;s&gt;&lt;/s&gt;</code> —-&gt; <code>&lt;del&gt;&lt;/del&gt;</code></li></ol><p>废弃原因: <strong>标签语义化</strong></p><p>注意点: 目前, <code>&lt;i&gt;</code>标签在网页中多用于表示<strong>图标</strong>(icon)</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tags(elements) </tag>
            
            <tag> H5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML - 表单元素</title>
      <link href="/2017/11/20/html-form/"/>
      <url>/2017/11/20/html-form/</url>
      
        <content type="html"><![CDATA[<h2 id="form元素"><a href="#form元素" class="headerlink" title="form元素"></a>form元素</h2><p>一般情况下, 一个表单需要一个form元素, 其他表单元素都是forn元素的子元素</p><p>语法: <code>&lt;form action=&quot;提交数据的URL&quot;&gt;其他表单元素&lt;/form&gt;</code></p><p>其他属性:</p><ol><li><p><strong>method</strong>  表单提交的方法</p><p>a)get: 以明文形式提交数据</p><p>b)post: 将数据放在请求体中, 然后以请求体形式提交数据</p><p>区别: </p><ul><li>get的数据显示在请求路径中(格式: url?name1=val1&amp;name2=val2), post的在请求体中</li><li>get提交的数据一般不超过1kb, post则没有限制</li></ul></li><li><p><strong>enctype</strong> 对提交数据的编码方式</p></li><li><p><strong>accept-charset</strong> 对请求路径进行字符编码, 默认跟随当前HTML文档的编码</p></li></ol><h3 id="文件上传的必要条件"><a href="#文件上传的必要条件" class="headerlink" title="文件上传的必要条件"></a>文件上传的必要条件</h3><ol><li>method=”post”</li><li>enctype=”multipart/form-data”</li><li><code>&lt;input type=&quot;file&quot; name=&quot;xxx&quot;&gt;</code></li></ol><h2 id="input元素"><a href="#input元素" class="headerlink" title="input元素"></a>input元素</h2><p>语法: <code>&lt;input type=&quot;类型&quot;&gt;</code></p><h3 id="type属性"><a href="#type属性" class="headerlink" title="type属性"></a>type属性</h3><ol><li><code>text</code> 文本输入框(明文输入)</li><li><code>password</code> 文本输入框(密文输入)</li><li><code>radio</code> 单选框</li><li><code>checkbox</code> 复选框</li><li><code>button</code> 普通按钮</li><li><code>reset</code> 重置按钮</li><li><code>submit</code> 提交按钮</li><li><code>file</code> 文件上传</li><li><code>number</code> 数字输入框</li><li><code>email</code> 邮箱输入框</li><li><code>search</code> 搜索输入框</li><li><code>color</code> 颜色控件</li><li><code>date</code> 日期控件</li><li><code>month</code> 年份月份控件</li><li><code>week</code> 年份周数控件</li><li><code>time</code> 时间控件</li><li><code>datetime</code> 日期时间控件(基于UTC时区), <strong>chrome不支持</strong></li><li><code>datetime-local</code> 日期时间控件</li><li><code>image</code> 图片按钮, 效果和submit相同</li><li><code>range</code> 拖拽条</li><li><code>tel</code> 电话输入框</li><li><code>url</code> 地址输入框</li><li><code>hidden</code> 隐藏输入字段(在页面中隐藏一个数据, 在发送请求时, 将隐藏数据发送给服务器)</li></ol><h3 id="其他通用属性"><a href="#其他通用属性" class="headerlink" title="其他通用属性"></a>其他通用属性</h3><ol><li><code>name</code> 规定input元素的名称</li><li><code>value</code> 规定input元素的value值</li><li><code>required</code> 布尔属性, 规定该字段是必填项</li><li><code>readonly</code> 布尔属性, 规定该字段是只读字段</li><li><code>disabled</code> 布尔属性, 规定该input元素被禁用</li><li><code>autofocus</code> 布尔属性, 规定当文档加载完, 该input元素自动获得焦点</li><li><code>pattern</code> 正则表达式, 验证input元素的<code>value</code>值</li></ol><h3 id="注意点和特殊属性"><a href="#注意点和特殊属性" class="headerlink" title="注意点和特殊属性"></a>注意点和特殊属性</h3><ol><li><font color="deep">w3c规范规定input标签要有关联的label标签</font><p>label语法: <code>&lt;label for=&quot;input元素id值&quot;&gt;描述&lt;/label&gt;</code></p></li><li><p>一般 <code>name</code>、<code>value</code> 、<code>id</code>都是和后台约定的值</p></li><li><p>除了按钮, 其他input元素一般需要 <code>name</code> 属性</p></li><li><p>如果form元素中没有name属性元素, form元素的action属性会失效, 提交不了表单</p></li><li><p>常用type类型为 <strong>1 - 8</strong>, 后面的可能有兼容性问题</p></li><li><p>针对所有<strong>输入框</strong>的属性:</p><p>a) <code>placeholder</code> 占位文字, 提示词</p><p>b) <code>maxlength</code> 规定输入的最大字符数</p><p>c) <code>minlength</code> 规定输入的最小字符数</p><p>d) <code>size</code> 规定输入框的可见宽度(按字符计算)</p><p>e) <code>autocomplete</code> 值为 <strong>on</strong>|<strong>off</strong> 规定输入框是否弃用自动完成功能</p><p>f) <code>list</code> 指向<code>&lt;datalist&gt;</code>元素的id值, 含input元素的预定义选项</p><p>​    datalist语法: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span></code></pre></li><li><p>针对所有<strong>按钮</strong>, value属性可以改变按钮的名称</p></li><li><p>针对<strong>单选框</strong>(<code>radio</code>)和<strong>复选框</strong>(<code>checkbox</code>), 让同一组选择框产生关联, <code>name</code>属性值需要一致, <code>checked</code>布尔属性表示默认选中</p></li><li><p>针对<strong>文件上传</strong>, <code>multiple</code>属性支持上传多文件</p></li></ol><h2 id="button元素"><a href="#button元素" class="headerlink" title="button元素"></a>button元素</h2><p>和input元素的按钮效果一样</p><p>语法: <code>&lt;button type=&quot;按钮类型&quot;&gt;按钮名字&lt;/button&gt;</code></p><font color="deep">button元素一般搭配js赋予动作效果</font><h2 id="select元素"><a href="#select元素" class="headerlink" title="select元素"></a>select元素</h2><p>下拉选择菜单</p><p>语法: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>select</strong>元素常用属性: a) <code>multiple</code> 多选    b) <code>size</code> 显示多少项</p><p><strong>option</strong>元素常用属性: <code>selected</code> 默认选中</p><h2 id="textarea元素"><a href="#textarea元素" class="headerlink" title="textarea元素"></a>textarea元素</h2><p>文本域</p><p>语法: <code>&lt;textarea cols=&quot;列&quot; rows=&quot;行&quot;&gt;预设值&lt;/textarea&gt;</code></p><p>注意点: </p><ol><li>建议不用col, row设置尺寸, 通过CSS的width, height设置</li><li>文本域设置CSS样式: <code>resize: none(禁止缩放)|horizontal(水平缩放)|vertical(垂直缩放)|both(水平垂直缩放);</code></li></ol><h2 id="fieldset元素"><a href="#fieldset元素" class="headerlink" title="fieldset元素"></a>fieldset元素</h2><p>fieldset 元素可将表单内的相关元素分组, 将表单内容的一部分打包，生成一组相关表单的字段</p><p>语法:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>fieldset标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tags(elements) </tag>
            
            <tag> form </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML - 常用元素</title>
      <link href="/2017/11/11/html-elements/"/>
      <url>/2017/11/11/html-elements/</url>
      
        <content type="html"><![CDATA[<h2 id="h元素"><a href="#h元素" class="headerlink" title="h元素"></a>h元素</h2><p><strong>h元素(h1-h6)(heading)标题</strong></p><p>语法: <code>&lt;h1&gt;标题&lt;/h1&gt;</code></p><p>注意点:</p><ol><li><font color="tomato">常用的是h1, h2, h3</font></li><li><font color="tomato">一个网页最好只有一个h1元素,有助于网站的SEO(Search Engine Optimizatiob)优化, 促进关键词排名</font></li></ol><h2 id="p元素和pre元素"><a href="#p元素和pre元素" class="headerlink" title="p元素和pre元素"></a>p元素和pre元素</h2><p><strong>p元素(paragraph)段落</strong></p><p>语法: <code>&lt;p&gt;段落文字&lt;/p&gt;</code></p><font color="yellowgreen">一般情况下, html代码中大部分空格会被浏览器压缩, 连续的空格会压缩成一个空格</font><p><strong>pre元素也是段落, 但可以完全保留html代码中的空格, 换行</strong></p><p>语法: <code>&lt;pre&gt;带格式的段落&lt;/pre&gt;</code></p><p>pre元素常见用法一般配合 <strong>code</strong> 元素使用, 表示代码块</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">></span></span>    代码字符串(注意特殊符号需要使用字符实体)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span></code></pre><h2 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h2><p>Character Entity 用来让浏览器正确显示某些特定字符,如&lt;, &gt;等</p><p>书写格式: <code>&amp;实体名称;</code> 或者 <code>&amp;#实体编号;</code></p><p><img src="/images/CharacterEntity.png" alt="常用字符实体"></p><h2 id="img元素"><a href="#img元素" class="headerlink" title="img元素"></a>img元素</h2><p>img(image)元素专门用来显示一张图片</p><p>语法: <code>&lt;img src=&quot;图片路径(URL)&quot; alt=&quot;占位文字(图片加载失败时显示)&quot; width=&quot;像素&quot; height=&quot;像素&quot;&gt;</code></p><p>注意点:</p><ol><li><font color="tomato">HTML5规范中, alt是img的必要属性</font></li><li><font color="tomato">width和height属性可以省略, 等比缩放时只用设置其中一个</font></li><li><font color="tomato">常用图片格式: jpg(静态, 不支持透明) 、png(静态, 支持透明)、gif(支持动态和透明)</font></li></ol><h3 id="像素介绍"><a href="#像素介绍" class="headerlink" title="像素介绍"></a>像素介绍</h3><p>像素是图像显示的最小单位, <font color="tomato">默认单位是px</font></p><p>每个像素都能代表一种颜色</p><p>屏幕显示出来的图像都是由一堆像素组成的</p><p>组成图片的像素越多,显示越清晰</p><h2 id="HTML文档中的路径地址"><a href="#HTML文档中的路径地址" class="headerlink" title="HTML文档中的路径地址"></a>HTML文档中的路径地址</h2><p>路径分为 </p><p>​    a) 绝对路径, 完整的描述目标文件位置的路径</p><p>​    b) 相对路径, 目标文件与当前文件所在位置的路径关系</p><p><img src="/images/url.png" alt="相对路径和路径分隔符"></p><h2 id="a元素"><a href="#a元素" class="headerlink" title="a元素"></a>a元素</h2><p>a元素定义超链接, 用于打开新的URL</p><p>语法: <code>&lt;a href=&quot;跳转的地址(URL)&quot; target=&quot;在哪打开URL&quot;&gt;链接描述&lt;/a&gt;</code></p><h3 id="a标签属性"><a href="#a标签属性" class="headerlink" title="a标签属性"></a>a标签属性</h3><ol><li><p>href全称Hypertext Reference, 可放超链接(外部链接)、锚点链接(内部链接, #id值)</p></li><li><font color="deepskyblue">tabindex属性, tab选中的顺序, 当值为-1时, 不可被tab选中</font></li><li><p>target属性的属性值</p><p>a) _self  默认值, 可省略,在当前窗口打开</p><p>b) _blank  在新的窗口打开</p><p>c) _parent  在父辈窗口打开(用在多个窗口嵌套)</p><p>d) _top  在顶层窗口打开</p><p>e) 某个frame的name值  在某个frame元素中打开</p></li></ol><h3 id="iframe元素"><a href="#iframe元素" class="headerlink" title="iframe元素"></a>iframe元素</h3><p>作用: 页面里面的窗口, 实现在一个HTML文档中嵌入其他HTML文档</p><p>语法: <code>&lt;iframe src=&quot;目标网页地址&quot; frameborder=&quot;边框像素&quot; name=&quot;frame名字&quot;&gt;&lt;/iframe&gt;</code></p><font color="deepskyblue">frameborder属性的值: 0 –没边框; 1 –有边框</font><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>语法: <code>&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/a&gt;</code></p><h3 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h3><p>锚点(anchor)链接: 定位到页面的某一位置(如返回顶部)</p><p>页内跳转: </p><ol><li><code>给跳转位置元素设置id属性</code></li><li><code>&lt;a href=&quot;#跳转位置元素的id属性值&quot;&gt;&lt;/a&gt;</code></li></ol><p>返回顶部: <code>&lt;a href=&quot;#&quot;&gt;返回顶部&lt;/a&gt;</code></p><p>页外跳转: <code>&lt;a href=&quot;目标网页超链接#目标网页跳转位置id值&quot;&gt;&lt;/a&gt;</code></p><font color="deepskyblue">除了id属性外, a元素的name属性也可以作为锚点</font><h3 id="伪链接"><a href="#伪链接" class="headerlink" title="伪链接"></a>伪链接</h3><p>没有指明具体链接地址的链接, 点击后具体要实现什么功能, 需要编写对应的JavaScript代码, 可当做按钮使用</p><p>语法: </p><p><code>&lt;a href=&quot;#&quot; onclick=&quot;return false;&quot;&gt;伪链接1&lt;/a&gt;</code></p><p><code>&lt;a href=&quot;javascript:&quot;&gt;伪链接2&lt;/a&gt;</code></p><h3 id="base元素"><a href="#base元素" class="headerlink" title="base元素"></a>base元素</h3><p><strong>放在head元素里</strong>, 设置所有a元素的默认行为</p><p>语法: <code>&lt;base href=&quot;&quot; target=&quot;_blank&quot;&gt;</code></p><font color="deep">href属性设置所有相对链接的基准URL</font><h2 id="div元素和span元素"><a href="#div元素和span元素" class="headerlink" title="div元素和span元素"></a>div元素和span元素</h2><h3 id="div元素"><a href="#div元素" class="headerlink" title="div元素"></a>div元素</h3><p>一般作为其他元素的父元素, 代表一个整体, 用于把网页分割成多个独立的部分, 方便统一设置样式</p><p>语法: <code>&lt;div&gt;分块内容&lt;/div&gt;</code></p><h3 id="span元素"><a href="#span元素" class="headerlink" title="span元素"></a>span元素</h3><p>默认情况下和普通文本没区别, 通常用于给文本加CSS属性</p><p>语法: <code>&lt;span&gt;文本&lt;/span&gt;</code></p><h2 id="列表元素"><a href="#列表元素" class="headerlink" title="列表元素"></a>列表元素</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>语法: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p>注意点:</p><font color="tomato">ol直接子元素只能是li, 其它元素嵌套在li中</font><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>语法: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>注意点:</p><font color="tomato">ul直接子元素只能是li, 其它元素嵌套在li中</font><h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h3><p>语法:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>项目名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>项目描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre><p>注意点:</p><ol><li><font color="tomato">dl元素的直接子元素只能是dl, dt</font></li><li><font color="tomato">一个dl后跟一个或者多个dd</font></li></ol><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><strong>基本组成: table表格 tr行 td单元格</strong></p><p>语法: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p><strong>table元素常用属性</strong></p><ol><li>border 边框宽度</li><li>cellpadding 单元格内部内边距</li><li>cellspacing 单元格之间边距</li><li>width 表格宽度</li><li>align 表格水平对齐方式</li><li>valign 表格垂直对齐方式</li></ol><h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><p>语法: </p><ol><li><code>&lt;td colspan=&quot;val&quot;&gt;&lt;/td&gt;</code> 合并多少列(横向合并)</li><li><code>&lt;td rowspan=&quot;val&quot;&gt;&lt;/td&gt;</code> 合并多少行(竖向合并)</li></ol><p>注意点:</p><ol><li>将合并属性写在左上角的元素</li><li>方向是向右向下合并, 手动删除合并区域的td元素</li></ol><h3 id="完整的表格"><a href="#完整的表格" class="headerlink" title="完整的表格"></a>完整的表格</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 表头 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>descriptions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 主体 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>details<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 表尾 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>summary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><font color="tomato"><strong>注意点</strong>: caption、thead、tbody、tfoot元素的书写顺序不影响实际排版, 但建议按照顺序书写</font>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tags(elements) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML简介</title>
      <link href="/2017/11/07/html-intro/"/>
      <url>/2017/11/07/html-intro/</url>
      
        <content type="html"><![CDATA[<h2 id="网站与网页"><a href="#网站与网页" class="headerlink" title="网站与网页"></a>网站与网页</h2><p>一个网站包含N个网页, 网站与网页是1对N的关系</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p><strong>服务器本质就是一台电脑</strong></p><p>服务器的特点:</p><ol><li>配置比较高(用户量、数据访问量越大, 对服务器性能要求越高)</li><li>24小时不关机</li></ol><p>服务器的作用:</p><ol><li>存放网站</li><li>实时为客户端提供数据服务</li></ol><p>服务器死机 —– 宕机</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端指PC端、移动端、只能设备等联网设备</p><font color="tomato">在浏览一个网页时, 客户端起码向服务器发送一个请求</font><h2 id="缓存-cache-技术"><a href="#缓存-cache-技术" class="headerlink" title="缓存(cache)技术"></a>缓存(cache)技术</h2><p>缓存指第一次访问网页后在本地电脑存放的一些数据</p><p><img src="/images/cache.png" alt="缓存的使用过程"></p><p>好处:</p><ol><li>减少网络请求次数</li><li>节省用户流量</li><li>加快网页的响应速度</li><li>提升用户体验</li></ol><p>坏处:</p><ol><li>占用本地电脑内存空间</li><li>服务器更改数据后，客户端可能没有得到及时响应</li></ol><p>解决缓存问题 —– 清除缓存</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>URL全称 uniform resource locator  统一资源定位符</p><p>ERL就是资源的地址, 位置, 互联网上每个资源都有一个唯一的URL</p><p>即<strong>通过一个URL能找到全球唯一一个资源</strong></p><p>URL的基本格式: <code>protocol://hostname/path</code> 协议  :// 主机地址 / 路径</p><p>常见协议:</p><ol><li><strong>http</strong> 超文本传输协议 <strong>https</strong>是http协议的安全版　格式：https://</li><li><strong>file</strong> 访问本地主机的资源, 不用加主机地址　格式：file://</li><li><strong>mailto</strong> 访问电子邮件地址　格式：mailto://</li><li><strong>ftp</strong> 访问共享主机的资源　格式：ftp://</li><li><strong>ed2k</strong></li><li><strong>thunder</strong></li></ol><h2 id="网页的组成"><a href="#网页的组成" class="headerlink" title="网页的组成"></a>网页的组成</h2><ol><li>HTML  —  内容结构 (文字、图片、表格)</li><li>CSS  —  视觉体验 (视觉效果、美观)</li><li>JavaScript  —  交互处理 (动态显示)</li></ol><h2 id="HTML标签元素的书写格式"><a href="#HTML标签元素的书写格式" class="headerlink" title="HTML标签元素的书写格式"></a>HTML标签元素的书写格式</h2><ol><li><p>非替换元素(有实际内容的, 双标签), 如 html、head、title、body等</p><p>格式:  <code>&lt;起始标签&gt;&lt;/结束标签&gt;</code> 如 <code>&lt;title&gt;网页标题&lt;/title&gt;</code></p></li><li><p>替换元素(没实际内容的, 单标签), 如 a、img、input</p><p>格式: <code>&lt;标签名&gt;</code> 如 <code>&lt;br&gt;</code> 转行标签</p><font color="tomato">标签不区分大小写, 建议使用小写</font></li></ol><h2 id="元素的嵌套"><a href="#元素的嵌套" class="headerlink" title="元素的嵌套"></a>元素的嵌套</h2><p>意义: 将多个功能相似的的元素包装成一个整体来使用，方便对它们进行归类、统一操作</p><p><img src="/images/nestification.png" alt="元素嵌套语法示例"></p><h2 id="元素的属性"><a href="#元素的属性" class="headerlink" title="元素的属性"></a>元素的属性</h2><p>作用: 属性可以增强元素的功能</p><p>语法: <code>&lt;起始标签 属性名=&quot;属性值&quot;&gt;</code></p><font color="deep">属性名都是小写，属性是无序的</font><h2 id="HTML文档的注释"><a href="#HTML文档的注释" class="headerlink" title="HTML文档的注释"></a>HTML文档的注释</h2><p>作用: 一般用来解释某段代码的具体含义、作用</p><p>意义: </p><ol><li>只给开发者看，方便回忆，检查旧代码，方便团队协作</li><li><font color="tomato">可将暂时不需要(或出错)的代码注释掉</font></li></ol><p>html中的注释语法: <code>&lt;!-- 注释 --&gt;</code></p><h2 id="网页基本结构"><a href="#网页基本结构" class="headerlink" title="网页基本结构"></a>网页基本结构</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>网页标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图标URL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">CSS样式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>javascript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>HTML标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h3><p>作用: 告诉浏览器当前页面是HTML5页面，让浏览器用HTML5的标准去解析识别HTML文档</p><p>语法: <code>&lt;!DOCTYPE html&gt;</code></p><font color="deepskyblue">放在最前面，不能省略，省略了会出现兼容问题</font><h3 id="html元素"><a href="#html元素" class="headerlink" title="html元素"></a>html元素</h3><p>html元素是HTML文档的根元素，其他所有元素都是html元素的子元素，W3C标准建议html有一个lang属性</p><p>语法: <code>&lt;html lang=&quot;zh&quot;&gt;&lt;/html&gt;</code></p><h3 id="head元素"><a href="#head元素" class="headerlink" title="head元素"></a>head元素</h3><p>head元素里面的内容是HTML文档的一般信息(元数据)</p><p>语法: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">chatset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>网页标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p>head元素中常见的子元素: </p><ol><li><p>title(必须), 语法: <code>&lt;title&gt;网页标题&lt;/title&gt;</code></p></li><li><p>meta, 辅助性标签, 提供网页的原信息(针对搜索引擎和更新频度的描述和关键词、定义页面使用的语言), <font color="tomato">放在head元素的最前面</font></p><p>a) <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code> 设置网页的字符编码</p><p>​        常见字符编码: </p><p>​             <strong>UTF-8</strong> 万国码 包含多国文字</p><p>​             <strong>GBK/GB2312</strong> 汉字/数字/英文字母</p><p>​             <strong>ISO-8859-1</strong> 只包含数字和英文字母</p><p>b) <code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</code></p><p>​    告诉IE浏览器以最新的解析器 , 去解析当前的页面</p><p>​    快捷键:  <strong>meta:compat</strong></p><p>c) <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</code></p><p>​    客户端屏幕尺寸适配</p><p>​    快捷键:  <strong>meta:vp</strong></p></li><li><p>link, 引入外部资源, 常用于引CSS样式表</p><p>a) <code>&lt;link rel=&quot;icon&quot; href=&quot;图标URL&quot;&gt;</code> 引入网站图标</p><p>b) <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;外联样式表URL&quot;&gt;</code> 引入外联样式表</p></li><li><p>style, 创建一个书写文档样式表的环境, 语法: <code>&lt;style&gt;书写CSS样式&lt;/style&gt;</code></p></li><li><p>script, 定义(创建JS环境/引入外联JS)客户端脚本</p></li><li><p>base, 定义HTML文档内部a标签的默认行为</p></li><li><p>noscript, 在不支持JS的浏览器中显示替换的内容</p></li></ol><h3 id="body元素"><a href="#body元素" class="headerlink" title="body元素"></a>body元素</h3><p>body元素里面的内容是网页的具体内容和结构</p><p>语法: <code>&lt;body&gt;网页内容&lt;/body&gt;</code></p><h2 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h2><ol><li>按显示类型分: 块级元素, 行内级元素</li><li>按内容类型分: 替换元素, 非替换元素</li></ol><p><img src="/images/element.png" alt="元素分类"></p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li><p>块级元素理论上可以嵌套其他任何元素, <font color="tomato">特殊: <strong>p元素不能包括其他块级元素</strong></font></p></li><li><p>行内级元素一般只能包含行内级元素</p></li><li><p>行内级替换元素 </p><p>a) <font color="deepskyblue">width、height、margin-top、margin-bottom</font> 等属性不起作用</p><p>b) <font color="deepskyblue">padding-top、padding-bottom、border-top、border-bottom</font> 等属性不占实际位置</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML introduce </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
