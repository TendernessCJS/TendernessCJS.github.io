<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue + Webpack</title>
      <link href="/2018/06/14/vue/"/>
      <url>/2018/06/14/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h2><p>Vue是一款用于<font color="yellowgreen">动态构建用户界面</font>的<font color="yellowgreen">渐进式</font>JavaScript框架, 核心功能是基于 <font color="tomato"><strong>MVVM</strong></font> 架构模式的视图模板引擎</p><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p><strong>MVC</strong> ( Model-View-Controller )和 <strong>MVVM</strong> (Model-View-ViewModel) 都是前端开发的<font color="yellowgreen">架构模式</font>, <strong>MVVM</strong> 的本质是 <strong>MVC</strong> 的<font color="tomato"><strong>改进版</strong></font></p><h4 id="MVVM的出现"><a href="#MVVM的出现" class="headerlink" title="MVVM的出现"></a>MVVM的出现</h4><p>在HTML5兴起前, 标准的Web应用程式由三部分组成:</p><ol><li>View: 把数据以某种方式呈现给用户</li><li>Model: 数据模型, 就是从后台接收到的数据</li><li>Controller: 接收并处理用户的请求, 返回对应的 Model 给用户</li></ol><p>当时Web应用的 View 层相对比较简单, 前端所需要的数据基本在后端可以处理好 ( 这也是一些 <strong>老项目前后端不分离</strong> 的原因 ), View 层主要负责数据展示, 而复杂的业务逻辑由 Controller 来处理, MVC架构模式是当时Web应用的最佳实践</p><p>随着H5的兴起, H5为移动设备提供了一些非常有用的功能( API ), 使得H5具备开发App的能力, 实现<font color="yellowgreen">跨平台, 快速迭代和上线, 节省人力成本并提高开发效率</font>, 但同时也使得 View 层不再是简单的数据展示, 还得管理复杂的数据状态以及处理移动设备的各种操作行为, MVC发展成:</p><ol><li>View: 展示数据, 整体UI布局</li><li>Model: 接收并管理数据</li><li>Controller: 响应用户操作, 并将 Model 更新到 View 上</li></ol><p>这种 MVC 架构模式对于简单的应用是OK的, 也符合软件架构的分层思想, 但随着H5的发展, 前端应用的复杂程度越发复杂, <strong>前后端逐渐分离</strong>, 而前端开发暴露出三个痛心的问题:</p><ol><li>开发者在代码中大量调用相同的 DOM API, 处理繁琐, 操作冗余, 代码难以维护</li><li>大量的DOM操作是的页面渲染性能降低, 加载速度变慢, 影响用户体验</li><li>当 Model 频繁变动, 开发者需要主动更新到 View; 同样, 当用户操作导致数据发生变化, 开发者需要主动将更新后的数据同步到 Model 中, 工作繁琐且难以维护复杂多变的数据状态</li></ol><p>此时, 早期提倡的 “Write less, do more”的 jQuery 就是为了简化DOM操作而设计的, 但这仅仅解决了第一个问题, 前端开发依旧繁琐而艰难</p><font color="tomato"><strong>MVVM 的出现, 完美解决了以上三个问题</strong></font><p>MVVM 由 Model, View, ViewModel 组成:</p><ol><li>Model: 数据模型, 定义修改数据和处理业务逻辑</li><li>View: 视图(UI组件), 负责将数据模型转化成UI展现给用户</li><li><strong>ViewModel</strong> 是一个同步 View 和 Model 的对象(核心), 通过双向数据绑定把 View 和 Model 连接起来, 且 View 和 Model 的同步工作是完全自动的, 无需人为干涉, 因此开发者只需关注业务逻辑, 不再需要主动操作DOM, 也无需担心数据状态的同步问题, 所有繁琐艰难的操作全交给 ViewModel 实现</li></ol><p><img src="/images/MVVM.jpg" alt="MVVM架构模式"></p><font color="tomato"><strong>ViewModel</strong> 是 Vue.js 的核心, 是Vue的一个实例</font><p><strong>DOM Listeners</strong> (DOM监听器) 和 <strong>Data Bindings</strong> (数据绑定) 是 <strong>View Model</strong> 实现双向绑定的关键:</p><ol><li><strong>DOM Listeners</strong> 会监测页面上 <strong>DOM</strong> 元素的变化, 更新 <strong>Model</strong> 中的数据 </li><li>当 <strong>Model</strong> 中数据更新时, <strong>Data Bindings</strong> 会刷新页面中的 <strong>DOM</strong> 元素</li></ol><h4 id="ViewModel核心实现"><a href="#ViewModel核心实现" class="headerlink" title="ViewModel核心实现"></a>ViewModel核心实现</h4><p>在MVVM架构模式下, <font color="yellowgreen">View</font> 和 <font color="yellowgreen">Model</font> 之间没有 <strong>直接的联系</strong>, 而是通过 <font color="yellowgreen">ViewModel</font> ( 简称: <font color="yellowgreen">VM</font> ) 进行交互, 而 <font color="yellowgreen">VM</font> 可以通过 <font color="deepskyblue"><strong>观察者模式</strong></font> 或者 <font color="deepskyblue"><strong>订阅发布模式</strong></font> 2种模式实现</p><p>在 <font color="tomato"><strong>Vue.js</strong></font> 中 <font color="yellowgreen"><strong>vm实例</strong></font> 的核心是 <strong>对象劫持</strong>, 采用 <code>Object.defineProperty</code> 的 <code>getter</code> 和 <code>setter</code>, 结合 <font color="deepskyblue"><strong>观察者模式</strong></font> 实现 <font color="deep">对象劫持 ( defineProperty )</font> 和 <font color="deep">模板编译 ( complier )</font> 的响应</p><p><img src="/images/Vue.jpg" alt="Vue核心"></p><ol><li><strong>Observer</strong> 数据监听器( 观察者 ), 内部通过 <code>Object.defineProperty</code>的<code>getter</code>和<code>setter</code>实现, 对劫持对象的所有属性进行监听, 如有变动获取最新值并通知订阅者( <strong>Watcher</strong> )</li><li><strong>Compile</strong> 指令解析器, 对每个DOM元素节点的指令进行扫描和解析, 根据指令模板替换数据, 并绑定响应的更新( 回调 )函数</li><li><strong>Watcher</strong> 订阅者, 连接 <strong>Observer</strong> 和 <strong>Compile</strong>, 订阅并接收每个属性的变动通知, 执行对应的更新( 回调 )函数</li><li><strong>Dep</strong> 消息订阅器( 公众号 ), 内部维护一个数组, 收集所有订阅者( <strong>Watcher</strong> ), 数据变动执行<code>Dep.notify()</code>函数, 再调用订阅者的<code>Watcher.update()</code>方法</li></ol><font color="yellowgreen"><strong>Vue 工作流程</strong></font><p>当执行<code>new Vue()</code>时, VM实例进入初始化阶段, 一方面遍历实例<code>data</code>配置项中的属性并劫持, 监听劫持属性; 另一方面, Compile 编译器对元素节点的指令进行扫描和解析, 初始化视图, 并订阅 Watcher 来更新视图, Watcher 将自己添加到 Dep 管理的数组中, 初始化完毕</p><font color="deepskyblue">当数据发生变化时, <code>Ovserver</code> 的 <code>setter</code> 方法被触发, <code>setter</code> 会立即调用<code>Dep.notify()</code>, <code>Dep</code>开始遍历所有订阅者(<code>Watcher</code>), 并调用<code>Watcher.update()</code>, 订阅者接收到哦通知后对视图进行响应的更新</font><h3 id="了解Vue的渐进式"><a href="#了解Vue的渐进式" class="headerlink" title="了解Vue的渐进式"></a>了解Vue的渐进式</h3><p>符合MVVM架构模式的前端三大框架: <strong>Angular</strong>、<strong>React</strong>、<strong>Vue</strong></p><p>其中 <strong>Vue</strong> 是国内中小型项目首选的框架, Vue 的实现:</p><ol><li>借鉴了 <strong>Angular</strong> 的<font color="yellowgreen">模板</font>和<font color="yellowgreen">数据绑定</font>技术</li><li>借鉴了 <strong>React</strong> 的<font color="yellowgreen">组件化</font>和<font color="yellowgreen">虚拟DOM</font>技术</li></ol><p><strong>Vue</strong> 是一款渐进式框架, 即本身有一个<font color="deepskyblue">轻量级的核心库</font>( <font color="yellowgreen">Vue.js Core</font> ), <font color="deepskyblue">核心库只关注视图层</font>( <font color="yellowgreen">View</font> ), 开发者在构建界面时可根据需要添加插件( <font color="yellowgreen">Vue 全家桶</font>)或者第三方库进行拓展, 而且 <font color="yellowgreen">Vue 全家桶</font>是互相独立的功能, 在<font color="deepskyblue">核心库</font>的基础上可任意选用, 不一定要全部整合在一起</p><p><img src="/images/vuejianjinshi.png" alt="Vue的渐进式"></p><h2 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h2><h3 id="Vue-和-jQuery-对比"><a href="#Vue-和-jQuery-对比" class="headerlink" title="Vue 和 jQuery 对比"></a>Vue 和 jQuery 对比</h3><h4 id="使用对比1"><a href="#使用对比1" class="headerlink" title="使用对比1"></a>使用对比1</h4><p>需求: 数据回显, 将后台返回的数据( 伪数据 )渲染到页面上</p><p>jQuery</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>姓名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>年龄: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>班级: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>className<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'Tenderness'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        className<span class="token punctuation">:</span> <span class="token string">'electronic commerce'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#age'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#className'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>Vue</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    姓名: {{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    年龄: {{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    班级: {{className}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'Tenderness'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        className<span class="token punctuation">:</span> <span class="token string">'electronic commerce'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#box'</span><span class="token punctuation">,</span>        data    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="使用对比2"><a href="#使用对比2" class="headerlink" title="使用对比2"></a>使用对比2</h4><p>需求: 数据绑定, 将用户输入信息直接回显到页面上</p><p>jQuery ( <font color="tomato">在以下demo中, jQuery只能做到储存数据和回显数据, 并未实现数据绑定</font> )</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>你输入的是: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        data<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> user <span class="token operator">=</span> data<span class="token punctuation">.</span>msg        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>Vue</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    你输入的是: {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#box'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="对比结论"><a href="#对比结论" class="headerlink" title="对比结论"></a>对比结论</h4><p>通过以上两简单的使用对比可以发现, 使用 <strong>Vue</strong> 能大量减少 <strong>DOM操作</strong> 并实现 <strong>数据双向绑定</strong></p><h3 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h3><p>语法: <code>var vm = new Vue({ /*选项*/ })</code></p><p>在创建Vue实例时, 可以传入一个 <strong>配置对象</strong>, 以下列表是配置对象可选的 <strong>配置项</strong></p><h4 id="数据相关配置项"><a href="#数据相关配置项" class="headerlink" title="数据相关配置项"></a>数据相关配置项</h4><table><thead><tr><th>配置项</th><th>接收类型</th><th>描述</th></tr></thead><tbody><tr><td><font color="yellowgreen">data</font></td><td>Object/Function</td><td>Vue实例的数据对象</td></tr><tr><td><font color="yellowgreen">props</font></td><td>Array/Object</td><td>接收来自父组件的数据</td></tr><tr><td><font color="yellowgreen">computed</font></td><td>{[key: String]: Function}</td><td>储存计算属性的对象</td></tr><tr><td><font color="yellowgreen">methods</font></td><td>{[key: String]: Function}</td><td>储存实例方法的对象</td></tr><tr><td><font color="yellowgreen">watch</font></td><td>{[key: String]: Function/Object}</td><td>储存监测函数的对象</td></tr></tbody></table><p>注意点:</p><ol><li><p>在定义 <strong>组件</strong> 时, <font color="yellowgreen">data</font> 只能接收<code>Function</code>, 该函数返回真正的数据对象, 原因是<font color="deepskyblue">引用数据共享问题</font></p></li><li><p><a href="#props"><font color="tomato">对于 <font color="yellowgreen">props</font> 的描述, 放在 <strong>Vue组件</strong> 部分</font></a></p></li><li><p><font color="yellowgreen">computed</font> 对象中的方法需要有<font color="deepskyblue">返回值</font>, 该返回值就是计算属性值</p></li><li><p><font color="yellowgreen">watch</font> 对象中的<code>key</code>键在 <font color="yellowgreen">data</font> 中必须有对应的<code>key</code>键一一对应, 绑定的监测函数接收2参数, 第一个参数是监测属性的当前值(变化后的值), 第二个参数表示监测属性旧值(变化前的值)</p></li><li><p><font color="yellowgreen">methods</font>、<font color="yellowgreen">computed</font>、<font color="yellowgreen">watch</font> 三者的区别:</p><p>a) <font color="yellowgreen">methods</font> 中的方法是经常 <strong>被实例主动调用</strong> 的方法</p><p>b) <font color="yellowgreen">computed</font> 中的方法在 <strong>实例初始化</strong> 时会 <strong>立即执行</strong>, 得到返回值(计算属性), 并<font color="deepskyblue">混入到实例中</font>并 <font color="deepskyblue"><strong>缓存</strong></font> 起来, 当依赖的 <strong>响应式属性</strong> 发生变化, 会 <strong>自动执行</strong> 对应方法, 并把最新计算属性值缓存(更新)</p><p>c) <font color="yellowgreen">watch</font> 中的方法在 <strong>实例初始化</strong> 后会 <strong>自动监测</strong> <font color="yellowgreen">data</font> 中的数据变化, 当监听的数据发生变化 <strong>自动执行</strong> 对应监测函数, 实现相关业务逻辑( 如数据存储等 )</p></li><li><font color="yellowgreen">methods</font>、<font color="yellowgreen">computed</font>、<font color="yellowgreen">watch</font> 对象中的方法不建议使用 <strong>箭头函数</strong>, 原因是<code>this</code>指向发生变化, 不再指向<font color="deepskyblue">Vue实例</font></li><li><p><font color="yellowgreen">computed</font> 中的对象用法( 即<code>getter</code>和<code>setter</code>)</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 首先, 计算属性默认只有getter, 不过可以通过对象的写法为计算属性提供一个setter</span><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        firstName<span class="token punctuation">:</span> <span class="token string">'Tenderness'</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span> <span class="token string">'Chen'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>        fullName<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token keyword">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 当计算属性fullName放生改变时, vm.firstName和vm.lastName也会响应更新</span>                <span class="token keyword">let</span> newName <span class="token operator">=</span> newVal<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> newName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> newName<span class="token punctuation">[</span>newName<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p><font color="yellowgreen">watch</font> 中的键值对(<code>k:v</code>), 值为对象的使用方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token string">'基本数据类型'</span><span class="token punctuation">,</span>        b<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'对象1'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'对象2'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'对象3'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">handler</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'val: '</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'old: '</span><span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            immediate<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 绑定监测函数后, 立即执行一次</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        b<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">handler</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 引用类型数据的性质(都是指针), val和oldVal是一样的值</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'val: '</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'old: '</span><span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            deep<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 深度(递归)监测, 当数组b中对象内属性发生变化时会执行监测函数</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ol><h4 id="DOM相关配置项"><a href="#DOM相关配置项" class="headerlink" title="DOM相关配置项"></a>DOM相关配置项</h4><table><thead><tr><th>配置项</th><th>接收类型</th><th>描述</th></tr></thead><tbody><tr><td><font color="yellowgreen">el</font></td><td>String/Element</td><td>提供 <font color="tomato"><strong>一个</strong></font> 页面中已存在的DOM元素作为 Vue 实例的挂载目标</td></tr><tr><td><font color="yellowgreen">template</font></td><td>String</td><td>提供一个字符串模板作为 Vue 实例的标识使用</td></tr><tr><td><font color="yellowgreen">render</font></td><td>Function</td><td>使用<code>render</code>函数创建虚拟DOM</td></tr></tbody></table><p>注意点</p><ol><li><p><font color="yellowgreen"><strong>el</strong></font> 相关:</p><p>a) <font color="yellowgreen">el</font> 只在由<code>new</code>关键字创建的实例中遵守, 建议使用 <font color="tomato"><strong>id选择器</strong></font> 与实例一一对应</p><p>b) 提供的元素只作为 <strong>挂载点</strong>, <font color="yellowgreen">所有的挂载元素会被 Vue 生成的 DOM 替换</font>, 因此 <font color="tomato"><strong>禁止</strong></font> 将实例挂载到<code>&lt;html&gt;</code>或者<code>&lt;body&gt;</code>中</p><p>c) 当 <font color="yellowgreen">template</font> 和 <font color="yellowgreen">render</font> 都不存在,  提供的挂在元素会被提取出来作为模板, 此时需要使用 <font color="deepskyblue"><strong>Runtime + Compiler</strong></font> (运行时 + 编译器) 构建的 Vue 库</p><p>d) 当 <strong>实例挂载</strong> 完成, <strong>根元素</strong> 可以通过<code>vm.$el</code>访问</p><p>e) 如果有 <font color="yellowgreen">el</font> 配置项, 实例会立即进入编译过程, 否则需要调用<code>vm.$mount()</code>手动开启编译</p></li><li><p><font color="yellowgreen"><strong>template</strong></font>相关</p><p>a) 模板会 <strong>替换</strong> 挂载元素, 挂载元素的内容将被忽略, 除非模板内容有分发 <strong>插槽</strong></p><p>b) 模板内容需要有一个 <strong>根元素</strong> 包裹着</p><p>c) <font color="yellowgreen">建议模板和 JavaScript 代码分离</font>, 常用技巧:</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 方式1 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/x-template<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myTemp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 模板内容 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 方式2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myTemp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 模板内容 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 注意: 移上2中方法中, script 和 template 标签都只做环境, 不会在页面上渲染, 模板内容需要有一层根元素包裹 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#myTemp`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>d) 如果 <font color="yellowgreen">render</font> 函数存在, <font color="yellowgreen">template</font> 配置项将被忽略</p><p>e) 如果 <font color="yellowgreen">render</font> 函数不存在, 需要使用 <font color="deepskyblue"><strong>Runtime + Compiler</strong></font> (运行时 + 编译器) 构建的 Vue 库</p></li><li><p><font color="yellowgreen"><strong>render</strong></font> 相关</p><p>a) 设置了 <font color="yellowgreen">render</font> 函数, Vue实例就不会从配置项 <font color="yellowgreen">template</font> 或者 <font color="yellowgreen">el</font> 提取的 <code>innerHTML</code> 作为模板编译渲染函数</p><p>b) <a href="#render"><font color="tomato">对于 <font color="yellowgreen">render</font> 函数的更多描述, 放在 <strong>Vue+Webpack</strong> 部分</font></a>.</p></li></ol><h4 id="其他配置项"><a href="#其他配置项" class="headerlink" title="其他配置项"></a>其他配置项</h4><p>在创建Vue实例时, 还可以接受更多配置项, 如 <strong>生命周期钩子</strong>、<strong>自定义指令</strong>、<strong>组件</strong>、<strong>混入</strong> 等, 对于这些配置项的描述, 将在对应部分描述</p><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据, 实现动态 html 页面, 主要包含2类: a) <code>Mustache</code>语法(双大括号), 放在元素的<font color="yellowgreen">文本内容</font>中 b) 指令, 以<code>v-</code>开头放置在元素<font color="yellowgreen">标签属性</font>上</p><h4 id="Mustache语法"><a href="#Mustache语法" class="headerlink" title="Mustache语法"></a>Mustache语法</h4><p>往元素文本内容中 <strong>插值</strong> </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>姓名: {{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>年龄: {{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 支持简单的JS表达式, 但不支持语句 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>性别: {{age?'男':'女'}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 显示结果:            姓名: Tenderness            年龄: 18            性别: 男    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'Tenderness'</span><span class="token punctuation">,</span>            sex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">18</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><ol><li><p><code>v-html</code>和<code>v-text</code>, 与<code>innerHTML</code>和<code>innerText</code>用法类似</p><p>注意点:</p><p>a) 在网络较差环境下, 使用<code>v-text</code>代替<code>Mustache</code>语法能避免未编译的双大括号表达式直接渲染在页面上的问题, 但<font color="tomato">不推荐</font>, 建议使用<code>v-cloak</code>解决</p><p>b) <font color="deep">谨慎使用</font><code>v-html</code>, 原因和<code>innerHTML</code>一样, 容易导致 <font color="tomato">XSS 攻击</font></p><p>c) <code>v-html</code>内部结构内容不会作为 Vue 模板进行编译, 因此在<font color="yellowgreen">单文件组件</font>( 即 <font color="deepskyblue"><strong>.vue</strong></font> 文件)中, <code>scoped</code>的样式不会应用在<code>v-html</code>内部</p></li><li><p><code>v-cloak</code>这个指令保持在元素上直到关联实例结束编译</p><p>注意点:</p><p>a) 不需要表达式, 相当于元素的一个属性</p><p>b) 配合CSS使用可以隐藏未编译的<code>Mustache</code>标签</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>v-cloak演示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token attribute">[v-cloak]</span> </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">v-cloak</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>姓名: {{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'Tenderness'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>v-show</code>控制元素的显示隐藏</p><p>注意点:</p><p>a) <code>v-show=&quot;true&quot;</code> 显示( 使用元素默认的<code>display</code>样式 ), <code>v-show=&quot;false&quot;</code>隐藏(<code>display: none</code>)</p></li><li><p><code>v-once</code>只渲染元素或组件<strong>一次</strong></p><p>注意点:</p><p>a) Vue实例挂载时, 渲染一次, 然后该元素或组件将被视为静态内容, 即响应性数据发生变化时该元素不会发生变化</p></li><li><p><code>v-for</code>列表渲染, 基于源数据多次渲染元素或模板块</p><p>用法:</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 遍历数组数据进行渲染 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in array<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 遍历对象数据进行渲染 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(val, key, index) in object<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 接收整数多次渲染 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n in number<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>注意点: </p><p>a) 在组件中使用<code>v-for</code>, 必须加上<code>key</code></p><p>b) 在同一元素中<code>v-for</code>和<code>v-if</code><strong>不建议</strong>一起使用</p></li><li><p><code>v-if</code>条件渲染系列</p><p>用法: </p><p>a) <code>v-if</code>根据表达式的布尔值判断是否渲染该元素</p><p>b) <code>v-else</code>和<code>v-else-if</code>配合<code>v-if</code>使用, 规则与<code>if-else</code>语句一样</p><p>注意点:</p><p>a) Vue会尽可能高效地渲染元素, 对已有元素会进行复用而不是重新渲染, 如果想让复用的元素重新渲染( 如用户切换登录方式时, <code>input</code>输入框重新渲染清空已输入值 ), 可以为复用元素加上<code>key</code>, 让元素重新渲染</p><p>b) <code>v-if</code>与<code>v-show</code>, <code>v-if</code>是 <strong>条件渲染</strong>, <code>v-show</code>只是简单的 <strong>控制CSS样式</strong> (元素已经被渲染); 两者相比, <code>v-if</code>有更高的切换开销, 而<code>v-show</code>有更高的初始渲染开销; 因此, 如果需要频繁切换使用<code>v-show</code>否则使用<code>v-if</code></p><p>c) <code>v-if</code>与<code>v-for</code>一起使用, 统一元素中<code>v-for</code>优先级比<code>v-if</code>高, 即每次循环都会进行<code>v-if</code>判断</p></li><li><p><code>v-bind</code>动态绑定特性或者组件<code>prop</code>到表达式</p><p>语法糖: <code>:</code></p><p>用法:</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 绑定属性, Vue实例中data的imageSrc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定属性, 简单表达式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>/basePath/images/<span class="token punctuation">'</span>+imageSrc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定class, 表达式为对象 --></span><span class="token comment" spellcheck="true">&lt;!-- 根据isActive布尔值判断是否加类名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{active: isActive}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定class, 表达式为数组 --></span><span class="token comment" spellcheck="true">&lt;!-- 一次性添加多个类名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[active, otherClass]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 结合三目条件判断 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[isActive ? active : <span class="token punctuation">'</span><span class="token punctuation">'</span>, otherClass]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 结合对象条件判断 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[{active: isActive}, otherClass]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定style, 表达式为对象 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> widthSize + <span class="token string">'px'</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定style, 表达式为数组 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">[styleObjectA, styleObjectB]</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定prop, "propName"需在my-comp组件中声明 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span> <span class="token attr-name">:propName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定$prop, 将父组件的props传给子组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-comp</span> <span class="token attr-name">:propName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$props<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-comp</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>v-on</code>绑定DOM事件</p><p>语法糖:<code>@</code></p><p><strong>常见用法:</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 绑定单击事件, doSomething为methods中方法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 事件对象, $event --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定单次点击事件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.once</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 事件修饰符, 阻止默认行为 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prevent($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 事件修饰符, 阻止默认行为, 没有表达式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">@submit.prevent</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 事件修饰符, 阻止冒泡 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stop($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 键修饰符, enter/键代码(keyCode) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@keydown.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onEnter($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Vue封装的键修饰符        .enter        .tab        .delete (捕获delete键和backspace键)        .esc        .space        .up        .down        .left        .right--></span><span class="token comment" spellcheck="true">&lt;!-- 系统修饰符        .ctrl        .alt        .shift        .meta(Mac系统的Command键, Windows系统的WIN键)--></span><span class="token comment" spellcheck="true">&lt;!-- 鼠标修饰符        .left        .right        .middle--></span><span class="token comment" spellcheck="true">&lt;!-- .exact修饰符        允许你控制由精确的系统修饰符组合触发的事件--></span></code></pre><p><strong>组件中的用法:</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 自定义事件, 不传参数时不能加() --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span> <span class="token attr-name">@myEvent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleEvent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 给组件根元素绑定事件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span> <span class="token attr-name">@click.native</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span></code></pre><p><strong>其他用法(事件捕获, 移动端优化等):</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 添加事件监听器时使用事件捕获模式 --></span><span class="token comment" spellcheck="true">&lt;!-- 即元素自身触发的事件先在此处理，然后才交由内部元素进行处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.capture</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --></span><span class="token comment" spellcheck="true">&lt;!-- 即事件不是从内部元素触发的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.self</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --></span><span class="token comment" spellcheck="true">&lt;!-- 而不会等待 `onScroll` 完成  --></span><span class="token comment" spellcheck="true">&lt;!-- 一般用于提升移动端性能 --></span><span class="token comment" spellcheck="true">&lt;!-- 不要和 .prevent 一起使用, 因为 .passive 会忽略 .prevent --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>scroll.passive</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onScroll<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>v-model</code>表单元素双向数据绑定</p><p>对于不同元素的表现:</p><p>a) <strong>text</strong>类型 和 <strong>textarea</strong>元素 使用 <code>value</code> 属性和 <code>input</code> 事件</p><p>b) <strong>checkbox</strong>类型 和 <strong>radio</strong>类型 使用 <code>checked</code> 属性和 <code>change</code> 事件</p><p>c) <strong>select</strong> 元素将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件</p><p>注意点:</p><p>a) 绑定了<code>v-model</code>的表单元素将忽视<code>value</code>、<code>checked</code>、<code>selected</code>初始值并始终与Vue实例的数据双向数据绑定</p><p>b) 对于文本输出框, 可通过<code>.lazy</code>修饰符把<code>input</code>事件转为<code>change</code>事件进行数据同步</p><p>c) 文本输入框<code>.trim</code>修饰符会自动删除用户输入的<code>value</code>字符串的首尾空白字符</p><p>d) 文本输入框<code>.number</code>修饰符会尝试将用户输入的<code>value</code>字符串通过<code>parseFloat()</code>方法转成数字, <font color="deepskyblue">如果无法转换, 返回原始值</font></p></li></ol><h3 id="数组和对象的更新监测-响应性修改"><a href="#数组和对象的更新监测-响应性修改" class="headerlink" title="数组和对象的更新监测(响应性修改)"></a>数组和对象的更新监测(响应性修改)</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>由于 JavaScript 的限制, Vue 不能监测以下数组的变动:</p><ol><li>利用索引值修改数组元素, <code>vm.array[index] = newValue</code></li><li>改变数组长度, <code>vm.array.length = newLength</code></li></ol><p>但支持监测数组的一些变异方法( mutation method )以及非变异方法( 返回新数组, 替换数组 )</p><p><strong>变异方法</strong></p><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul><p><strong>替换数组( 非变异方法 )</strong></p><ul><li><code>filter()</code></li><li><code>map()</code></li><li><code>concat()</code></li><li><code>slice()</code></li></ul><p><strong>Vue自带方法修改数组</strong></p><ul><li><code>Vue.set(vm.items, index, newValue)</code></li><li><code>vm.$set(vm.items, index, newValue)</code></li></ul><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>还是由于 JavaScript 的限制，<strong>Vue 不能检测对象属性的添加或删除</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*在控制台中输入    vm.a = 2    视图会响应, a是响应属性    vm.b = 1    视图不会响应, b不是响应属性*/</span></code></pre><p><strong>Vue提供2种方法修改对象</strong></p><ul><li><code>Vue.set(object, key, newValue)</code></li><li><code>vm.$set(object, key, newValue)</code></li></ul><p><font color="tomato">注意: 当Vue实例创建后, 不允许动态添加根级响应属性</font>, 即</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>b<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会报错, 不允许添加根级响应属性</span></code></pre><p><strong>如需给已有响应对象添加多个属性:</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    person<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Tenderness'</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'H5'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这样vm.person的引用不会变, 即对原对象 person 添加属性, 不会响应</span><span class="token comment" spellcheck="true">// 应该这样做</span>vm<span class="token punctuation">.</span>person <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'H5'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Vue自带的delete方法"><a href="#Vue自带的delete方法" class="headerlink" title="Vue自带的delete方法"></a>Vue自带的delete方法</h4><p></p><p>Vue提供了<code>delete</code>方法, 通过该方法删除响应式的数组或对象中的成员可以更新视图, 但是开发者应该 <font color="deep"><strong>尽量少用该方法</strong></font>, 使用方法如下:</p> <p></p><ul><li><code>Vue.delete(array, index)</code>和<code>vm.$delete(array, index)</code>, 删除数组元素</li><li><code>Vue.delete(object, key)</code>和<code>vm.$delete(object, key)</code>, 删除对象成员</li></ul><h2 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h2><h3 id="模块化与组件化"><a href="#模块化与组件化" class="headerlink" title="模块化与组件化"></a>模块化与组件化</h3><p>首先模块化和组件化开发都为了代码复用, 方便维护</p><ol><li>模块化是从 <font color="yellowgreen"><strong>代码逻辑</strong></font> 层面上划分( 一般就是 JS 代码的封装 )</li><li>组件化是从整个 <font color="yellowgreen"><strong>UI页面布局</strong></font> 层面上划分( 包含HTML, CSS, JavaScript )</li></ol><h3 id="组件化历史"><a href="#组件化历史" class="headerlink" title="组件化历史"></a>组件化历史</h3><ol><li>前期的 <font color="yellowgreen"><strong>UI组件库</strong></font> ( JS组件库 ), 通过JS代码控制HTML+CSS+JavaScript, JS负责做的事情太多( 即大量JS代码 ), 不好维护</li><li><font color="yellowgreen"><strong>组件化开发</strong></font>, 单文件组件( template 模板编译 + CSS + JavaScript ), 在Vue中即 <font color="tomato"><strong>.vue</strong></font> 文件</li></ol><h3 id="Vue组件注册和使用"><a href="#Vue组件注册和使用" class="headerlink" title="Vue组件注册和使用"></a>Vue组件注册和使用</h3><p><font color="yellowgreen">Vue组件的本质也是 Vue 的一个实例</font>, 创建时可以设置所有 Vue 实例的配置项</p><h4 id="全局组件注册"><a href="#全局组件注册" class="headerlink" title="全局组件注册"></a>全局组件注册</h4><p></p><p><font color="tomato">注意, 全局组件需要在实例创建之前注册</font></p><p></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 组件的名称可以用 kebab-case(烤串形式)、PascalCase(大驼峰形式)命名 </span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'gobal-comp'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>全局组件&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="局部组件注册"><a href="#局部组件注册" class="headerlink" title="局部组件注册"></a>局部组件注册</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myComp <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>局部组件&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 建议使用大驼峰形式命名, 因为对象key键如果含有'-', 需要加上引号</span>        PrivateComp<span class="token punctuation">:</span> myComp <span class="token comment" spellcheck="true">// 可以给局部组件起别名</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="组件使用-复用"><a href="#组件使用-复用" class="headerlink" title="组件使用(复用)"></a>组件使用(复用)</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 组件标签的使用可以建议用烤串形式书写, 因为HTML元素标签不分大小写 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 不要使用H5内置标签名作为组件的名字, 防止浏览器识别错误 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gobal-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gobal-comp</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 全局组件使用 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>private-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>private-comp</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 局部组件使用 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>private-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>private-comp</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 组件复用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="组件嵌套"><a href="#组件嵌套" class="headerlink" title="组件嵌套"></a>组件嵌套</h4><p><font color="tomato">局部注册的组件在其子组件中不可用</font>, 如需在子组件中使用其他局部组件, 需要使用<strong>组件嵌套</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> CompA <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;&lt;div>CompA&lt;/div>>`</span></span><span class="token punctuation">}</span><span class="token keyword">var</span> CompB <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;&lt;div>&lt;comp-a>&lt;/comp-a>&lt;/div>>`</span></span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// CompB组件不能直接使用CompA组件, CompA需要在CompB中注册绑定才能正常使用</span>    <span class="token comment" spellcheck="true">// 即局部组件在哪注册(绑定), 只能在哪使用</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        CompA    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        CompA<span class="token punctuation">,</span>        CompB    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="组件数据通信"><a href="#组件数据通信" class="headerlink" title="组件数据通信"></a>组件数据通信</h4><h5 id="组件父向子传递数据"><a href="#组件父向子传递数据" class="headerlink" title="组件父向子传递数据"></a>组件父向子传递数据</h5><p>父组件使用子组件时, 通过<code>v-bind:propName</code>传递数据, 子组件在配置项<code>props</code>中接收数据</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 使用MyComp组件, 传递实例data对象中的name和age数据 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">:age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myComp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        这是 MyComp 组件, 接收数据 {{name}}, {{age}}        <span class="token comment" spellcheck="true">&lt;!-- 使用SubComp组件, 把MyComp从父组件接收的props对象传递到SubComp的data中 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-comp</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$props<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-comp</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        这是 SubComp 组件, 接收数据 {{data}}        <span class="token comment" spellcheck="true">&lt;!-- 将接收的data渲染到组件上 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>名字: {{data.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>年龄: {{data.age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> SubComp <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#sub'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// SubComp组件接收 data 数据</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> MyComp <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#myComp'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// MyComp组件接收 name 和 age 俩数据</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// MyComp组件绑定(嵌套)子组件SubComp</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            SubComp        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 实例绑定局部(子)组件MyComp</span>            MyComp        <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'Tenderness'</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">18</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><span id="props"></span></p><h5 id="props配置项详细描述"><a href="#props配置项详细描述" class="headerlink" title="props配置项详细描述"></a>props配置项详细描述</h5><p>首先, 传递的prop(数据名字)命名规则(大小写)与 <strong>组件命名</strong> 一样, 因为HTML元素特性名大小写不敏感</p><h6 id="prop传递数据细节"><a href="#prop传递数据细节" class="headerlink" title="prop传递数据细节:"></a><strong>prop传递数据细节:</strong></h6><ol><li><p>prop传递动态数据, 必须加上<code>v-bind:</code>, 表示引号中数据的是一个变量而不是字符串</p></li><li><p>prop传递静态数据</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 传递静态简单字符串, 不需要v-bind: --></span><span class="token comment" spellcheck="true">&lt;!-- 将str静态字符串传递给SubComp组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-comp</span> <span class="token attr-name">str</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是静态字符串<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-comp</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 当传递的字符串需要拼接, 需要加上v-bind:, 让Vue将数据解析成表达式 --></span><span class="token comment" spellcheck="true">&lt;!-- 静态字符串拼接时, 注意单引号和双引号的使用, 推荐里单外双 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-comp</span> <span class="token attr-name">:str</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>字符串拼接<span class="token punctuation">'</span>+<span class="token punctuation">'</span>这是静态字符串<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-comp</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 传递其他静态数据类型时, 需要加上v-bind:, 让Vue正确解析数据类型 --></span><span class="token comment" spellcheck="true">&lt;!-- 传递数字 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-comp</span> <span class="token attr-name">:num</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>520<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-comp</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 传递数组 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-comp</span> <span class="token attr-name">:arr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>item1<span class="token punctuation">'</span>, <span class="token punctuation">'</span>item2<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-comp</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 传递对象 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-comp</span> <span class="token attr-name">:obj</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name: <span class="token punctuation">'</span>Tenderness<span class="token punctuation">'</span>, age: 18}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-comp</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 传递布尔值 --></span><span class="token comment" spellcheck="true">&lt;!-- 特殊情况: prop没有值时, 表示传递true, 不需要v-bind: --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-comp</span> <span class="token attr-name">is-active</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-comp</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 等同于 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-comp</span> <span class="token attr-name">:is-active</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-comp</span><span class="token punctuation">></span></span></code></pre></li><li><p>prop传递一个对象的所有属性</p><p>如果你想要将一个对象的所有属性都作为 prop 传入，你可以使用不带参数的 <code>v-bind</code> (取代 <code>v-bind:prop-name</code>), 因此 <strong>组件父向子传递数据</strong> 中代码可以改造成:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myComp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        这是 MyComp 组件, 接收数据 {{name}}, {{age}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-comp</span> <span class="token attr-name"><span class="token namespace">v:</span>bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$props<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-comp</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subComp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        这是 SubComp 组件, 接收数据 {{name}}, {{age}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>名字: {{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>年龄: {{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token keyword">var</span> SubComp <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#sub'</span><span class="token punctuation">,</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ol><h6 id="props配置项验证数据"><a href="#props配置项验证数据" class="headerlink" title="props配置项验证数据"></a><strong>props配置项验证数据</strong></h6><p>在 SubComp 组件中, <code>props</code>配置项接收2数据<code>name</code>和<code>age</code>, 并期望<code>name</code>是 string 类型, <code>age</code>是 number 类型, 但通过 <strong>数组</strong> 的方式接收, 只能做到 <strong>简单接收</strong> , Vue并不会验证父组件所传来的数据, 如需定制 prop 验证方式, 需要通过 <strong>对象</strong> 的方式验证接收:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> SubComp <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">'#sub'</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> String<span class="token punctuation">,</span>        age<span class="token punctuation">:</span> Number    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 类型检查通过构造函数, 本质是通过 instanceof 进行验证,     注意: 设置为 null 和 undefined 会通过任何类型检测    原生构造函数:    String    Number    Boolean    Array    Object    Date    Function    Symbol    自定义构造函数*/</span></code></pre><p>还可以为prop配置对象, 设置 <strong>必须值</strong> (<code>required</code>)或者<strong>默认值</strong>(<code>default</code>):</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> SubComp <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">'#sub'</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 必须值</span>            required<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Number 或者 String 类型都能通过</span>            type<span class="token punctuation">:</span> <span class="token punctuation">[</span>Number<span class="token punctuation">,</span> String<span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 默认值</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token number">18</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        bestFriend<span class="token punctuation">:</span> <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 对象或者数组的默认值必须从一个工厂函数中获取</span>            <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span> <span class="token string">'Jacky'</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span> <span class="token number">18</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">class</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自定义验证函数</span>            <span class="token function">validator</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'H5'</span><span class="token punctuation">,</span><span class="token string">'Java'</span><span class="token punctuation">,</span><span class="token string">'UI'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><font color="deep"><strong>注意点</strong></font>: <code>props</code>会在 <strong>组件实例创建之前</strong> (<code>beforeCreate</code>)验证, 所以所有实例属性(包括<code>data</code>和<code>computed</code>)在<code>default</code>或者<code>validator</code>中不可用</p><h5 id="组件子向父传递数据"><a href="#组件子向父传递数据" class="headerlink" title="组件子向父传递数据"></a>组件子向父传递数据</h5><h6 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a><strong>单向数据流</strong></h6><p>所有<code>prop</code>使得父子<code>prop</code>间形成一个 <strong>单向下行绑定</strong>, 即父级<code>prop</code>的更新会向下流动到子组件中, 但是反过来不行, 这样的处理能 <font color="deep"><strong>防止</strong></font> 子组件意外改变父级组件的状态, 导致应用的数据流向难以理解</p><p>所以, 父级组件发生更新时, 子组件<code>prop</code>刷新保持最新值, <font color="deep"><strong>子组件不能直接操作</strong></font><code>prop</code></p><h6 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a><strong>自定义事件</strong></h6><p>单向数据流就像是水顺流而下的道理, 但是我们可以通过泵让水逆流而上, 这就是 <strong>组件子向父传递数据</strong> 的原理, 而 <strong>自定义事件</strong> 就相当于这个泵, 以下是一个简易版的 <font color="deepskyblue"><strong>todo-list</strong></font> 诠释组件子向父传递数据的过程</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">@keydown.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 父组件使用子组件时, 绑定自定义事件'del' --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>news-list</span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">@del</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>del<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>news-list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emitDel(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&times;">&amp;times;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> NewsList <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#list'</span><span class="token punctuation">,</span>        props<span class="token punctuation">:</span> <span class="token punctuation">{</span>            list<span class="token punctuation">:</span> <span class="token punctuation">{</span>                type<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>                <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">emitDel</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 子组件中触发'del'自定义事件, 并把index传递给父组件</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            NewsList        <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            user<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">del</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 自定义事件处理父组件中list数组</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="非父子组件传递数据"><a href="#非父子组件传递数据" class="headerlink" title="非父子组件传递数据"></a>非父子组件传递数据</h5><p>非父子组件传递数据可通过三种方式实现</p><ol><li>中央事件总线</li><li>混入<code>store</code>模式</li><li><code>vuex</code>插件 </li></ol><p>本章节只介绍 <strong>中央事件总线</strong> , 其余2方法在<code>vuex</code>中介绍</p><h6 id="组件数据私有化"><a href="#组件数据私有化" class="headerlink" title="组件数据私有化"></a><strong>组件数据私有化</strong></h6><p>在介绍中央事件总线之前, 先说下组件数据私有化, 即 <strong>组件的<code>data</code>配置项必须是一个函数</strong></p><p>在<code>data</code>配置项中设置一个函数, 该函数返回真正的 <strong>数据对象</strong>, 即每次绑定注册组件时, 该组件实例的<code>data</code>数据对象都是一个新的引用, 即每个组件实例管理一个<code>data</code>数据对象的独立拷贝, 这样的处理能让组件 <strong>数据私有化</strong>, <strong>复用时组件数据互不影响</strong></p><p><img src="/images/privatedata.png" alt="组件数据私有化示例"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-comp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>组件私有num: {{num}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 每个组件实例的add()方法, 只会对当前实例的私有num进行累加 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>自增<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> MyComp <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#my-comp'</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                num<span class="token punctuation">:</span> <span class="token number">0</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            MyComp        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h6 id="中央事件总线"><a href="#中央事件总线" class="headerlink" title="中央事件总线"></a><strong>中央事件总线</strong></h6><p><strong>中央事件总线</strong> 本质也是通过 <strong>自定义事件</strong> 实现数据传递, 使用过程中 <strong><font color="deep">注意事件名字重复</font></strong></p><p><img src="/images/vuebus.png" alt="vue bus 中央事件总线"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>other-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>other-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-comp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>组件私有num: {{num}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>自增<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>other-comp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 点击第一个按钮时, 触发bus的addNum自定义事件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emitAdd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>MyComp组件的num自增<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- input输入框v-model绑定OtherComp组件实例私有数据num --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 点击第一个按钮时, 触发bus的changeNum自定义事件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emitChange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改MyComp组件的num<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//全局公交车, 当前script环境下任何都能使用</span>    <span class="token keyword">var</span> MyComp <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#my-comp'</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                num<span class="token punctuation">:</span> <span class="token number">0</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 生命周期钩子函数, 当实例挂载完成后, 执行的函数</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 给bus监听addNum自定义事件, 用箭头函数改变this指向(当前实例), MyComp组件实例的私有Num自增</span>            bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'addNum'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 给bus监听changeNum自定义事件, 接收一个newVal参数, 并赋值给MyComp组件实例的私有Num</span>            bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'changeNum'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> newVal<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> OtherComp <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#other-comp'</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                num<span class="token punctuation">:</span> <span class="token number">0</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">emitAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 触发bus的addNum自定义事件</span>                bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'addNum'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">emitChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 触发bus的changeNum自定义事件, 并把OtherComp的私有num传递过去</span>                bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'changeNum'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            MyComp<span class="token punctuation">,</span>            OtherComp        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><h4 id="插槽的作用"><a href="#插槽的作用" class="headerlink" title="插槽的作用"></a>插槽的作用</h4><h5 id="简单数据通信"><a href="#简单数据通信" class="headerlink" title="简单数据通信"></a>简单数据通信</h5><p>在上一章节中, 我们提及了组件间的数据通信问题, 在组件嵌套层次较深的组件中, 父组件向后代组件传递数据时, 如果通过父向子传递, 则需要一层一层逐层传递和接收<code>prop</code>, 逻辑可能会出现混乱并且不好维护</p><p><strong>插槽</strong> 的出现能 <font color="deepskyblue"><strong>简化</strong></font> 层级较深组件中的父组件向后代组件传递数据的逻辑关系</p><p><img src="/images/slot-prop.png" alt="传递简单数据"></p><h6 id="使用父向子prop传递"><a href="#使用父向子prop传递" class="headerlink" title="使用父向子prop传递"></a><strong>使用父向子prop传递</strong></h6><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>#app实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>v-model绑定#app实例msg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 将msg传递到MyComp中 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-comp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>MyComp组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 将接收过来的msg传递到SubComp中 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-comp</span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-comp</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub-comp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>SubComp组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>#app实例传递过来的msg: {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> SubComp <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#sub-comp'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 接收MyComp传递过来的msg数据</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> MyComp <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#my-comp'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            SubComp        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 接收#app传递过来的msg数据</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            MyComp        <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h6 id="使用slot插槽简化"><a href="#使用slot插槽简化" class="headerlink" title="使用slot插槽简化"></a><strong>使用slot插槽简化</strong></h6><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>#app实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>v-model绑定#app实例msg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 往MyComp组件插槽插入#app实例msg, 传递到SubComp组件中 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-comp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>MyComp组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-comp</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 提供插槽 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-comp</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub-comp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>SubComp组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 提供插槽 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>#app实例传递过来的msg: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// SubComp和MyComp组件不再需要props配置项接收msg</span>    <span class="token keyword">var</span> SubComp <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#sub-comp'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> MyComp <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#my-comp'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            SubComp        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            MyComp        <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="slot传递元素标签或者组件"><a href="#slot传递元素标签或者组件" class="headerlink" title="slot传递元素标签或者组件"></a>slot传递元素标签或者组件</h5><p><img src="/images/slot-el-comp.png" alt="slot传递元素或者组件"></p><ol><li><p><strong>slot传递元素标签</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>#app实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>v-model绑定#app实例msg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 往MyComp组件插槽插入元素, 传递到SubComp组件中 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是#app实例传来的p元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是#app实例传来的msg: {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-comp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>MyComp组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-comp</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-comp</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub-comp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>SubComp组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>slot传递组件</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>#app实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>v-model绑定#app实例msg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 往MyComp组件插槽中插入SubComp组件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-comp</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 往SubComp组件插槽中插入元素 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是#app实例传来的p元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是#app实例传来的msg: {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-comp</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-comp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>MyComp组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub-comp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>SubComp组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> SubComp <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#sub-comp'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// MyComp 不再需要绑定SubComp组件</span>    <span class="token keyword">var</span> MyComp <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#my-comp'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// #app实例中绑定MyComp和SubComp组件</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            MyComp<span class="token punctuation">,</span>            SubComp        <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="插槽的后备内容-默认内容"><a href="#插槽的后备内容-默认内容" class="headerlink" title="插槽的后备内容(默认内容)"></a>插槽的后备内容(默认内容)</h4><p>与<code>prop</code>类似, <code>slot</code>可以设置默认内容</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 显示默认内容提交 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-btn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-btn</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 显示插入内容重置 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-btn</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-btn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> MyBtn <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#my-btn'</span><span class="token punctuation">,</span>        props<span class="token punctuation">:</span> <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> <span class="token punctuation">{</span>                type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>                <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'submit'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            MyBtn        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>在一个组件中, 我们可能需要提供多个插槽, 如一个简单的三栏布局:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">360</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> pink</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 期待插入左栏内容 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">flex</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 期待插入中间部分内容 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> pink</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 期待插入右栏内容 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>那么问题来了, 在使用时, 该怎么把对应内容插到对应位置呢</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 尝试一下是否按顺序插入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>左<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>右<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/images/slot-repeat.png" alt="匿名插槽"></p><p>结果是, 三个<code>&lt;span&gt;</code>元素重复了三次</p><p>由以上结果可知, <font color="yellowgreen">有多少个匿名插槽, 插入的匿名内容就会重复多少次</font>.</p><p><font color="tomato">使用 <font color="yellowgreen"><strong>具名插槽</strong></font> 进行改造</font>:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">360</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> pink</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 期待插入左栏内容 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">flex</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 期待插入中间部分内容 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> pink</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 期待插入右栏内容 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p><img src="/images/slot-name.png" alt="具名插槽"></p><p>使用具名插槽改造后, 达到我们需要的显示效果</p><p>注意点: </p><ol><li>具名插槽是通过<code>&lt;slot&gt;</code>标签的<code>name</code>属性和插入元素的<code>slot</code>特性相关联的</li><li>匿名插槽默认<code>name</code>属性为<code>defalut</code>, 可以省略</li></ol><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><h5 id="插槽的编译作用域"><a href="#插槽的编译作用域" class="headerlink" title="插槽的编译作用域"></a>插槽的编译作用域</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 不插入内容, 使用默认内容, 在MyComp组件作用域寻找name --></span>    <span class="token comment" spellcheck="true">&lt;!-- 结果是"MyComp" --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 不插入内容name, 在当前实例作用域寻找name --></span>    <span class="token comment" spellcheck="true">&lt;!-- 结果是"Tenderness" --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span><span class="token punctuation">></span></span>        {{name}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> MyComp <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>&lt;slot>{{name}}&lt;/slot>&lt;/div>`</span></span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'MyComp'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            MyComp        <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'Tenderness'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>小结: <strong>父级模板里的所有内容都是在父级作用域中编译的; 子模板里的所有内容都是在子作用域中编译的</strong></p><h5 id="作用域插槽-1"><a href="#作用域插槽-1" class="headerlink" title="作用域插槽"></a>作用域插槽</h5><p>就像组件子向父传递数据一样, 在插槽中, 我们有时也需要 <strong>从子组件中获取数据</strong>, 而这通信的桥梁就是具名插槽</p><p>在 <strong>子组件</strong> <code>&lt;slot&gt;</code>标签中, 通过<code>v-bind:propName</code>传递数据</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> MyComp <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注意, 传递的数据名字不能是H5元素标签的属性名</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>&lt;slot :msg="msg">&lt;/slot>&lt;/div>`</span></span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'MyComp'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 <strong>父组件</strong> 插入插槽内容时, 通过<code>slot-scope</code>特性接收数据</p><p><font color="yellowgreen"><strong>使用插槽建议始终使用完整的基于<code>&lt;template&gt;</code>的语法</strong></font>.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{slotProps.msg}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><code>slot-scope</code>特性接收的是包含插槽所有<code>prop</code>的对象, 一般取名<code>slotProps</code>接收该对象, 当然你也可以像变量名一样取任意名字</p><p>同时, <code>slot-scope</code>特性还支持 <strong>对象解构赋值</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{msg}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="v-slot指令"><a href="#v-slot指令" class="headerlink" title="v-slot指令"></a>v-slot指令</h4><p>Vue从2.6.0开始, 废弃<code>slot</code>和<code>slot-scope</code>特性( 目前还能使用 ), 用<code>v-slot</code>指令代替</p><p><strong>注意, <code>v-slot</code>指令只能写在<code>&lt;template&gt;</code>标签上</strong></p><ol><li><p><code>v-slot</code>指令使用 <strong>具名插槽</strong>, 对简单三栏布局改造</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>left</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>左<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 不用v-slot指令, 默认是v-slot:default --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>right</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>右<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用语法糖<code>#</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#left</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>左<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#right</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>右<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>v-slot</code>指令使用 <strong>作用域插槽</strong></p><p>组件模板:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">360</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> pink</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>左侧<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">flex</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>中间<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> pink</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>右侧<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>具名插槽接收数据:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#left</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 等同于 v-slot:default="{msg} 或者 #default="{msg} --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#right</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="Vue核心补充与进阶"><a href="#Vue核心补充与进阶" class="headerlink" title="Vue核心补充与进阶"></a>Vue核心补充与进阶</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="实例的生命周期钩子"><a href="#实例的生命周期钩子" class="headerlink" title="实例的生命周期钩子"></a>实例的生命周期钩子</h4><p>每个Vue实例在被创建时会经过一系列的初始化过程, 在这些过程执行的函数叫做 <strong>生命周期钩子函数</strong>, 以下是 Vue 官方文档提供的生命周期图示</p><p><img src="/images/lifecycle.png" alt="生命周期"></p><table><thead><tr><th>生命周期钩子</th><th>描述和作用</th><th style="text-align:center">操作数据(<code>data</code>)</th><th style="text-align:center">操作元素(<code>el</code>)</th></tr></thead><tbody><tr><td>beforeCreate()</td><td>劫持数据对象前</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td>created()</td><td>劫持数据对象后</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td>beforeMount()</td><td>实例挂载前</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td>mounted()</td><td>实例挂载后</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td>beforeUpdate()</td><td>数据对象更新前</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td>updated()</td><td>数据对象更新后</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td>beforeDestroy()</td><td>实例销毁前</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td>destroyed()</td><td>实例销毁后</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table><p><strong>常用的钩子函数:</strong></p><ol><li><code>created()</code> 发起 <strong>ajax</strong> 异步请求, 获取数据</li><li><code>mounted()</code> <strong>设置定时器</strong></li><li><code>beforeDestory()</code> <strong>清除定时器</strong></li></ol><p>注意点:</p><ol><li><p><font color="tomato"><strong>不要使用箭头函数来定义生命周期钩子函数</strong></font>, 因为生命周期钩子函数<code>this</code>指向当前 Vue 实例</p></li><li><p><code>beforeUpdate</code>钩子函数获取的是 <strong>更新前</strong> 的数据, <code>updated</code>获取的是 <strong>最新</strong> 的数据</p></li><li><p><code>mounted</code>和<code>updated</code>不会等待其 <strong>子组件</strong> 的挂载/重绘状态, 如需等待整个视图渲染完毕才调用对应的 <strong>钩子函数</strong>, 需要用<code>vm.$nextTick</code>替换对应钩子函数</p><pre class=" language-js"><code class="language-js"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 全视图挂载后(rendered)执行的代码 */</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 全视图重绘(re-rendered)后执行的代码 */</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><a href="#keepalive"><code>activated</code>和<code>deactivated</code>两钩子在 <font color="tomato"><strong>路由</strong></font> 部分描述</a></p></li></ol><h4 id="生命周期相关实例方法"><a href="#生命周期相关实例方法" class="headerlink" title="生命周期相关实例方法"></a>生命周期相关实例方法</h4><h5 id="vm-mount"><a href="#vm-mount" class="headerlink" title="vm.$mount()"></a>vm.$mount()</h5><p>当创建 Vue 时, 没有<code>el</code>配置项, 实例处于 <strong>未挂载</strong>(<code>beforeMount</code>)状态, 需要调用<code>vm.$mount()</code>方法手动挂载</p><p>注意点:</p><ol><li>该方法可以接受 <strong>元素</strong>(<code>element</code>) 或者 <strong>元素选择器</strong>(<code>querySelector</code>) 两种参数, 表示挂载(被替换)的元素</li><li>如果 <strong>不传参数</strong>, 表示模板将渲染成文档之外的元素( 相当于<code>document.createElement()</code> ) , 需要使用原生 DOM API 将它插入文档中( 如 <code>appendChild</code>,<code>insertBefore</code> )</li><li><code>vm.$mount()</code>返回<code>vm</code>实例本身, 所以支持链式操作, 如<code>vm.$mount().$el</code>访问根元素</li></ol><h5 id="vm-destroy"><a href="#vm-destroy" class="headerlink" title="vm.$destroy()"></a>vm.$destroy()</h5><p>完全销毁一个实例, 清理它与其他实例的链接, 解绑它身上的所有指令和事件监听器</p><p>注意点, 该方法会同时触发<code>beforeDestroy</code>和<code>destroy</code>两个钩子</p><h5 id="vm-forceUpdate"><a href="#vm-forceUpdate" class="headerlink" title="vm.$forceUpdate()"></a>vm.$forceUpdate()</h5><p>强制让 Vue 实例 <strong>重新渲染</strong>, 仅影响当前实例及其插槽内容, 自她子组件不受影响, <font color="deep"><strong>一般不会使用</strong></font>.</p><h5 id="vm-nextTick-callback"><a href="#vm-nextTick-callback" class="headerlink" title="vm.$nextTick([callback])"></a>vm.$nextTick([callback])</h5><p>将回调函数延迟到 DOM 更新循环( 挂载/重绘 )之后执行</p><h3 id="访问元素和组件"><a href="#访问元素和组件" class="headerlink" title="访问元素和组件"></a>访问元素和组件</h3><p>在使用 Vue 时, 不建议触达另一个组件实例内部或者手动操作 DOM 元素, 但确实存在这需求让我们的操作更便捷, 因此 Vue 也提供了几个Api:</p><ol><li><p><code>$root</code>, 访问 <strong>根实例</strong>, 后代组件实例可以通过<code>this.$root</code>访问到根实例</p></li><li><p><code>$parent</code>, 访问 <strong>父组件</strong>, 与<code>$root</code>类似, 子组件实例可通过<code>this.$parent</code>访问其父组件</p></li><li><p><code>$children</code>, 访问当前实例的 <strong>直接子组件</strong>, <font color="deep"><strong>基本不用</strong></font>.</p></li><li><p><code>$refs</code>, 访问 <strong>子组件或子元素</strong>, 相对<code>$root</code>和<code>$parent</code>而言比较常用, 常用于操作 DOM 元素</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>普通div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 实例模板中通过ref特性绑定需要访问的元素或者组件实例 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>targetDiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>目标div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在父组件中, 通过vm.$refs访问对应的子元素或子组件</span>            <span class="token comment" spellcheck="true">// 只能在挂载后的生命周期钩子函数中操作访问</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>targetDiv<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="事件接口API"><a href="#事件接口API" class="headerlink" title="事件接口API"></a>事件接口API</h3><ol><li><p><code>$on(eventName, eventHandler)</code> 监听一个事件</p></li><li><p><code>$once(eventName, eventHandler)</code> 监听一个一次性事件</p></li><li><p><code>$emit(eventName, [...args])</code> 触发实例事件</p></li><li><p><code>$off([eventName, callback])</code> 移除事件监听器</p><p>注意点:</p><p>a) 没有参数, 表示移除所有事件监听器</p><p>b) 只提供事件( eventName ), 移除该事件所有监听器</p><p>c) 同时提供事件( eventName )和回调( callback ), 只移除这个回调的监听器</p></li></ol><h3 id="watch接口进阶监测"><a href="#watch接口进阶监测" class="headerlink" title="$watch接口进阶监测"></a>$watch接口进阶监测</h3><p>语法: <code>vm.$watch(exp|Fn, callback, [options])</code></p><p>示例 Vue 实例:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        groupName<span class="token punctuation">:</span> <span class="token string">'Vue电商项目'</span><span class="token punctuation">,</span>        members<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'成员1'</span><span class="token punctuation">,</span> wages<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'成员2'</span><span class="token punctuation">,</span> wages<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'成员3'</span><span class="token punctuation">,</span> wages<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>和<code>watch</code>配置项类似的监测</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 第一个参数为字符串, 表示监测的数据名称</span><span class="token comment" spellcheck="true">// 第二个参数为处理函数</span><span class="token comment" spellcheck="true">// 第三个参数为配置对象, 如 immediate 和 deep</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'groupName'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'当前值:'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'旧值:'</span><span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>immediate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 立即执行处理函数</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'members'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>deep<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 深度监测</span></code></pre><p>第一个参数接收一个 <strong>函数</strong></p><pre class=" language-js"><code class="language-js">vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 相当于监测一个未定义的计算值( computed )</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>members<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tar<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> tar <span class="token operator">+</span> cur<span class="token punctuation">.</span>wages    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'当前值:'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'旧值:'</span><span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>$watch</code>的 <strong>返回值</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> unwatch <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'groupName'</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// vm.$watch 返回一个取消监测函数, 用来停止触发回调( handler )</span><span class="token function">unwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="key特殊特性"><a href="#key特殊特性" class="headerlink" title="key特殊特性"></a>key特殊特性</h3><p><code>key</code>主要用在 Vue 的虚拟 DOM 算法, <strong>接收一个<code>number</code>或者<code>string</code>类型的值</strong>, 在新旧 nodes 对比时辨识 VNodes. 如果不用<code>key</code>, Vue 会尽可能的复用相同的元素 <strong>重新渲染数据</strong>; 使用<code>key</code>后, Vue会 <strong>基于<code>key</code>的变化</strong> 重新排列元素顺序, 并移除<code>key</code>不存在的元素</p><p><font color="deepskyblue"><strong><code>key</code>特性常与<code>v-for</code>指令搭配使用</strong></font>.</p><p><font color="deep"><strong>注意: 相同父元素的子元素<code>key</code>不能重复, 否则会造成渲染错误</strong></font>.</p><p><code>key</code>也能用于强制替换元素/组件而不是复用, 比如:</p><ol><li>完整地触发组件的生命周期钩子(<code>beforeCreate</code>到<code>destroyed</code>, <code>v-if</code>指令条件渲染)</li><li>触发过渡(<code>&lt;transition&gt;</code>或者<code>transition-group</code>组件)</li></ol><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>除了内置指令外, Vue 支持开发者注册自定义事件对 Vue 进行拓展, 减少DOM操作</p><p>全局注册:</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'指令名字'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 钩子函数 */</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>局部注册:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'指令名字'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 钩子函数 */</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>使用自定义指令:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-自定义指令名字</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><font color="deepskyblue">注意点: 注册时不需要带<code>v-</code>, 使用时需要带上<code>v-</code></font>.</p><h4 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h4><ol><li><code>bind()</code>, 当指令绑定到元素时调用, <strong>只执行一次</strong>, 一般进行 <strong>初始化</strong> 设置</li><li><code>inserted()</code>, 被绑定元素插入父节点时调用( 父节点需要在内存中存在, 不一定插入文档中 )</li><li><code>update()</code>, 所在组件<code>VNode</code>(虚拟DOM)更新时, <strong>可能在子<code>VNode</code>更新前</strong> 调用</li><li><code>componentUpdated()</code>, 所在 <strong>组件及其子<code>VNode</code></strong>全部更新后调用</li><li><code>unbind()</code>, 指令与元素解绑时调用, <strong>只调用一次</strong></li></ol><h4 id="钩子函数接收的参数"><a href="#钩子函数接收的参数" class="headerlink" title="钩子函数接收的参数"></a>钩子函数接收的参数</h4><ol><li><code>el</code>, 绑定指令的元素, <strong>常用来直接操作DOM</strong></li><li><code>binding</code>, 一个对象, 包含<ul><li><code>name</code>, 指令名, 不含<code>v-</code>前缀</li><li><code>value</code>, 指令的绑定值/对象, 例如：<code>v-my-directive=&quot;1 + 1&quot;</code> 中，绑定值为 <code>2</code>。</li><li><code>oldValue</code>, 指令绑定的旧值, 仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><code>expression</code>, 指令绑定的表达式, 例如 <code>v-my-directive=&quot;1 + 1&quot;</code> 中，表达式为 <code>&quot;1 + 1&quot;</code>。</li><li><code>arg</code>, 传给指令的参数, 例如 <code>v-my-directive:foo</code> 中，参数为 <code>&quot;foo&quot;</code>。</li><li><code>modifiers</code>, 包含修饰符的对象, 例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>{ foo: true, bar: true }</code>。</li></ul></li><li><code>vnode</code>, Vue 编译生成的虚拟节点</li><li><code>oldVnode</code>, 上一个虚拟节点, 仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用</li></ol><p>注意点: </p><ol><li><font color="deepskyblue">除了<code>el</code>, 其他参数都应该是只读的, 切勿进行修改</font>.</li><li>如需在各钩子间共享数据, 通过元素的<code>dataset</code>(即元素上的<code>data-*</code>属性)实现, 语法: <code>el.dataset.*</code></li></ol><h4 id="自定义指令实现输入框自动对焦"><a href="#自定义指令实现输入框自动对焦" class="headerlink" title="自定义指令实现输入框自动对焦"></a>自定义指令实现输入框自动对焦</h4><p><code>autofocus</code>特性在 <strong>移动版Safari</strong> 中失效, 通过自定义指令让<code>&lt;input&gt;</code>输入框自动聚焦:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 注册一个全局自定义指令 `v-focus`</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 当被绑定的元素插入到 DOM 中时</span>  inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 聚焦元素</span>    el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="获取实例属性API"><a href="#获取实例属性API" class="headerlink" title="获取实例属性API"></a>获取实例属性API</h3><ol><li><code>vm.$data</code>, 获取实例数据对象, 即<code>data</code>配置项</li><li><code>vm.$props</code>, 获取接收的<code>props</code>对象</li><li><code>vm.$options</code>, 获取实例的初始化选项, 一般用于获取自定义配置项</li><li><code>vm.$slots</code>, 访问 <strong>插槽分发</strong> 的内容, 以及每个具名插槽的相应属性(<code>name</code>)</li><li><code>vm.$scopedSlots</code>, 访问 <strong>作用域插槽</strong></li><li><code>vm.$attrs</code>, 获取 <strong>父作用域</strong> 中, 不被<code>props</code>接收的特性(<code>class</code>和<code>style</code>除外)</li><li><code>vm.$listeners</code>, 获取 <strong>父作用域</strong> 中的 <strong>事件监听器</strong></li></ol><h3 id="过渡与动画"><a href="#过渡与动画" class="headerlink" title="过渡与动画"></a>过渡与动画</h3><p>首先, Vue <font color="deep"><strong>不适合</strong></font>做过渡或者动画效果, 但 Vue 提供<code>&lt;transition&gt;</code>和<code>&lt;transition-group&gt;</code>两内置组件实现过渡与动画效果</p><p><font color="yellowgreen">Vue 在插入、更新、移除 DOM 时, 能触发过渡效果</font>.</p><h4 id="单元素-组件过渡"><a href="#单元素-组件过渡" class="headerlink" title="单元素/组件过渡"></a>单元素/组件过渡</h4><p>使用<code>&lt;transition&gt;</code>内置组件能让单元素/组件实现过渡效果, 以下是简单的案例</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token comment" spellcheck="true">/* 使用过渡类名控制过渡样式 */</span>        <span class="token selector"><span class="token class">.myTrans-enter-active</span>, <span class="token class">.myTrans-leave-active</span> </span><span class="token punctuation">{</span>            <span class="token property">transition</span><span class="token punctuation">:</span> opacity <span class="token number">.5</span>s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.myTrans-enter</span>, <span class="token class">.myTrans-leave-to</span> </span><span class="token punctuation">{</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">=</span>!isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>切换<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- v-if 和 v-show 都能触发过渡 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 给transition组件设置name特性, 自定义组件过渡效果 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myTrans<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>过渡测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myTrans<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>过渡测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            isShow<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h4 id="CSS过渡类名"><a href="#CSS过渡类名" class="headerlink" title="CSS过渡类名"></a>CSS过渡类名</h4><p>在整个过渡的过程, 元素/组件会进入6个状态, <code>v</code>为对应<code>&lt;transition&gt;</code>组件的<code>name</code>特性值</p><ol><li><code>v-enter</code>, 进场过渡的开始状态</li><li><code>v-enter-active</code>, 进场过渡的生效过程</li><li><code>v-enter-to</code>, 进场过渡的结束状态</li><li><code>v-leave</code>, 退场过渡的开始状态</li><li><code>v-leave-active</code>, 退场过渡的生效过程</li><li><code>v-leave-to</code>, 退场过渡的结束状态</li></ol><p><img src="/images/transition.png" alt="过渡过程"></p><p>总结:</p><ol><li>一般<code>v-enter</code>和<code>v-leave-to</code>状态是一致的, <code>v-enter-to</code>和<code>v-leave</code>状态是一致的, 即可用并集选择器设置相同样式</li><li><code>v-enter-active</code>和<code>v-leave-active</code>在进场/退场整个过程应用, 在这俩类名选择器中可以设置<code>transition</code>(过渡)或者<code>animation</code>(动画, 外面定义<code>@keyframes</code>) CSS属性</li></ol><h4 id="自定义过渡类名"><a href="#自定义过渡类名" class="headerlink" title="自定义过渡类名"></a>自定义过渡类名</h4><p>自定义过渡类名 <strong>优先级</strong> 高于普通类名, 一般配合第三方 CSS 动画库使用(如 <strong>Animate.css</strong> )</p><p>对应的6个自定义类名:</p><ol><li><code>enter-class</code></li><li><code>enter-active-class</code></li><li><code>enter-to-class</code></li><li><code>leave-class</code></li><li><code>leave-active-class</code></li><li><code>leave-to-class</code></li></ol><p>配合 <strong>Animate.css</strong> 使用时, 需需要设置<code>enter-active-class</code>和<code>leave-active-class</code>即可, 如</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow <span class="token punctuation">=</span> !isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>切换<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">enter-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animated fadeIn<span class="token punctuation">"</span></span>                <span class="token attr-name">leave-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animated fadeOut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>过渡测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="过渡钩子"><a href="#过渡钩子" class="headerlink" title="过渡钩子"></a>过渡钩子</h4><p>Vue提供的8个过渡钩子</p><ol><li><code>v-on:before-enter</code>, 进场前状态</li><li><code>v-on:enter</code>, 进场过渡时</li><li><code>v-on:after-enter</code>, 进场结束状态</li><li><code>v-on:enter-cancelled</code>, 进场过渡取消时</li><li><code>v-on:before-leave</code>, 退场前状态</li><li><code>v-on:leave</code>, 退场过渡时</li><li><code>v-on:after-leave</code>, 退场结束状态</li><li><code>v-on:leave-cancelled</code>, 退场过渡取消时</li></ol><p>注意:</p><ol><li>8个钩子绑定的函数接收的第一个参数都是<code>el</code>, 即当前执行过渡效果的元素</li><li><code>enter</code>和<code>leave</code>还接收第二个参数<code>done</code>回调函数, 表示 <strong>异步</strong> 调用, 当只用 JavaScript 过渡时必须调用, 否则两钩子函数同步调用, 过渡效果失效</li><li>仅适用 JavaScript 过渡时, 建议给需要过渡的元素设置<code>v-bind:css=&quot;false&quot;</code>表示跳过CSS监测</li></ol><h4 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h4><p><code>&lt;transition&gt;</code>组件只能设置单个元素/组件的过渡, 如需设置列表过渡, 如配合<code>v-for</code>指令, 则需要使用<code>&lt;transition-group&gt;</code>组件</p><p>注意点:</p><ol><li><p><code>&lt;transition&gt;</code>组件在页面中不会被渲染成一个真正的元素, 而<code>&lt;transition-group&gt;</code>会被渲染成一个真正的元素</p></li><li><p><code>tag</code>特性, <code>&lt;transition-group&gt;</code>默认会被渲染成<code>&lt;span&gt;</code>元素, 可通过<code>tag</code>特性设置成其他元素, 如</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 指定为ul元素 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num in 10<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{num}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{num}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">></span></span></code></pre></li><li><p>内部元素 <strong>必须</strong> 设置<code>key</code>特性</p></li></ol><h4 id="过渡组件的其他特性"><a href="#过渡组件的其他特性" class="headerlink" title="过渡组件的其他特性"></a>过渡组件的其他特性</h4><ol><li><p><code>duration</code>设置过渡的持续时长</p><pre class=" language-html"><code class="language-html">// 单位毫秒(ms)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">:duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>// 定制进场和退场的持续时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">:duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{enter: 600, leave: 800}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>type</code>指定监听的类型, Vue是通过监听<code>transitionend</code>或<code>animationend</code>事件判断过渡完成的, 当同时使用过渡(<code>transition</code>)和动画(<code>animation</code>)时, 需要设置<code>type</code>特性, 明确 Vue 监听的类型以判断过渡完成, 取值<code>transition</code>或<code>animation</code></p></li><li><p><code>appear</code>设置初次渲染的过渡, 与进场和出场过渡一样, 但只在元素/组件初次在页面中渲染时有效</p><p>a) 自定义类名: <code>appear-class</code>,<code>appear-active-class</code>,<code>appear-to-class</code></p><p>b) 自定义狗子: <code>@before-appear</code>,<code>@appear</code>,<code>@after-appear</code>,<code>@appear-cancelled</code></p></li><li><p><code>mode</code>设置过渡模式, 用于<code>v-if</code>,<code>v-else-if</code>,<code>v-else</code>渲染的多组件过渡, 取值<code>in-out</code>(新元素进场后当前元素退场), <code>out-in</code>(当前元素退场后新元素进场)</p></li></ol><h2 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h2><p><font color="yellowgreen"><strong>Vue Router</strong></font> 是 <strong>Vus.js</strong> 官方的路由管理器, 利用 Vue.js + Vue Router 能便捷的创建一个单页面应用( <strong>SPA</strong> )</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- router-link组件进行导航 --></span>    <span class="token comment" spellcheck="true">&lt;!-- to特性设置跳转的路由路径 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>关于<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- router-view组件设置路由出口 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 路由匹配的组件将在这里渲染 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入Vue核心库 vue.js --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入Vue Router插件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 定义组件</span>    <span class="token keyword">var</span> Home <span class="token operator">=</span> <span class="token punctuation">{</span>template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;h1>首页&lt;/h1>`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> About <span class="token operator">=</span> <span class="token punctuation">{</span>template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;h1>关于&lt;/h1>`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义路由</span>    <span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 路由设置</span>        routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">// 根路径处理</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>                redirect<span class="token punctuation">:</span> <span class="token string">'/home'</span> <span class="token comment" spellcheck="true">// 网页重定向, 指向对应路由路径(path)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 将组件映射到对应路由中</span>                component<span class="token punctuation">:</span> Home            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> About            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 引入路由器</span>        router<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="mode配置项"><a href="#mode配置项" class="headerlink" title="mode配置项"></a>mode配置项</h3><p><code>mode</code>配置项设置 Vue 路由的路径模式, 默认值<code>&quot;hash&quot;</code></p><p><img src="/images/hash.png" alt="hash模式"></p><p><strong>hash模式</strong> 下, Vue使用 URL 的 hash 来模拟一个完整的 URL, 于是 URL 改变时, 页面不会重新加载</p><p>但很显然, 这样的路由路径是比较丑的, 所以 Vue Router 提供了 <strong>history模式</strong>, 将<code>mode</code>配置项设置为<code>&quot;history&quot;</code>后</p><p><img src="/images/history.png" alt="history模式"></p><p><strong>history模式</strong> 下, 路由路径更像正常的 URL, 但需要 <strong>后台配置支持</strong>, 否则会报 <font color="tomato"><strong>404</strong></font> 找不到资源</p><h4 id="操作hash和history原生JS接口"><a href="#操作hash和history原生JS接口" class="headerlink" title="操作hash和history原生JS接口"></a>操作hash和history原生JS接口</h4><ol><li><p>操作<code>hash</code>(哈希)</p><p>操作<code>hash</code>, 通过<code>location.hash</code>进行</p><p><img src="/images/hashapi.png" alt="操作hash"></p></li><li><p>操作<code>history</code>(历史记录)</p><p>a) <code>history.back()</code>返回</p><p>b) <code>history.forward()</code>前进</p><p>c) <code>history.go(number|URL)</code>跳转到某历史记录</p><p>d) <code>history.pushState(data, title, URL)</code>, 其中<code>data</code>是对象, <code>title</code>是字符串, 添加(压栈)历史记录</p><p>e) <code>history.replaceState(data, title, URL)</code>, 用新的历史记录替换当前记录</p></li></ol><h4 id="router-link组件"><a href="#router-link组件" class="headerlink" title="router-link组件"></a>router-link组件</h4><p><code>&lt;router-link&gt;</code>组件在实例挂载时会被渲染成<code>&lt;a&gt;</code>标签, 本质是对<code>&lt;a&gt;</code>标签的封装:</p><ol><li>阻止<code>&lt;a&gt;</code>标签的默认跳转行为(<code>e.preventDefalut = true</code>)</li><li>根据<code>mode</code>配置项, <strong>hash模式</strong> 修改<code>location.hash</code>, <strong>history模式</strong> 调用<code>history.pushState()</code></li></ol><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>Vue 路由也有符合 <font color="tomato"><strong>RESTful</strong></font> 设计风格的 <strong>动态路由</strong>, 如在 <strong>我的</strong> 路由中, 根据不同<code>id</code>匹配不同用户, 使用相同组件渲染页面:</p><ol><li><p>定义我的组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>用户&lt;/div>`</span></span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>添加路由设置</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// :id 就是动态路径参数</span>    path<span class="token punctuation">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> User<span class="token punctuation">}</span></code></pre></li></ol><p>设置完之后, 我们在路径上添加路径参数也能访问到对应路由组件了</p><p><img src="/images/restfulpath.png" alt="动态路由"></p><p>但是现在, 我们获取的仍是一个死的(静态)组件页面, 我们需要获取到 <strong>动态路径参数</strong>, 并渲染到页面上, 观察控制台打印的<code>this</code>( Vue 实例):</p><p><img src="/images/$route.png" alt="vm.$route"></p><p>在实例的<code>$route</code>属性中, 我们可以通过<code>vm.$route.params</code>获取到我们需要的 <strong>动态路由参数</strong>, 于是对组件进行改造</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>用户 {{$route.params.id}}&lt;/div>`</span></span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>除了 <strong>动态路由</strong> 外, 实际的应用界面通常由多层嵌套的组件组合而成, 如<code>http://path/user/1/info</code>和<code>http://path/user/1/wallet</code>等, 这时候就要用到 <strong>嵌套路由</strong></p><ol><li><p>对我的组件进行改造</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>        &lt;p>用户 {{$route.params.id}}&lt;/p>        &lt;router-link :to="'/user/'+$route.params.id+'/info'">详情&lt;/router-link>        &lt;router-link :to="'/user/'+$route.params.id+'/wallet'">钱包&lt;/router-link>        &lt;router-view>&lt;/router-view>    &lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>修改路由设置</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> User<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置嵌套路由, children配置项和routes配置项是一样的数组</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注意, 以 / 开头的嵌套路由路径会被当做根路径, 所以不能加 / </span>            path<span class="token punctuation">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> Info        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'wallet'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> Wallet        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><p>在使用 <strong>嵌套路由</strong> 时, 我们会发现, 随着嵌套的层次越深, <code>&lt;router-link&gt;</code>的<code>to</code>特性就越复杂, 因此建议每个路由都带有<code>name</code>属性, 这就是 <strong>命名路由</strong></p><ol><li><p>对路由进行命名改造</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> User<span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> Info        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'wallet'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'wallet'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> Wallet        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li><li><p>对<code>&lt;router-link&gt;</code>组件进行修改</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 根实例中 --></span><span class="token comment" spellcheck="true">&lt;!-- 通过动态to特性, 配置一个对象, 设置跳转的命名路由 --></span><span class="token comment" spellcheck="true">&lt;!-- 动态路径参数通过 params:{} 传递 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>user<span class="token punctuation">'</span>,params:{id:1}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- user组件中, 直接通过命名路由跳转 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>info<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>wallet<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>钱包<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="路由的样式类名"><a href="#路由的样式类名" class="headerlink" title="路由的样式类名"></a>路由的样式类名</h3><p>设置完路由后, 我们的页面是这样的</p><p><img src="/images/nostyle.png" alt="没有样式的路由"></p><p>不看浏览器地址栏, 用户并不知道自己当前在哪个路由中, 用户希望是这种效果以确认自己的位置</p><p><img src="/images/withstyle.png" alt="有样式的路由"></p><p>因此, 我们在跳转到<code>/user/1/info</code>后审查元素</p><p><img src="/images/active.png" alt="路由类名"></p><p>切换到<code>/user/1/wallet</code>后</p><p><img src="/images/exact-active.png" alt="路由类名"></p><p>Vue给我们当前的路由设置<code>router-link-active</code>类名, <code>router-link-exact-active</code>精准定位到当前嵌套路由中, 因此可以通过这2类名设置对应样式, 但是, 这两类名还是比较复杂的, Vue Router 提供了2配置项, 让开发者重命名这2类名</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token comment" spellcheck="true">/* 路由设置 */</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 重命名2类名</span>    linkActiveClass<span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">,</span>    linkExactActiveClass<span class="token punctuation">:</span> <span class="token string">'exActive'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>重命名后, 我们就可以设置对应样式了</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.active</span> </span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.exActive</span> </span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="编程式导航-JS跳转"><a href="#编程式导航-JS跳转" class="headerlink" title="编程式导航(JS跳转)"></a>编程式导航(JS跳转)</h3><p>除了通过<code>&lt;router-link&gt;</code>组件的<code>to</code>特性实现路由跳转外, 我们还可以通过JS代码进行跳转, <code>vm.$router</code>就是我们当前使用的 <strong>router 实例</strong></p><p><img src="/images/$router.png" alt="vm.$router"></p><p>Vue Router 对 <strong>路由跳转</strong> 的方法进行了封装(兼容 <strong>hash模式</strong> 和 <strong>history模式</strong> )</p><ol><li><code>go(number)</code>, 跳转到具体路由, 参照当前记录前进或者后退多少步</li><li><code>back()</code>, 后退</li><li><code>forward()</code>, 前进</li><li><code>push(location, onComplete, onAbort)</code>, 其中<code>location</code>表示路由路径, <code>onComplete</code>和<code>onAbort</code>是可选的2个 <strong>回调函数</strong>, 表示跳转成功和失败时调用的方法</li><li><code>replace(location, onComplete, onAbort)</code></li></ol><p>给一个按钮绑定点击事件实现跳转</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jump<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>设置跳转方法</p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/user/1'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 对于命名路由以下效果一样</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><p>除了传递 <strong>动态路径参数</strong> 外, Vue 路由还可接收类似于 <code>GET</code> <strong>请求参数</strong>类似的 <code>query</code></p><ol><li><p>修改<code>/home</code>路由配置:</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Home<span class="token punctuation">}</span></code></pre></li><li><p><code>&lt;router-link&gt;</code>组件传递<code>query</code>对象</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>home<span class="token punctuation">'</span>,query:{msg:<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre></li><li><p>在 Home 组件中获取<code>query</code>对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Home <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;h1>首页&lt;/h1>`</span></span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h3><p>有时候, 我们需要一个路由页面同时显示多个视图组件, 而不是嵌套显示, 如头部搜索框<code>SearchBar</code>需要在路由<code>/home</code>和<code>/about</code>中同时显示, 而<code>/user</code>中不需要显示, 此时就需要用到 <strong>命名视图</strong></p><ol><li><p>修改路由</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义头部搜索框组件</span><span class="token keyword">var</span> SearchBar <span class="token operator">=</span> <span class="token punctuation">{</span>template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>头部搜索框&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 定义路由时, 不再只引入一个组件, components</span>            <span class="token comment" spellcheck="true">// 通过对象方式引入多个组件</span>            <span class="token comment" spellcheck="true">// default为必须项, 其他key可自定义, 与命名视图的name特性关联</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token keyword">default</span><span class="token punctuation">:</span> Home<span class="token punctuation">,</span>                searchbar<span class="token punctuation">:</span> SearchBar            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token keyword">default</span><span class="token punctuation">:</span> About<span class="token punctuation">,</span>                searchbar<span class="token punctuation">:</span> SearchBar            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>使用命名视图</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>home<span class="token punctuation">'</span>,query:{msg:<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>关于<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>user<span class="token punctuation">'</span>,params:{id:1}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 使用命名视图, name不设置默认为default --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchbar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h3><p>在组件中使用 <code>$route</code> 会使之与其对应路由形成 <strong>高度耦合</strong>，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性。使用 <code>props</code> 配置项将组件和路由解耦：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 模板直接使用id</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>    &lt;p>用户 {{id}}&lt;/p>    &lt;router-link :to="{name:'info'}">详情&lt;/router-link>    &lt;router-link :to="{name:'wallet'}">钱包&lt;/router-link>    &lt;router-view>&lt;/router-view>&lt;/div>`</span></span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 定义组件时, 通过props接收动态路径参数id</span>    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> User<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 设置路由时, 配置props: true, route.params将会被接收成为组件实例的属性</span>            props<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    path<span class="token punctuation">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>                    component<span class="token punctuation">:</span> Info                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    path<span class="token punctuation">:</span> <span class="token string">'wallet'</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'wallet'</span><span class="token punctuation">,</span>                    component<span class="token punctuation">:</span> Wallet                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="props的其他使用方法"><a href="#props的其他使用方法" class="headerlink" title="props的其他使用方法"></a>props的其他使用方法</h4><ol><li><p>对于包含 <strong>命名视图</strong> 的路由, 必须使用对象的形式给每个命名视图设置<code>props</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 为`/user/:id`路由添加一个订单命名视图</span><span class="token keyword">var</span> Order <span class="token operator">=</span> <span class="token punctuation">{</span>template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>订单&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义路由</span><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token keyword">default</span><span class="token punctuation">:</span> User<span class="token punctuation">,</span>                order<span class="token punctuation">:</span> Order            <span class="token punctuation">}</span><span class="token punctuation">,</span>            props<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 为每个命名视图配置props</span>                <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                order<span class="token punctuation">:</span> falue            <span class="token punctuation">}</span><span class="token punctuation">,</span>            children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    path<span class="token punctuation">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>                    component<span class="token punctuation">:</span> Info                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    path<span class="token punctuation">:</span> <span class="token string">'wallet'</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'wallet'</span><span class="token punctuation">,</span>                    component<span class="token punctuation">:</span> Wallet                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>给 <strong>没有命名视图</strong> 的路由可通过对象形式传递 <strong>静态参数</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Test <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义组件时接收并使用</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;h1>{{msg}}&lt;/h1>`</span></span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'/test'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> Test<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 传递静态参数</span>            props<span class="token punctuation">:</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span> <span class="token string">'hello'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>以 <strong>函数</strong> 形式返回<code>props</code>, 高级用法</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 跳转路由时, 传入params和query --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>user<span class="token punctuation">'</span>,params:{id:1},query:{num:520}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在模板中直接使用</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>        &lt;p>用户 {{id}}&lt;/p>        &lt;p>{{msg}}&lt;/p>        &lt;p>{{num}}&lt;/p>        &lt;router-link :to="{name:'info'}">详情&lt;/router-link>        &lt;router-link :to="{name:'wallet'}">钱包&lt;/router-link>        &lt;router-view>&lt;/router-view>    &lt;/div>`</span></span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 定义组件时, 接收路径参数id, 请求参数num以及静态参数msg</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">,</span> <span class="token string">'num'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span>                name<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>                components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span> User<span class="token punctuation">,</span>                    order<span class="token punctuation">:</span> Order                <span class="token punctuation">}</span><span class="token punctuation">,</span>                props<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 定义路由时通过函数方式返回props</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span> route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>                        id<span class="token punctuation">:</span> route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span>                        num<span class="token punctuation">:</span> route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>num<span class="token punctuation">,</span>                        msg<span class="token punctuation">:</span> <span class="token string">'hello'</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    order<span class="token punctuation">:</span> <span class="token boolean">false</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        path<span class="token punctuation">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>                        name<span class="token punctuation">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>                        component<span class="token punctuation">:</span> Info                    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                        path<span class="token punctuation">:</span> <span class="token string">'wallet'</span><span class="token punctuation">,</span>                        name<span class="token punctuation">:</span> <span class="token string">'wallet'</span><span class="token punctuation">,</span>                        component<span class="token punctuation">:</span> Wallet                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="命名视图传参"><a href="#命名视图传参" class="headerlink" title="命名视图传参"></a>命名视图传参</h3><p>在命名视图<code>&lt;router-view&gt;</code>组件中通过<code>v-bind:prop</code>可传递参数到对应视图组件中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchbar<span class="token punctuation">"</span></span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>头部搜索框<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> SearchBar <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>{{msg}}&lt;/div>`</span></span><span class="token punctuation">,</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="keep-alive组件和相关生命周期钩子"><a href="#keep-alive组件和相关生命周期钩子" class="headerlink" title="keep-alive组件和相关生命周期钩子"></a>keep-alive组件和相关生命周期钩子</h3><p>使用一个简单的路由系统介绍<code>&lt;keep-alive&gt;</code>组件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 使用导航组件和路由视图组件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-nav</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:item.name}<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 设置导航组件</span>    <span class="token keyword">var</span> MyNav <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'#my-nav'</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                list<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'主页'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'分类'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'topic'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'话题'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'cart'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'购物车'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'我的'</span><span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置路由视图组件, 每个组件创建后发一个请求获取数据</span>    <span class="token keyword">var</span> Home <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>主页&lt;/div>`</span></span><span class="token punctuation">,</span>        <span class="token keyword">async</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'./data/home.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> Category <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>分类&lt;/div>`</span></span><span class="token punctuation">,</span>        <span class="token keyword">async</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'./data/category.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> Topic <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>话题&lt;/div>`</span></span><span class="token punctuation">,</span>        <span class="token keyword">async</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'./data/topic.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> Cart <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>购物车&lt;/div>`</span></span><span class="token punctuation">,</span>        <span class="token keyword">async</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'./data/cart.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>我的&lt;/div>`</span></span><span class="token punctuation">,</span>        <span class="token keyword">async</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'./data/user.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置简单路由</span>    <span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> redirect<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Home<span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/category'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Category<span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/topic'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'topic'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Topic<span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/cart'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'cart'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Cart<span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> User<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义根实例</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        router<span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            MyNav        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>观察 Vue 官方提供的 <font color="yellowgreen"><strong>Devtools</strong></font> (谷歌浏览器插件)</p><p><img src="/images/devtools-home.png" alt="&quot;主页&quot;页面"></p><p><img src="/images/devtools-category.png" alt="&quot;我的&quot;页面"></p><p><img src="/images/devtools-topic.png" alt="&quot;话题&quot;页面"></p><p><img src="/images/devtools-cart.png" alt="&quot;购物车&quot;页面"></p><p><img src="/images/devtools-user.png" alt="&quot;我的&quot;页面"></p><p>每次切换路由, <code>&lt;Anoymous Component&gt;</code>匿名组件就是我们<code>&lt;router-view&gt;</code>展示的组件, 再看一下网络请求以及控制台打印结果</p><p><img src="/images/netrequest.png" alt="网络请求"></p><p>来回切换路由时, 会 <strong>重复</strong> (重新)发起请求, 这无疑会消耗占用用户的宽带, 而且, 重新发起请求证明组件的<code>created</code>钩子函数重新触发, 即组件重新渲染( <font color="tomato">re-render</font> ), 然而在大多情况下, 同一次会话( session )中, 页面一般不会有太大的改变, 即不需要重复请求获取数据, 此时我们需要用到<code>&lt;keep-alive&gt;</code>组件, 把组件缓存起来, 而不是让它重新渲染</p><p><span id="keepalive"></span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-nav</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- keep-alive组件和transition组件一样, 内部只能放置一个组件/元素 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>使用<code>&lt;keep-alive&gt;</code>组件后, 多次切换路由的 Devtools 和 控制台打印结果</p><p><img src="/images/keep-alive.png" alt="keep-alive组件效果"></p><p><strong>首次切换</strong> 路由时, 加载对应视图组件并 <strong>缓存</strong> 起来; <strong>再次切换</strong> 时, 当前视图组件进入<code>activeated</code>( <font color="yellowgreen">激活时调用</font> ), 已缓存的视图组件进入<code>deactivated</code>( <font color="yellowgreen">停用时调用</font> )</p><h2 id="Vue-webpack"><a href="#Vue-webpack" class="headerlink" title="Vue+webpack"></a>Vue+webpack</h2><p>webpack 是前端自动化构建工具, <strong>核心概念</strong>:</p><ol><li>入口( entry ), 工程的入口文件配置</li><li>输出( output ), 打包的输出文件配置</li><li>加载器( loader ), 用于处理不同类型的模块, 可拓展</li><li>插件( plugins ), 在打包过程中执行一些任务, 如清除打包目录, 复制静态文件等</li><li>模式( mode ), <code>development</code>开发模式, <code>production</code>生产模式</li></ol><p><font color="deepskyblue">在 webpack 中, 所有静态资源都可以被处理为一个模块, 包括图片、CSS、JS等等</font>.</p><h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><pre class=" language-node"><code class="language-node">npm i -g webpack webpack-cli</code></pre><h4 id="本地项目安装"><a href="#本地项目安装" class="headerlink" title="本地项目安装"></a>本地项目安装</h4><pre class=" language-node"><code class="language-node">npm init -ynpm i -D webpack webpack-cli</code></pre><h4 id="命令行打包"><a href="#命令行打包" class="headerlink" title="命令行打包"></a>命令行打包</h4><p><code>webpack 本地文件 --output 输出目录地址文件</code>, 其中<code>--output</code>可以简写成<code>-o</code>, 如</p><pre class=" language-node"><code class="language-node">webpack src/main.js -o dist/bundle.js</code></pre><h4 id="配置文件打包"><a href="#配置文件打包" class="headerlink" title="配置文件打包"></a>配置文件打包</h4><p>使用命令行打包需要我们每次都去编写并执行命令行, 所以一般我们执行配置文件<code>webpack.config.js</code>进行打包</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 配置文件仅支持common.js</span><span class="token comment" spellcheck="true">// 需要使用node内置模块进行路径拼接</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 封装方法</span><span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> paths<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 入口文件</span>    entry<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 输出目录文件</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>然后在命令行中, 可直接使用<code>webpack</code>执行打包</p><pre class=" language-node"><code class="language-node">webpack</code></pre><p>或者, 在<code>package.json</code>配置<code>script</code>脚本</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack"</span><span class="token punctuation">}</span></code></pre><p>然后在命令行中</p><pre class=" language-node"><code class="language-node">npm start</code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><code>main.js</code>就是我们整个项目打包的入口文件, 我们将会在这个文件中引入各种模块(包括图片, css, js), 我们只需在页面<code>index.html</code>引入<code>bundle.js</code>即可</p><h4 id="html-webpack-plugin插件"><a href="#html-webpack-plugin插件" class="headerlink" title="html-webpack-plugin插件"></a>html-webpack-plugin插件</h4><p>使用<code>html-webpack-plugin</code>插件, 能让webpack在打包过程中自动将<code>bundle.js</code>引入到<code>index.html</code>中</p><ol><li><p>安装</p><pre class=" language-node"><code class="language-node">npm i -D html-webpack-plugin</code></pre></li><li><p>使用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入插件</span><span class="token keyword">const</span> HtmlPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> paths<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 开发者模式</span>    mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>    entry<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 使用插件</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            filename<span class="token punctuation">:</span> <span class="token string">"index.html"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>运行<code>npm start</code></p></li></ol><h4 id="热更新服务"><a href="#热更新服务" class="headerlink" title="热更新服务"></a>热更新服务</h4><p>现在我们每次更新代码都需要手动运行命令行并刷新浏览器才能看到效果, 使用<code>webpack-dev-server</code>可以让 webpack 自动打包并刷新浏览器</p><ol><li><p>安装</p><pre class=" language-node"><code class="language-node">npm i -D webpack-dev-server</code></pre></li><li><p>修改<code>package.json</code></p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --open --port 3000 --hot"</span><span class="token punctuation">}</span></code></pre></li><li><p>运行<code>npm start</code></p></li></ol><h4 id="加载器-loader"><a href="#加载器-loader" class="headerlink" title="加载器 loader"></a>加载器 loader</h4><p>在 webpack 打包过程中, 所有静态资源都是通过 <strong>ES6模块</strong> 引入进<code>main.js</code>中实现打包的</p><h5 id="引入-js-模块文件"><a href="#引入-js-模块文件" class="headerlink" title="引入 js 模块文件"></a>引入 <font color="deepskyblue"><strong>js</strong></font> 模块文件</h5><p>引入js模块文件不需要加载器, 如</p><ol><li><p>编写一个工具类模块<code>src/js/utils.js</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 数组去重 * @param arr 需要去重的数组 * @returns 处理后的新数组 */</span><span class="token keyword">function</span> <span class="token function">duplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tar<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        tar<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> tar<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tar    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token punctuation">{</span>    duplicate<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> utils</code></pre></li><li><p>在<code>main.js</code>中引入模块文件并使用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> utils <span class="token keyword">from</span> <span class="token string">"./js/utils"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">duplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h5 id="引入-css-文件"><a href="#引入-css-文件" class="headerlink" title="引入 css 文件"></a>引入 <font color="deepskyblue"><strong>css</strong></font> 文件</h5><ol><li><p>下载<code>style-loader</code>,<code>css-loader</code></p><pre class=" language-node"><code class="language-node">npm i -D style-loader css-loader</code></pre></li><li><p>修改配置文件</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>    entry<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            filename<span class="token punctuation">:</span> <span class="token string">"index.html"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 编写所有加载器使用规则</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p><code>main.js</code>中引入css文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">"./css/reset.css"</span><span class="token punctuation">;</span></code></pre></li></ol><h5 id="引入less文件"><a href="#引入less文件" class="headerlink" title="引入less文件"></a>引入less文件</h5><ol><li><p>下载<code>less-loader</code>,<code>less</code></p><pre class=" language-node"><code class="language-node">npm i -D less less-loader</code></pre></li><li><p>添加<code>rules</code></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li><li><p><code>main.js</code>中引入less文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">"./less/style.less"</span><span class="token punctuation">;</span></code></pre></li></ol><h5 id="热更新index-html"><a href="#热更新index-html" class="headerlink" title="热更新index.html"></a>热更新index.html</h5><ol><li><p>下载<code>raw-loader</code></p><pre class=" language-node"><code class="language-node">npm i -D raw-loader</code></pre></li><li><p>添加<code>rules</code></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.html?$/i</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'raw-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li><li><p><code>main.js</code>中引入<code>./index.html</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">"./index.html"</span></code></pre></li></ol><h5 id="处理图片"><a href="#处理图片" class="headerlink" title="处理图片"></a>处理图片</h5><ol><li><p>下载<code>url-loader</code>,<code>html-withimg-loader</code></p><pre class=" language-node"><code class="language-node">npm i -D url-loader html-withimg-loader</code></pre></li><li><p>添加<code>rules</code></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif)$/i</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'url-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 处理html中的img标签需要html-withimg-loader(国人开发), 与raw-loader冲突, 只能使用一个</span><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.html?$/i</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'html-withimg-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li></ol><h6 id="url-loader更多配置"><a href="#url-loader更多配置" class="headerlink" title="url-loader更多配置"></a><strong>url-loader更多配置</strong></h6><p><code>url-loader</code>默认将图片路径转成<code>Base64</code>编码, 然而对于一些高清图, 转码起来耗时长且消耗性能多, 所以可以设置一个限制值( 单位字节 bytes ), 大于该值时, 会使用<code>file-loader</code>(默认)打包图片</p><ol><li><p>下载<code>file-loader</code></p><pre class=" language-node"><code class="language-node">npm i -D file-loader</code></pre></li><li><p>修改<code>rules</code>, 一般限制不超过 <strong>8kb</strong></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif)$/i</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>limit<span class="token punctuation">:</span> <span class="token number">8192</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li></ol><p>使用<code>Base64</code>编码时, 我们还可以设置<code>mimetype</code>将图片转成统一格式的<code>Base64</code>编码, 一般设为<code>image/png</code></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif)$/i</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>limit<span class="token punctuation">:</span> <span class="token number">8192</span><span class="token punctuation">,</span> mimetype<span class="token punctuation">:</span> <span class="token string">'image/png'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>当图片大小超过<code>limit</code>值时, 我们还可以设置<code>callback</code>用其他加载器打包图片</p><ol><li><p>下载<code>responsive-loader</code>,<code>jimp</code>(简单压缩), 如需压缩大量图片使用(<code>sharp</code>)</p><pre class=" language-node"><code class="language-node">npm i -D responsive-loader jimp</code></pre></li><li><p>修改<code>rules</code>, 压缩图片</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif)$/i</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>limit<span class="token punctuation">:</span> <span class="token number">8192</span><span class="token punctuation">,</span> callback<span class="token punctuation">:</span> <span class="token string">'responsive-loader'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li></ol><p>使用<code>file-loader</code>或者<code>responsive-loader</code>时, 默认文件名是文件内容的<code>MD5</code>哈希值和原拓展名, 可以设置<code>name</code>将图片文件的名字取代<code>MD5</code>哈希值</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif)$/i</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>limit<span class="token punctuation">:</span> <span class="token number">8192</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'[path][name].[ext]'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>为了解决缓存问题, 一般会带上<code>MD5</code>哈希值的前8位</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif)$/i</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>limit<span class="token punctuation">:</span> <span class="token number">8192</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'[path][name]-[hash:8].[ext]'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h5 id="使用Babel"><a href="#使用Babel" class="headerlink" title="使用Babel"></a>使用Babel</h5><p>为了让我们的js代码兼容各大浏览器, 使用babel将ES6, ES7语法转成ES5语法</p><ol><li><p>下载<code>babel</code>相关依赖</p><pre class=" language-node"><code class="language-node">npm i -D babel-loader@7.1.5 babel-core babel-preset-env babel-preset-stage-0 babel-plugin-transform-runtime</code></pre><p>a) <a href="mailto:`babel-loader@7.1.5" target="_blank" rel="noopener">`babel-loader@7.1.5</a>`, 指定加载器版本, 兼容性比较好</p><p>b) <code>babel-core</code>, babel核心库, 是<code>babel-loader</code>的依赖项</p><p>c) <code>babel-preset-env</code>和<code>babel-preset-stage-0</code>, babel预设, <code>stage</code>有4个阶段, 可按需加载对应阶段功能, 其中<code>0</code>涵盖所有阶段的功能</p><p>d) <code>babel-plugin-transform-runtime</code>, babel插件, 对不同js文件中引用同一模块, 该模块只打包一次</p></li><li><p>配置<code>rules</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// exclude 忽视npm或者bower下载的第三方库</span><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.m?js$/</span><span class="token punctuation">,</span> exclude<span class="token punctuation">:</span> <span class="token regex">/(node_modules|bower_components)/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'babel-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li><li><p>配置<code>.babelrc</code>文件</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"env"</span><span class="token punctuation">,</span>    <span class="token string">"stage-0"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"transform-runtime"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="Vue-Loader"><a href="#Vue-Loader" class="headerlink" title="Vue Loader"></a>Vue Loader</h3><p>Vue Loader 是一个 webpack 的加载器, 允许你以 <font color="yellowgreen"><strong>单文件组件(SFCs)</strong></font> 格式撰写 Vue 组件</p><h4 id="起步-1"><a href="#起步-1" class="headerlink" title="起步"></a>起步</h4><ol><li><p>下载<code>vue-loader</code>,<code>vue-style-loader</code>,<code>vue-template-complier</code>,<code>vue</code></p><pre class=" language-node"><code class="language-node">npm install -D vue-loader vue-style-loader vue-template-compiler vue</code></pre></li><li><p>配置<code>webpack.config.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> paths<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>    entry<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            filename<span class="token punctuation">:</span> <span class="token string">"index.html"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 必须使用插件, 让其他loader识别到vue的三种顶级语言块</span>        <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">// 能匹配到普通的`.css`文件以及`.vue`文件的`&lt;style>`</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif)$/i</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>limit<span class="token punctuation">:</span> <span class="token number">8192</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'[name]-[hash:8].[ext]'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 能匹配到普通的`.js`文件以及`.vue`文件的`&lt;script>`</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.m?js$/</span><span class="token punctuation">,</span> exclude<span class="token punctuation">:</span> <span class="token regex">/(node_modules|bower_components)/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'babel-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'vue-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol><h4 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h4><p><code>.vue</code>文件是一个自定义的文件类型, 用类 HTML 语法描述一个 Vue 组件, 一个<code>.vue</code>文件包含三种类型的顶级语言块<code>&lt;template&gt;</code>,<code>&lt;script&gt;</code>,<code>&lt;style&gt;</code></p><p><code>vue-loader</code> 会解析文件, 提取每个语言块, 如有必要会通过其它 loader 处理, 最后将他们组装成一个 ES6模块, 它的默认导出是一个 Vue.js <strong>组件选项的对象</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- .vue文件名建议使用大驼峰命名 --></span><span class="token comment" spellcheck="true">&lt;!-- 一个.vue文件只能有一个template --></span><span class="token comment" spellcheck="true">&lt;!-- template的内容将被vue-template-compiler预处理为JS渲染函数, 注入到script导出的组件中 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 必须有一个父容器包裹模板内容 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        App        <span class="token comment" spellcheck="true">&lt;!-- 模板内容 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 一个.vue文件只能有一个script --></span><span class="token comment" spellcheck="true">&lt;!-- 默认导出组件选项对象, 也可以导出 Vue.extend() 创建的扩展对象 --></span><span class="token comment" spellcheck="true">&lt;!-- 匹配/.\js$/的webpack模板规则 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 具名组件</span>        name<span class="token punctuation">:</span> <span class="token string">"App"</span>        <span class="token comment" spellcheck="true">/* 此处编写Vue实例的配置项 */</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 一个.vue文件可以包含多个style --></span><span class="token comment" spellcheck="true">&lt;!-- scoped表示该样式表是对该文件(组件)的元素生效 --></span><span class="token comment" spellcheck="true">&lt;!-- 子组件的根节点会受父组件的作用域样式表影响, 这样设计为了让父组件可以以布局角度出发 --></span><span class="token comment" spellcheck="true">&lt;!-- 父组件的作用域样式表不会渗透到子组件的模板内容中 --></span><span class="token comment" spellcheck="true">&lt;!-- v-html创建的DOM不会受作用域样式表影响 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/* 作用域样式表 */</span>    <span class="token comment" spellcheck="true">/* 可通过深度选择器渗透到子组件或者v-html创建的DOM中 */</span>    <span class="token comment" spellcheck="true">/* 深度选择器: 在正常的CSS选择器前加 >>> 或者 /deep/ */</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/* 全局样式表 */</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 默认匹配/\.css$/, 设置lang="less"后, 匹配/\.less$/ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/* 使用预处理器less编辑样式 */</span>    <span class="token comment" spellcheck="true">/* 注意: 使用less时, 深度选择器只能使用 /deep/ */</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p><span id="render"></span></p><h4 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h4>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS - 基础对象、数组、字符串</title>
      <link href="/2018/06/08/js-obj-arr-str/"/>
      <url>/2018/06/08/js-obj-arr-str/</url>
      
        <content type="html"><![CDATA[<h2 id="基础对象"><a href="#基础对象" class="headerlink" title="基础对象"></a>基础对象</h2><p>基础对象是JS中最常见的引用类型数据，描述一个物体（对象）的属性和方法</p><p>字面量对象书写方式: <code>var obj = {k:&#39;v&#39;,k1:&#39;v1&#39;...kn:&#39;vn&#39;}</code>, 其中<code>k:v</code>称为键值对( key:value )</p><font color="deepskyblue">注意点: <code>k</code>如果由多个单词组成建议用小驼峰式命名, 否则需要加上引号, 如<code>&quot;class-name&quot;</code></font><h3 id="基础对象的增删改查"><a href="#基础对象的增删改查" class="headerlink" title="基础对象的增删改查"></a>基础对象的增删改查</h3><p>声明一个对象, 以方便示例操作 <code>var p = {name: &quot;Tenderness&quot;, age:18, &quot;class-name&quot;: &quot;EC-2013&quot;}</code></p><ol><li><p>查询(访问)对象的成员(属性和方法)</p><p>a) 通过打点( <strong>.</strong> )访问, 如查询<code>p</code>对象的<code>name</code>属性, <code>var pName = p.name</code></p><p>b) 通过<code>[]</code>访问, <code>var pName = p[&#39;name&#39;]</code></p><font color="yellowgreen">注意点: <code>[]</code>功能性更强, 访问如<code>&quot;class-name&quot;</code>等属性时, 只能通过<code>[]</code>访问</font></li><li><p>给对象增加成员</p><p>a) 通过打点( <strong>.</strong> )增加, 如给<code>p</code>对象的<code>sex</code>属性, <code>p.sex = &#39;male&#39;</code></p><p>b) 通过<code>[]</code>增加, <code>p[&#39;sex&#39;] = &#39;male&#39;</code></p></li><li><p>修改对象的某成员</p><p>a) 通过打点( <strong>.</strong> )修改, 如修改<code>p</code>对象的<code>name</code>属性, <code>p.name = &quot;Mon&quot;</code></p><p>b) 通过<code>[]</code>修改, <code>p[&#39;name&#39;] = &quot;Mon&quot;</code></p></li><li><p>删除对象的某成员</p><p>a) 通过打点( <strong>.</strong> )删除, 如删除<code>p</code>对象的<code>sex</code>属性, <code>delete p.sex</code></p><p>b) 通过<code>[]</code>删除, <code>delete p[&#39;sex&#39;]</code></p></li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组就是一个存储若干数据的容器, 数组中的元素(数据)是有序的, 序号称为<font color="yellowgreen">索引值</font>, <font color="deepskyblue">索引值从<code>0</code>开始</font>, 数组有个<code>length</code>属性, 表示数组的长度(元素的个数)</p><p>字面量数组书写方式: <code>var arr = [&#39;el1&#39;,&#39;el2&#39;...&#39;eln&#39;]</code></p><h3 id="数组的增删改查"><a href="#数组的增删改查" class="headerlink" title="数组的增删改查"></a>数组的增删改查</h3><ol><li><p>查询数组中的元素, 通过<code>arr[index]</code>访问, 其中<code>index</code>为元素的索引值</p></li><li><p>修改数组中元素, 可以通过<code>arr[index] = newVal</code></p></li><li><p>给数组添加元素</p><p>a) 通过<code>arr[index] = val</code>添加, 其中<code>index</code>需要大于等于<code>arr.length</code>, <font color="tomato"><strong>不建议使用此方式</strong></font></p><p>b) 通过 <strong>数组相关方法</strong> 添加, <font color="yellowgreen"><strong>建议使用此方式</strong></font></p></li><li><p>删除数组中的元素</p><p>a) 通过<code>delete arr[index]</code>删除, 删除后<code>arr[index]</code>为<code>undefined</code>, 即仍然占据原位置, 不会改变数组的长度, <font color="tomato"><strong>不建议使用此方式</strong></font></p><p>b) 通过 <strong>数组相关方法</strong> 添加, <font color="yellowgreen"><strong>建议使用此方式</strong></font></p></li></ol><h3 id="数组相关方法"><a href="#数组相关方法" class="headerlink" title="数组相关方法"></a>数组相关方法</h3><table><thead><tr><th>方法</th><th>描述</th><th>返回值</th></tr></thead><tbody><tr><td>push()</td><td>向数组尾部追加一个或多个元素</td><td>新的长度</td></tr><tr><td>unshift()</td><td>向数组头部添加一个或多个元素</td><td>新的长度</td></tr><tr><td>pop()</td><td>删除(抛出)数组最后一个元素</td><td>被抛出的元素</td></tr><tr><td>shift()</td><td>删除(抛出)数组第一个元素</td><td>被抛出的元素</td></tr><tr><td>reverse()</td><td>逆转数组元素的排列顺序</td><td>数组的引用(堆内存地址)</td></tr><tr><td>sort()</td><td>对数组的元素进行排序</td><td>数组的引用(堆内存地址)</td></tr><tr><td>slice()</td><td>选取数组的一部分</td><td>选中部分组成的新数组</td></tr><tr><td>splice()</td><td>从数组添加或删除元素</td><td>被删除元素组成的新数组</td></tr><tr><td>concat()</td><td>合并2个或多个元素或数组</td><td>合并后的新数组</td></tr><tr><td>join()</td><td>将数组元素放入一个字符串中</td><td>结果字符串</td></tr><tr><td>toString()</td><td>将数组转成字符串</td><td>结果字符串</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> Object </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS - 数据转换和运算</title>
      <link href="/2018/06/01/js-data-transform/"/>
      <url>/2018/06/01/js-data-transform/</url>
      
        <content type="html"><![CDATA[<h2 id="转字符串类型"><a href="#转字符串类型" class="headerlink" title="转字符串类型"></a>转字符串类型</h2><p>其他类型转成字符串类型的方法: <code>String()</code>,<code>toString()</code></p><font color="tomato">除了基础对象外, 其他类型转字符串, 都是字符串的什么</font><pre class=" language-js"><code class="language-js"><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'Tenderness'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是 "[object Object]"</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'Tenderness'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是 "[object Object]"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是 "a,1"</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是 "a,1"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是 "null"</span><span class="token function">String</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是 "undefined"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是 "100"</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是 "100"</span></code></pre><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li><code>()</code>括号的另一种用法 — <font color="yellowgreen">表达式</font>, 让浏览器正确识别数据类型</li><li><code>null</code>和<code>undefined</code>没有<code>toString()</code>方法</li><li>数字的<code>toString()</code>方法还可以接受一个<code>number</code>类型的参数, 表示转<font color="yellowgreen">进制</font>, 如<code>(100).toString(2)</code>表示数字<code>100</code>(十进制)转成二进制的<code>1100100</code></li></ol><h2 id="转数字类型"><a href="#转数字类型" class="headerlink" title="转数字类型"></a>转数字类型</h2><p>其他类型转数字类型的方法: <code>Number()</code>, <code>parseInt()</code>,<code>parseFloat()</code></p><h3 id="三种方法的区别"><a href="#三种方法的区别" class="headerlink" title="三种方法的区别"></a>三种方法的区别</h3><ol><li><p><code>parseInt()</code>和<code>parseFloat()</code>一般用于将字符串(<code>string</code>类型)(如<code>&lt;input&gt;</code>标签的<code>value</code>属性)转成数字</p></li><li><p><code>Number()</code>转数字的机制: 先调用内置的<code>toString()</code>方法将参数转成字符串, 再将字符串转成数字, <font color="yellowgreen">非空且含有非数字字符的字符串</font>转数字永远是<code>NaN</code>, 因此<code>number([])</code>结果是<code>0</code>, <code>Number({})</code>结果是<code>NaN</code></p></li><li><p><code>parseInt()</code>和<code>parseFloat</code>会将参数字符串从左到右读取, 如果先读取到数字就转成对应精准度的数字, 先遇到其他则转成<code>NaN</code></p><pre class=" language-js"><code class="language-js"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'12px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是NaN</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'12px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是12</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'px12'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是NaN</span></code></pre></li></ol><h3 id="Number-转数字的特殊情况"><a href="#Number-转数字的特殊情况" class="headerlink" title="Number() 转数字的特殊情况"></a>Number() 转数字的特殊情况</h3><pre class=" language-js"><code class="language-js"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是0</span><span class="token function">Number</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是undefined</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是1</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果是0</span></code></pre><h2 id="转布尔类型"><a href="#转布尔类型" class="headerlink" title="转布尔类型"></a>转布尔类型</h2><p>其他类型转布尔类型的方法: <code>Boolean()</code></p><h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h3><ol><li>除了<code>&#39;&#39;</code>,<code>0</code>,<code>null</code>,<code>undefined</code>,<code>NaN</code>转布尔类型为<code>false</code>外, 其他数据类型转布尔类型都是<code>true</code></li><li><code>if</code>语句的条件表达中如果不使用比较运算符, 会默认调用<code>Boolean()</code>方法将表达式中数据转成布尔类型, 如果结果是<code>true</code>则条件成立</li></ol><h2 id="数据运算"><a href="#数据运算" class="headerlink" title="数据运算"></a>数据运算</h2><p>在提及数据运算前, 先说一下运算时2个特殊的数据</p><ol><li><code>NaN</code>特殊的数字类型, 全称 <font color="deepskyblue">Not a Number</font>, 和任何数据( <font color="tomato"><strong>包括本身</strong></font> )作比较时永远为<code>false</code>, 和任何数字相加永远是<code>NaN</code></li><li>字面量形式书写的基础对象, 如<code>{}</code>, 在浏览器控制台开头进行运算时, 会被认为是 <strong>代码块(block statement)</strong>, 所以<code>{}</code>就表示什么都没有; 如果在其他位置, 如<code>({})</code>, 才会被识别成基础对象</li></ol><h3 id="本节代码均书写在浏览器控制台"><a href="#本节代码均书写在浏览器控制台" class="headerlink" title="本节代码均书写在浏览器控制台"></a><font color="deep">本节代码均书写在浏览器控制台</font></h3><h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><ol><li><p><code>+</code>加号的作用: a) <font color="yellowgreen">数字求和</font> b) <font color="yellowgreen">字符串拼接</font></p><pre class=" language-js"><code class="language-js"><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">//数字求和 结果是 3</span><span class="token number">NaN</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//数字求和 结果是 NaN, 任何数字和NaN相加都是NaN</span><span class="token string">"I am "</span><span class="token operator">+</span><span class="token string">"Tenderness"</span> <span class="token comment" spellcheck="true">//字符串拼接 结果是 "I am Tenderness"</span></code></pre><p>当一个数字和一个字符串进行相加时, 会将数字转成字符串然后进行拼接</p><pre class=" language-js"><code class="language-js"><span class="token string">"str"</span> <span class="token operator">+</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">//结果是 "str123"</span></code></pre><p>当一个数字和一个基本类型数据进行相加时, 会把基本类型数据转成数字后进行相加</p><pre class=" language-js"><code class="language-js"><span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">//结果是 123</span>undefined <span class="token operator">+</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">//结果是 NaN</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">//结果是124</span><span class="token boolean">false</span> <span class="token operator">+</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">//结果是123</span></code></pre><p>当一个数字和一个引用类型数据进行相加时, 会把引用类型数据转成字符串后进行拼接</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">//结果是 "123"</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">//结果是 "1,2,3123"</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">//结果是 123, {}放在开头, 表示什么都没有</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">//结果是 "[object Object]123"</span><span class="token number">123</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//结果是 "123[object Object]"</span><span class="token number">NaN</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//结果是 "NaN[object Object]"</span></code></pre><p>当2个非数字基本类型数据进行相加时, 会把基本类型数据转成数字后进行相加</p><pre class=" language-js"><code class="language-js"><span class="token keyword">null</span> <span class="token operator">+</span> undefined <span class="token comment" spellcheck="true">//结果是 NaN</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//结果是 1</span></code></pre><p>当2个引用类型数据进行相加时, 会把引用类型数据转成字符串后进行拼接</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//结果是 "a,1[object Object]"</span></code></pre><p>当一个非数字基本类型数据和一个引用类型数据进行向加时, 会把2个数据转成字符串后进行拼接</p><pre class=" language-js"><code class="language-js"><span class="token keyword">null</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//结果是 "null[object Object]"</span>undefined <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//结果是 "undefined[object Object]"</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//结果是 "true[object Object]"</span><span class="token boolean">false</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//结果是 "false[object Object]"</span></code></pre><hr></li><li><p><code>-</code>减号, <code>*</code>乘号, <code>/</code>除号, <code>%</code>取余的作用: a) <font color="yellowgreen">数字对应运算</font> b) <font color="yellowgreen">将纯数字字符串转成运算后的数字</font></p><pre class=" language-js"><code class="language-js"><span class="token string">"1314"</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//结果是 1314, 利用这个特性, 可以快速的将纯数字字符串转成数字</span></code></pre><p>一个数字和其他类型数据进行减、乘、除、取余运算, 会把其他类型数据转成数字后进行运算</p><pre class=" language-js"><code class="language-js"><span class="token string">"Tenderness"</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//结果是 NaN</span><span class="token string">""</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//结果是 0</span><span class="token boolean">true</span> <span class="token operator">/</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//结果是 1</span><span class="token boolean">false</span> <span class="token operator">%</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//结果是 0</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//结果是 0</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//结果是 122</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//结果是 NaN</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//结果是 NaN</span></code></pre></li></ol><h3 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h3><h4 id="大小比较"><a href="#大小比较" class="headerlink" title="大小比较"></a>大小比较</h4><ol><li><p>2个数字比较, 比较的是他们的数值</p></li><li><p>数字与其他数据比较, 会将其他数据转成数字, 再作比较</p></li><li><p>2个字符串比较, 从左到右依次比较每个字符的Unicode数值, 直到出现差值或者其中一个字符串结束</p></li><li><p>字符串与非数字数据比较, 会将非数字数据转成字符串, 再作比较</p></li><li><p>任何数据和<code>NaN</code>比较结果都是<code>false</code></p><pre class=" language-js"><code class="language-js"><span class="token number">123</span> <span class="token operator">></span> <span class="token number">122</span> <span class="token comment" spellcheck="true">//数值比较, 结果是 true</span><span class="token number">123</span> <span class="token operator">></span> <span class="token string">"abc"</span> <span class="token comment" spellcheck="true">//"abc"转数字NaN, 结果是 false</span><span class="token string">"a"</span> <span class="token operator">></span> <span class="token string">"b"</span> <span class="token comment" spellcheck="true">//unicode值比较, 结果是 false</span><span class="token string">"ab"</span> <span class="token operator">></span> <span class="token string">"b"</span> <span class="token comment" spellcheck="true">//"a"和"b"的unicode值比较, 结果是 false</span><span class="token string">"ab"</span> <span class="token operator">></span> <span class="token string">"ac"</span> <span class="token comment" spellcheck="true">//"b"和"c"的unicode值比较, 结果是 false</span><span class="token string">"abc123"</span> <span class="token operator">></span> <span class="token string">"abc"</span> <span class="token comment" spellcheck="true">//"abc"字符串结束仍没有unicode差值, 比较字符串长度, 结果为 true</span><span class="token string">"abc"</span> <span class="token operator">></span> <span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//函数转成字符串"function fn () {}", "a"和"f"的unicode值比较, 结果是 false</span></code></pre></li></ol><h4 id="相等比较"><a href="#相等比较" class="headerlink" title="相等比较"></a>相等比较</h4><ol><li><p><code>===</code>和<code>!==</code>会先比较数据类型, 再比较数据值</p></li><li><p><code>==</code>和<code>!=</code>只比较数据值, 涉及隐性转换(数据转类型)</p><p>a) 布尔类型会先转成数字再比较, <code>true</code>转为<code>1</code>, <code>false</code>转为<code>0</code></p><p>b) 数字和字符串比较, 字符串会转成数字后再作比较</p><p>c) 引用类型和基本类型作比较时, 引用类型会转成字符串再作比较</p></li><li><p>2个引用类型数据比较的是引用值( 堆内存中的地址 )</p></li><li><p><code>null</code>或者<code>undefined</code>与其他数据作比较时, 不会发生转换</p></li><li><p><code>null == undefined</code> 结果为<code>true</code>, <code>null === undefined</code>结果为<code>false</code></p></li><li><p><code>NaN</code>和任何数据比较都不相等, 包括本身, 即<code>NaN == NaN</code>结果为<code>false</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Number </tag>
            
            <tag> Boolean </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript简介</title>
      <link href="/2018/05/20/js-intro/"/>
      <url>/2018/05/20/js-intro/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript的历史"><a href="#JavaScript的历史" class="headerlink" title="JavaScript的历史"></a>JavaScript的历史</h2><h3 id="什么是JavaScript"><a href="#什么是JavaScript" class="headerlink" title="什么是JavaScript?"></a>什么是JavaScript?</h3><p>JavaScript( 简称: JS )，是网景（<em>Netscape</em>）公司开发的一个浏览器直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。</p><h3 id="JS的诞生"><a href="#JS的诞生" class="headerlink" title="JS的诞生"></a>JS的诞生</h3><p>网络的时代经历过<font color="yellowgreen"> <strong>调制解调器</strong> </font>时代（猫，电话线），网速非常慢，用户提交数据都是<font color="yellowgreen"> 直接传给服务器 </font>，倘若出错，会先经过服务器判断处理，在返回到客户端，用户重新填写提交数据，<font color="tomato">服务器压力大，用户体验也非常不好</font>。</p><h3 id="JS的运行"><a href="#JS的运行" class="headerlink" title="JS的运行"></a>JS的运行</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li><font color="tomato">需要JavaScript引擎</font></li><li><font color="tomato">不需要经过编译，按顺序执行</font></li></ol><p><strong>浏览器能识别JS代码是因为浏览器自带JavaScriot引擎</strong></p><h4 id="常见浏览器及内核"><a href="#常见浏览器及内核" class="headerlink" title="常见浏览器及内核"></a>常见浏览器及内核</h4><table><thead><tr><th>浏览器</th><th>内核</th><th>CSS兼容前缀</th></tr></thead><tbody><tr><td>Chrome</td><td>webkit/Blink</td><td>-webkit-</td></tr><tr><td>FIrefox</td><td>Gecko</td><td>-moz-</td></tr><tr><td>Opera</td><td>Presto</td><td>-o-</td></tr><tr><td>Safari</td><td>webkit</td><td>-webkit-</td></tr><tr><td>IE</td><td>Tradient</td><td>-ms-</td></tr></tbody></table><p><strong>浏览器内核的作用就是提供 <font color="yellowgreen">渲染机制</font>，其中Chrome浏览器提供 <font color="tomato">JSV8引擎</font></strong></p><ol><li><strong>渲染引擎</strong>: 主要负责获取页面内容和排版渲染页面</li><li><strong>JS引擎</strong>: 解析和执行JS来实现页面的动态效果, 以及交互内容</li></ol><p>PS：大部分 <font color="deepskyblue"><strong>国产浏览器</strong></font> 使用的 <font color="tomato">双核</font> 其实指的是Chrome的 <font color="deep">Webkit/Blink</font> 内核以及IE的 <font color="deep">Tradient</font> 内核</p><h3 id="JS的组成"><a href="#JS的组成" class="headerlink" title="JS的组成"></a>JS的组成</h3><ol><li><font color="tomato"><strong>ECMAScript</strong></font>（简称ES, 欧洲计算机脚本语言组织）制定了JS的 <font color="yellowgreen">语法</font> 和 <font color="yellowgreen">基本对象</font></li><li><font color="tomato"><strong>BOM</strong></font>，<font color="yellowgreen">浏览器对象</font></li><li><font color="tomato"><strong>DOM</strong></font>，<font color="yellowgreen">文档对象</font>（其实就是W3C的标准，网页的API）</li></ol><h3 id="JS的目的"><a href="#JS的目的" class="headerlink" title="JS的目的"></a>JS的目的</h3><ol><li>控制web标准（HTML+CSS+JS）的前两者（HTML+CSS）</li><li>可以实现相关动画</li><li>减轻服务器的压力，增强用户体验</li></ol><h3 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h3><p>JavaScript 和 Java 没有任何关系，相当于雷峰塔与雷锋的关系</p><h2 id="JS的使用方式"><a href="#JS的使用方式" class="headerlink" title="JS的使用方式"></a>JS的使用方式</h2><ol><li><p><strong>行内JS</strong>，写在元素标签中，<font color="tomato">只能绑定事件</font></p></li><li><p><strong>内嵌JS</strong>，写在<code>&lt;script&gt;</code>标签中</p></li><li><p><strong>外联JS</strong>，写在JS文件中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js文件url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/* 使用引用框架(JS文件)的功能 */</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li><p>引入外联JS文件的<code>&lt;script&gt;</code>标签内部如果有JS代码，该部分代码不会执行</p></li><li><p><code>&lt;script&gt;</code>标签可以书写在HTML文件中的任何位置，但 <font color="deepskyblue">建议书写在<code>&lt;body&gt;</code>元素的结束标签前</font>，原因：JS代码自上而下执行，放在内容结构中或者前面会影响网页的加载速度</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 网页的内容结构 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre></li><li><p>内嵌JS的<code>&lt;script&gt;</code>标签写在<code>&lt;body&gt;</code>元素前时，需要给<code>window</code>对象绑定<code>loaded</code>事件才能进行DOM操作（如获取HTML文档中的元素标签）</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 网页元数据 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        window<span class="token punctuation">.</span>onloaded <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* JS代码 */</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="JS相关概念"><a href="#JS相关概念" class="headerlink" title="JS相关概念"></a>JS相关概念</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量就是变化的量，是一个储存内容或者数据的容器</p><font color="tomato">在书写JS代码时，能用变量就别用常量</font><p>注意点：</p><ol><li>JS代码中，变量用<code>var</code>定义，<font color="yellowgreen">弱类型变量</font></li><li><font color="deep">先声明再使用</font>，否则会出现代码报错，后面所有代码不能执行</li><li><font color="tomato">变量名不能以数字或者特殊字符开头（$和_除外）</font></li><li><font color="tomato">变量名不能使用JS关键字或者保留字</font></li><li>定义多个变量时可以只书写一个声明变量var，用逗号隔开，末尾加分号</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> 变量名<span class="token number">1</span> <span class="token operator">=</span> 储存的内容或者数据<span class="token number">1</span><span class="token punctuation">,</span>        变量名<span class="token number">2</span> <span class="token operator">=</span> 储存的内容或者数据<span class="token number">2</span><span class="token punctuation">,</span>        变量名n <span class="token operator">=</span> 储存的内容或者数据n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//等同于</span>    <span class="token keyword">var</span> 变量名<span class="token number">1</span> <span class="token operator">=</span> 储存的内容或者数据<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> 变量名<span class="token number">2</span> <span class="token operator">=</span> 储存的内容或者数据<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> 变量名n <span class="token operator">=</span> 储存的内容或者数据n<span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="5大类"><a href="#5大类" class="headerlink" title="5大类"></a>5大类</h4><ul><li><p><strong>string</strong> 字符串类型</p></li><li><p><strong>number</strong> 数字类型</p></li><li><p><strong>boolean</strong> 布尔型（只有<code>true</code>和<code>false</code>2个值）</p></li><li><p><strong>Object</strong> 对象型 （<code>null</code>空对象指针、<code>Function</code>函数、<code>Object</code>基本对象、<code>Array</code>数组 ……）</p></li><li><p><strong>undefined</strong> 未定义（只有<code>undefined</code>一个值）</p><p>注意点：</p><p>a）声明变量不赋值, 该变量就是<code>undefined</code></p><p>b）可以用<code>typeof(数据)</code>检测数据类型，返回的是 <font color="deep">类型结果的字符串</font></p></li></ul><h5 id="注意点：undefined是null的衍生"><a href="#注意点：undefined是null的衍生" class="headerlink" title="注意点：undefined是null的衍生"></a>注意点：<code>undefined</code>是<code>null</code>的衍生</h5><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">null</th><th style="text-align:center">undefined</th></tr></thead><tbody><tr><td style="text-align:center">定义</td><td style="text-align:center">空对象指针</td><td style="text-align:center">声明变量未初始化就是undefined</td></tr><tr><td style="text-align:center">typeof</td><td style="text-align:center">object</td><td style="text-align:center">undefined</td></tr><tr><td style="text-align:center">Boolean</td><td style="text-align:center">false</td><td style="text-align:center">false</td></tr></tbody></table><h4 id="类型分类"><a href="#类型分类" class="headerlink" title="类型分类"></a>类型分类</h4><ul><li><strong>基本数据类型</strong><ul><li>string</li><li>number</li><li>boolean</li><li>null</li><li>undefined</li></ul></li><li><strong>引用数据类型</strong><ul><li><strong>对象</strong><ol><li>Array 数组</li><li>Object 基础对象</li><li>Date 日期对象</li><li>Math 数学对象</li><li>Error 错误对象</li><li>RegExp 正则对象</li></ol></li><li><strong>函数</strong><ul><li>Function 函数(功能/方法)</li></ul></li><li><strong>包装数据类型</strong><ol><li>String</li><li>Number</li><li>Boolean</li></ol></li></ul></li></ul><h4 id="数据类型的内存分布"><a href="#数据类型的内存分布" class="headerlink" title="数据类型的内存分布"></a>数据类型的内存分布</h4><ol><li><font color="yellowgreen">基本数据类型</font> 在内存是放在<font color="tomato"><strong>栈</strong></font>中，变量和数据存放在一起</li><li><font color="yellowgreen">引用数据类型</font> 在内存是放在<font color="tomato"><strong>堆</strong></font>中，<font color="deepskyblue">指针</font> (变量)存放在 <strong>栈</strong> 中通过 <strong>堆</strong> 中 <font color="deepskyblue">数据</font> 的 <font color="deep"><strong>内存地址</strong></font> 和变量产生联系</li></ol><font color="tomato">注意点：但凡看见引用数据类型就需要在堆内存中开辟空间</font><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>运算符分三大类：比较运算符，逻辑运算符，算术运算符</p><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><font color="tomato">比较运算符会产生（返回）布尔值</font><ol><li><code>==</code> 相等，<font color="deep">可以比较不同的数据类型,涉及隐式类型转换</font></li><li><code>!=</code> 不等</li><li><code>===</code> 全等，<font color="deep">先比较类型，在比较值</font></li><li><code>!==</code> 不全等</li><li><code>&lt;</code> 小于</li><li><code>&lt;=</code> 小于等于</li><li><code>&gt;</code>大于</li><li><code>&gt;=</code> 大于等于</li></ol><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><font color="tomato">一般为了配合比较运算符</font><ol><li><code>&amp;&amp;</code> 且</li><li><code>||</code> 或</li><li><code>!</code> 非，<font color="deep">将布尔值取反</font></li></ol><h5 id="返回值问题"><a href="#返回值问题" class="headerlink" title="返回值问题"></a>返回值问题</h5><ul><li><code>&amp;&amp;</code>结果为<code>true</code>时，返回 <font color="yellowgreen">最后一个</font> 结果为<code>true</code>的值，结果为<code>false</code>时，返回 <font color="yellowgreen">第一个</font> 结果为<code>false</code>的值</li><li><code>||</code>结果为<code>true</code>时，返回 <font color="yellowgreen">第一个</font> 结果为<code>true</code>的值，结果为<code>false</code>时，返回 <font color="yellowgreen">最后一个</font> 结果为<code>false</code>的值</li></ul><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><ol><li><code>+</code> 加</li><li><code>-</code> 减</li><li><code>*</code> 乘</li><li><code>/</code> 除</li><li><code>%</code> 取余</li></ol><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><ol><li><code>[]</code>获取对象成员/数组元素（如 <code>arr[index]</code>，<code>obj[key]</code>）；<code>.</code>获取对象成员（如<code>obj.key</code>）；<code>()</code>提高运算优先级，函数执行（调用）</li><li>一元运算符 <code>++</code>、<code>--</code>、<code>!</code></li><li>算术运算符，先<code>*</code>、<code>/</code>、<code>%</code>后<code>+</code>、<code>-</code></li><li>关系运算符<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code></li><li>相等运算符<code>==</code>、<code>!=</code>、<code>===</code>、<code>!==</code></li><li>逻辑运算符，先<code>&amp;&amp;</code>后<code>||</code></li><li>赋值运算符<code>=</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript introduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - 背景和边框</title>
      <link href="/2018/04/01/css-bg-bd/"/>
      <url>/2018/04/01/css-bg-bd/</url>
      
        <content type="html"><![CDATA[<h2 id="background属性"><a href="#background属性" class="headerlink" title="background属性"></a>background属性</h2><p>整合属性, 整合了所有背景属性</p><p>语法: <code>background: bg-color bg-image position/bg-size bg-repeat bg-origin bg-clip bg-attachment</code></p><p>注意点:</p><ol><li><font color="deepskyblue">上述属性值, 均可省略, 表示使用默认值</font></li><li><font color="deepskyblue">一个元素可设置多个背景, 用逗号( <strong>,</strong> )分隔</font></li><li><font color="deepskyblue">设置多个背景会出现 <font color="yellowgreen">背景层叠</font> 效果, 放在最前的背景是顶层背景</font></li><li><font color="deepskyblue">为了避免背景覆盖问题, 建议带<code>bg-color</code>( <font color="yellowgreen">背景色</font> )/ <font color="yellowgreen">非透明</font> 的背景图放在最后面</font></li></ol><h3 id="background-color"><a href="#background-color" class="headerlink" title="background-color"></a>background-color</h3><p>设置背景色, 语法: <code>backgound-color: &lt;color&gt;|none|transparent</code></p><font color="deepskyblue">注意点: 背景的总大小是盒模型的大小( <font color="yellowgreen">包括内边距和边框</font> )</font><h3 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h3><p>设置背景图片, 语法: <code>background-image: url(&#39;图片URL&#39;)</code></p><p>注意点: </p><ol><li><font color="deepskyblue">背景图片默认 <font color="yellowgreen">起始放置</font> 在元素的 <font color="yellowgreen">左上角(边框内)</font> </font></li><li><font color="deepskyblue">如果图片原大小大于背景区域大小则 <font color="yellowgreen">裁剪</font>, 否则 <font color="yellowgreen">平铺(平铺至边框)</font></font></li></ol><h3 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h3><p>设置背景图片的起始位置, 语法: <code>background-position: &lt;horizeontal&gt; [&lt;vertical&gt;]</code></p><p>水平方向取值: <code>&lt;length&gt;</code>、<code>&lt;percentage&gt;</code>、<code>left</code>、<code>center</code>、<code>right</code></p><p>垂直方向取值: <code>&lt;length&gt;</code>、<code>&lt;percentage&gt;</code>、<code>top</code>、<code>center</code>、<code>bottom</code></p><p>注意点: </p><ol><li><font color="deepskyblue">取特殊属性值(<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>)时, 只设一个方向, 另外一个方向默认为<code>center</code></font></li><li><font color="deepskyblue">设置<code>&lt;length&gt;</code>或者<code>&lt;percentage&gt;</code>时, 只设一个值表示给水平方向设值, 而垂直方向居中(<code>center</code>)</font></li></ol><h3 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h3><p>设置背景图片的大小, 语法: <code>background-size: &lt;length&gt;|&lt;percentage&gt;|cover|contain</code></p><p>注意点: </p><ol><li><font color="deepskyblue">设置<code>&lt;length&gt;</code>或者<code>&lt;percentage&gt;</code>时均有水平和垂直方向两值, 省略垂直方向表示根据图片原大小等比缩放</font></li><li><font color="deepskyblue"><code>cover</code> 表示图片将等比缩放成完全 <font color="yellowgreen">覆盖</font> 背景区域的最小大小( <font color="yellowgreen">minSize</font> )</font></li><li><font color="deepskyblue"><code>contain</code> 表示图片将等比缩放成 <font color="yellowgreen">适合</font> 背景区域的最大大小( <font color="yellowgreen">maxSize</font> )</font><p><img src="/images/bgz.png" alt="background-size"></p></li></ol><h3 id="background-repeat"><a href="#background-repeat" class="headerlink" title="background-repeat"></a>background-repeat</h3><p>设置背景图片的平铺效果, 语法: <code>background-repeat: val</code></p><p>属性值:</p><ol><li><code>repeat</code> 默认值, 向水平垂直方向重复</li><li><code>repeat-x</code> 只向水平方向重复</li><li><code>repeat-y</code> 只向垂直方向重复</li><li><code>no-repeat</code> 不会重复</li></ol><h3 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h3><p>设置背景起始的定位位置, 语法: <code>background-origin: val</code></p><p>属性值:</p><ol><li><p><code>padding-box</code> 默认值, 相对内边距左上角进行定位</p></li><li><p><code>border-box</code> 相对边框左上角进行定位</p></li><li><p><code>content-box</code> 相对于内容左上角区域进行定位</p><p><img src="/images/bgo.png" alt="background-origin"></p></li></ol><h3 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h3><p>设置背景的绘制区域, 语法: <code>background-clip: val</code></p><p>属性值:</p><ol><li><p><code>border-box</code> 默认值, 绘制区域是整个盒子模型</p></li><li><p><code>padding-box</code> 绘制区域在边框内</p></li><li><p><code>content-box</code> 只绘制内容区域</p><p><img src="/images/bgclip.png" alt="background-clip"></p></li></ol><h3 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h3><p>设置背景图片依附(跟随), 语法: <code>background-attachment: val</code></p><p>属性值:</p><ol><li><code>scroll</code> 默认值, 依附与元素(元素滚动时, 背景图片滚动)</li><li><code>fixed</code> 依附于浏览器(视口), 即固定在视口中</li><li><code>local</code> 依附于元素内容(内容发生滚动时, 背景图片跟随滚动)</li></ol><font color="deepskyblue">注意点, 设置为<code>fixed</code>后, 背景图片的<code>background-position</code>将相对视口进行定位(固定定位)</font><p><font color="tomato"><strong>CLICK HERE !!!</strong></font> <a href="https://bg-attachment-demo.github.io" target="_blank" rel="noopener">background-attachment示例demo</a></p><h2 id="background-image属性与img元素标签"><a href="#background-image属性与img元素标签" class="headerlink" title="background-image属性与img元素标签"></a>background-image属性与img元素标签</h2><p><img src="/images/background-image.png" alt="背景图片和图片元素对比"></p><h2 id="border-image属性"><a href="#border-image属性" class="headerlink" title="border-image属性"></a>border-image属性</h2><p>语法: <code>border-image : source [slice] [/ width /] [/ outset /] [repeat]</code></p><p>注意点: </p><ol><li><font color="deepskyblue">使用<code>border-image</code>前需要设置<code>border</code>属性(起码含 <font color="yellowgreen">width</font> 和 <font color="yellowgreen">style</font> 值)</font></li><li><code>width</code>和<code>outset</code>在整合属性中设置时, 需要用 <code>/</code> 按顺序连接</li><li><font color="deepskyblue"><code>source</code> 是必须值, 其他不设置则使用默认值(具体看下文)</font></li></ol><h3 id="border-image-source"><a href="#border-image-source" class="headerlink" title="border-image-source"></a>border-image-source</h3><p>设置边框图片的路径, 语法: <code>border-image-source: url(&#39;边框图片URL&#39;)</code></p><h3 id="border-image-slice"><a href="#border-image-slice" class="headerlink" title="border-image-slice"></a>border-image-slice</h3><p>设置边框图片的裁剪位置, 语法: <code>border-image-slice: val</code></p><p>注意点:</p><ol><li><font color="deepskyblue"><font color="yellowgreen">没有单位</font>, 默认计量单位为(px), <font color="yellowgreen">支持百分比</font>, 参照物是边框图片的大小, 默认值<code>100%</code>, 表示不裁剪</font></li><li><font color="deepskyblue">可接收 <font color="yellowgreen">1 ~ 4 个参数</font>, 规则与<code>margin</code>/<code>padding</code>一样, 表示<font color="yellowgreen">上、右、下、左</font>，画出4条线， 裁剪出一个九宫格区域</font><p><img src="/images/bd-slice.jpg" alt="border-slice"></p></li><li><font color="deepskyblue">默认裁减掉中间部分, 使用<code>fill</code>关键词, 则可填充中间部分, 类似于<code>background-image</code></font></li></ol><h3 id="border-image-width"><a href="#border-image-width" class="headerlink" title="border-image-width"></a>border-image-width</h3><p>设置图片边框的宽度( <font color="yellowgreen">控制边框图片的绘制区域</font>, 语法: <code>border-image-width: &lt;length&gt;</code></p><p>注意点:</p><ol><li><font color="deepskyblue">默认计算值与<code>border-width</code>一样</font></li><li><font color="deepskyblue">可接收 <font color="yellowgreen">1 ~ 4 个参数</font>, 规则与<code>margin</code>/<code>padding</code>一样</font></li><li><font color="deepskyblue">支持<code>&lt;number&gt;</code>或者<code>&lt;percentage&gt;</code>参照<code>border-width</code>进行计算</font></li></ol><h3 id="border-image-outset"><a href="#border-image-outset" class="headerlink" title="border-image-outset"></a>border-image-outset</h3><p>设置图片边框与变宽的偏移量( <font color="yellowgreen">向外扩散</font> ), 语法: <code>border-image-outset: &lt;length&gt;</code></p><p>注意点:</p><ol><li><font color="deepskyblue">默认值为<code>0</code>, 不做扩散</font></li><li><font color="deepskyblue">仅支持正值, 可接收<font color="yellowgreen">1 ~ 4 个参数</font>, 规则与<code>margin</code>/<code>padding</code>一样</font></li><li><font color="deepskyblue">支持<code>&lt;number&gt;</code>, 参照<code>border-width</code>进行计算</font></li></ol><h3 id="border-image-repeat"><a href="#border-image-repeat" class="headerlink" title="border-image-repeat"></a>border-image-repeat</h3><p>设置边框图片的可重复性, 语法: <code>border-image-repeat: val</code></p><p>属性值:</p><ol><li><code>stretch</code> 默认值, 拉伸图像填充区域</li><li><code>repeat</code> 平铺(重复)填充区域</li><li><code>round</code> 类似<code>repeat</code> 无法完整平铺所有图像, 则对图像进行缩放( <font color="yellowgreen">凑整</font> )以适应区域( <font color="deep"><strong>常用</strong></font> )</li></ol><p>注意点: <font color="deepskyblue">支持接收 <font color="yellowgreen">2</font> 参数, 表示分别设置水平和垂直方向的重复性</font></p><h2 id="border-image渲染规则"><a href="#border-image渲染规则" class="headerlink" title="border-image渲染规则"></a>border-image渲染规则</h2><p>由<code>border-image-slice</code>划分出的九个区域分别 <font color="deep"><strong>对应渲染</strong></font><code>border</code>边框的九个区域(在区域内进行拉伸、重复、扩散等操作)</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> background </tag>
            
            <tag> border-image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3动画</title>
      <link href="/2018/03/24/css-animation/"/>
      <url>/2018/03/24/css-animation/</url>
      
        <content type="html"><![CDATA[<h2 id="transform属性"><a href="#transform属性" class="headerlink" title="transform属性"></a>transform属性</h2><p>基本语法:<code>transform: none | transform-functions</code></p><font color="tomato">注意: 转换不会改变元素实际占有位置, 即不会改变页面原有布局</font><h3 id="transform-functions类型"><a href="#transform-functions类型" class="headerlink" title="transform-functions类型"></a>transform-functions类型</h3><h4 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h4><ol><li><p>平移: <code>translate(left [, top])</code></p><ul><li><font color="deepskyblue">*top值不设值, 只做水平方向平移, 支持负值, 需要带单位</font> </li><li><font color="deep">*当单位是百分比(%)时, 百分比的参照对象时当前元素的宽高</font></li></ul></li><li><p>缩放: <code>scale(水平 [, 垂直])</code> </p><font color="deepskyblue">*只设一个值表示水平和垂直方向缩放相同倍数, 取值范围 [0, +无穷)</font></li><li><p>轴旋转: <code>rotate(value)</code> </p><font color="deepskyblue">*支持单位: deg, rad, turn(一圈), grad(百分度), 转换后会改变轴方向</font></li><li><p>轴倾斜: <code>skew(x轴, y轴)</code></p><p>使用比较少, 仅支持X轴和Y轴</p></li></ol><h4 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h4><p>比2D转换多了个Z轴, 可在在2D转换类型名字后面接着轴名字单独设置每一条轴的转换, 如transform: translateX(100px) 表示沿着沿着X轴向右平移100px</p><ul><li><font color="tomato">*也可以通过类型名称接3d设置一个类型的转换, 如transform: translate3d(100px, 100px, 100px), 表示沿着3条轴的正方向平移100px</font></li><li><font color="deep">*在移动端设备, 3D转换会开启GPU加速, 从而减轻CPU的消耗, 提高性能</font> </li></ul><h3 id="3D透视效果-远小近大效果"><a href="#3D透视效果-远小近大效果" class="headerlink" title="3D透视效果(远小近大效果)"></a>3D透视效果(远小近大效果)</h3><ol><li><p><code>transform-style: peserve-3d</code> </p><font color="deepskyblue">*添加在祖先元素样式上, 让子元素在3D空间呈现</font></li><li><p><code>perspective: 500px</code></p><font color="deepskyblue">*眼睛, 站在哪看3D元素, 设在祖先元素上, 取值300-500px最佳</font></li><li><p><code>perspective-origin: 水平 垂直</code></p><p>*透视基准线, left, right, bottom, top, center</p></li><li><p><code>backface-visibility: hidden</code></p><font color="deepskyblue">*背面隐藏, 设置在转换(子)元素上, 默认visible(显示)</font></li></ol><h3 id="设置轴原点"><a href="#设置轴原点" class="headerlink" title="设置轴原点"></a>设置轴原点</h3><p><code>transform-origin: x轴 y轴 [z轴]</code></p><font color="deepskyblue">*默认在元素中心点</font><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><font color="tomato" size="4">transform-functions 组合使用时, 注意轴方向的改变</font><h2 id="transition属性"><a href="#transition属性" class="headerlink" title="transition属性"></a>transition属性</h2><p>过渡: 元素从一个状态到另一个状态</p><p>过渡三要素: </p><p>a) 需要执行过渡的属性 </p><p>b) 过渡属性的属性值必须发生变化 </p><p>c) 过渡效果的持续时长</p><p>基本语法: <code>transition: property duration [timing-function] [delay]</code></p><h3 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h3><p>设置需要过渡效果的属性</p><p>语法:<code>transition-property: none|all|property</code></p><p><strong>属性值</strong></p><ol><li><code>none</code> 表示没有属性获得过渡效果</li><li><code>al</code> 表示所有属性获得过渡效果</li><li><code>property</code> 用来定义需要过渡的CSS属性名称列表, 列表用逗号(,)隔开</li></ol><h3 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h3><p>设置过渡效果持续的时长</p><p>语法: <code>transition-duration : time</code></p><font color="deepskyblue">*默认值为0, 表示没有过渡效果, 设置值时需要带单位(s, ms)</font><h3 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h3><p>设置过渡效果的速度曲线</p><p>语法: <code>transition-timing-function : val</code></p><p><strong>属性值</strong></p><ol><li><code>ease</code> 默认值,  先慢后快再慢</li><li><code>ease-in</code> 先慢后快</li><li><code>ease-out</code> 先快后慢</li><li><code>ease-in-out</code> 先快后慢再快</li><li><code>linear</code> 匀速</li><li><code>cubic-bezier(n, n, n, n)</code> 自定义速度曲线</li></ol><h3 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h3><p>设置延时效果</p><p>语法: <code>transition-delay : time</code></p><h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h3><p>单独设置多个属性的过渡效果时, 过渡列表用逗号( <strong>,</strong> )分隔</p><pre class=" language-css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> width <span class="token number">5</span>s, height <span class="token number">10</span>s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token property">transition-property</span><span class="token punctuation">:</span> width, height<span class="token punctuation">;</span><span class="token property">transition-duration</span><span class="token punctuation">:</span> <span class="token number">5</span>s, <span class="token number">10</span>s<span class="token punctuation">;</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> width, height, <span class="token number">10</span>s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token property">transition-property</span><span class="token punctuation">:</span> width, height<span class="token punctuation">;</span><span class="token property">transition-duration</span><span class="token punctuation">:</span> <span class="token number">10</span>s<span class="token punctuation">;</span></code></pre><font color="tomato">其他属性用法一样</font><h2 id="animation属性"><a href="#animation属性" class="headerlink" title="animation属性"></a>animation属性</h2><p>设置元素的执行的动画, 语法: <code>animation : name duration [timing-function] [delay] [iteration-count] [direction]</code></p><h3 id="animation-name"><a href="#animation-name" class="headerlink" title="animation-name"></a>animation-name</h3><p>设置关键帧动画(@keyframes)的名字</p><p>语法: <code>animation-name : keyframename|none</code></p><h3 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h3><p>定义关键帧动画</p><p>语法:</p><ol><li><p>只设置起始状态和结束状态</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> keyframename</span> <span class="token punctuation">{</span>    <span class="token selector">form </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 起始样式 */</span> <span class="token punctuation">}</span>    <span class="token selector">to </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 结束样式 */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>设置多个关键帧</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> keyframename</span> <span class="token punctuation">{</span>    <span class="token selector">0% </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 起始样式 */</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* percentage { key-styles } */</span>    <span class="token selector">100% </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 结束样式 */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="animation-duration"><a href="#animation-duration" class="headerlink" title="animation-duration"></a>animation-duration</h3><p>设置动画周期时长</p><p>语法: <code>animation : time</code></p><font color="deepskyblue">默认值为<code>0</code>, 表示不会播放动画</font><h3 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h3><p>设置动画的动画曲线</p><p>语法: <code>animation-timing-function : val</code></p><font color="deepskyblue">取值与过渡的<code>transition-timing-function</code>相同</font><h3 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a>animation-delay</h3><p>设置动画的延迟效果</p><p>语法: <code>animation-delay : time</code></p><font color="deepskyblue">支持负值, 表示跳过开头对应时长</font><h3 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a>animation-iteration-count</h3><p>设置动画播放多少次</p><p>语法: <code>animation-iteration-count : number | infinite</code></p><font color="deepskyblue">默认值为<code>1</code>, 表示只播放一次; 设为<code>infinite</code>表示循环播放</font><h3 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h3><p>设置动画周期播放行为表现(方向)</p><p>语法: <code>animation-direction : val</code></p><font color="deepskyblue">当<code>animation-iteration-count</code>不为<code>1</code>时, 该属性才生效</font><p>属性值:</p><ol><li><code>normal</code> 默认值, 正常播放</li><li><code>reverse</code> 反方向播放</li><li><code>alternate</code> 来回播放( <strong>奇数周期正常播放, 偶数周期反向播放</strong> )</li><li><code>alternate-reverse</code> 来回播放( <strong>奇数周期反向播放, 偶数周期正常播放</strong> )</li></ol><h3 id="设置元素在动画外的状态"><a href="#设置元素在动画外的状态" class="headerlink" title="设置元素在动画外的状态"></a>设置元素在动画外的状态</h3><p>语法: <code>animation-fill-mode : val</code></p><p>属性值:</p><ol><li><code>none</code> 默认值, 元素在动画结束时回到没开始状态</li><li><code>forwards</code> 元素在动画结束时保持<strong>最后关键帧</strong>的状态</li><li><code>backfords</code> 元素在动画结束时回到<strong>第一帧</strong>的状态</li><li><code>both</code> 轮流使用<code>forwards</code>和<code>backwards</code>规则</li></ol><h3 id="设置动画的播放状态"><a href="#设置动画的播放状态" class="headerlink" title="设置动画的播放状态"></a>设置动画的播放状态</h3><p>语法: <code>animation-play-state : running(播放)|paused(暂停)</code></p><font color="deepskyblue">一般通过JS代码控制CSS动画的播放和暂停</font><h2 id="支持过渡-动画的属性"><a href="#支持过渡-动画的属性" class="headerlink" title="支持过渡/动画的属性"></a>支持过渡/动画的属性</h2><ol><li><code>color</code>前景色</li><li><code>background</code>系列， 如<code>background-color</code>、<code>background-position</code>、<code>background-size</code></li><li><code>width</code> 和 <code>height</code>宽和高</li><li><code>border</code>系列, 如<code>border-width</code>、<code>border-color</code>、<code>border-radius</code></li><li><code>padding</code>系列</li><li><code>margin</code>系列</li><li>定位系列, 如<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code></li><li><code>text-shadow</code>和<code>box-shadow</code>阴影 </li><li><code>outline</code>系列, 如<code>outline-width</code>、<code>outline-color</code></li><li><code>font</code>系列, 如<code>font-size</code>、<code>font-weight</code></li><li>文本系列, 如<code>line-height</code>、<code>letter-spacing</code>、<code>word-spacing</code></li><li><code>transform</code>系列, 如<code>perspective</code>、<code>transform-origin</code></li><li>其他, 如<code>z-index</code>、<code>visibility</code>、<code>opacity</code>、<code>vertical-align</code></li></ol><h2 id="过渡与动画对比"><a href="#过渡与动画对比" class="headerlink" title="过渡与动画对比"></a>过渡与动画对比</h2><ol><li><code>transition</code> 需要<strong>事件触发</strong>使元素样式属性放生改变, 而<code>animation</code>不需要触发任何事件即可执行( 即可以在网页加载后<strong>自动执行</strong>)</li><li><code>transition</code>一般是<strong>一次性</strong>的, 除非多次触发事件, 而<code>animation</code>可通过设置<code>animation-iteration-count</code>达到<strong>循环播放</strong>效果</li><li><code>transition</code>只能定义开始状态和结束状态, 而<code>animation</code>则可以定义多个关键帧状态</li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> transform </tag>
            
            <tag> transition </tag>
            
            <tag> animation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - 布局技巧及flex布局</title>
      <link href="/2018/02/03/css-flex/"/>
      <url>/2018/02/03/css-flex/</url>
      
        <content type="html"><![CDATA[<blockquote><p>根据上一篇文章的总结介绍, 可以得出一般布局技巧:</p><ol><li>垂直布局, 使用 <strong>标准流</strong></li><li>水平布局, 使用 <strong>浮动流</strong></li><li>层叠布局, 使用 <strong>定位流</strong></li><li><strong>子绝父相</strong>, 给绝对定位元素的父元素设置 <code>position : relative</code>, 方便更好的进行布局</li></ol></blockquote><p>在本文开始之前, 先总结2个布局相关公式</p><ol><li>标准流包含块宽度 = 子元素实际占用宽度 + <code>margin-left</code> + <code>margin-right</code></li><li>绝对定位包含块宽度 = 子元素事件占用宽度 + <code>margin-left</code> + <code>margin-right</code> + <code>left</code> + <code>right</code></li></ol><p>根据这2公式, 可以得出以下技巧:</p><ol><li>通过给标准流包含块设置<strong>负值左右外边距</strong>, 可以增加子元素的实际占用宽度</li><li>绝对定位元素<strong>不设置宽高</strong>, 只设置<code>left : 0;right : 0;top : 0;bottom : 0;margin : auto</code>可填充整个包含块</li></ol><h2 id="居中技巧"><a href="#居中技巧" class="headerlink" title="居中技巧"></a>居中技巧</h2><p>在一个网页中, 使用最多的布局就是<strong>元素在父元素居中</strong>, 以下是元素居中的一些技巧</p><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><ol><li>在<strong>标准流</strong>中, 对于<strong>行内级/行内块级元素</strong>, <code>text-align : center</code></li><li>在<strong>标准流</strong>中, 对于<strong>块级元素</strong>, 设置<strong>宽度</strong>( <code>width</code> ), <strong>左右外边距</strong>( <code>margin</code> )设为<code>auto</code></li><li>在<strong>定位流</strong>中, 对于<strong>相对定位元素</strong>, <code>margin-left : 50%; left : -元素宽度/2</code></li><li>在<strong>定位流</strong>中, 对于<strong>绝对定位元素</strong>, 设置<strong>宽度</strong>( <code>width</code> ), 然后设置 <code>left : 0; right : 0; margin-left : auto; margin-right : auto</code></li></ol><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><ol><li>对于<strong>单行文本</strong>, <code>line-height : 元素高度</code></li><li>对于<strong>行内级/行内块级元素</strong>, 可尝试使用 <code>vertical-align : middle</code></li><li>对于<strong>相对定位元素</strong>, <code>margin-top : 50%; top : -元素高度/2</code></li><li>对于<strong>绝对定位元素</strong>, 设置<strong>高度</strong>( <code>height</code> ), 然后设置 <code>top : 0; bottom : 0; maigin-top : auto; margin-bottom : auto</code></li></ol><h3 id="vertical-align属性"><a href="#vertical-align属性" class="headerlink" title="vertical-align属性"></a>vertical-align属性</h3><p>设置元素的垂直对齐方式</p><p>语法: <code>vertical-align : val</code></p><p>注意点: <font color="deep">只对行内级/行内块级元素生效</font></p><p>可选值:</p><ol><li><code>baseline</code> 默认值, 基线对齐</li><li><code>sub</code> 对齐文本下标</li><li><code>super</code> 对齐文本上标</li><li><code>top</code> 对齐父元素顶部</li><li><code>text-top</code> 对齐字体顶部</li><li><code>bottom</code> 对齐父元素底部</li><li><code>text-bottom</code> 对齐字体底部</li><li><code>middle</code> 对齐父元素中线(中部)</li></ol><h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><p>Flexible Box(简称: Flex), “弹性盒子”, CSS3新增的盒模型布局方式</p><h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>任何一个容器都能指定为Flex布局</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span> <span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>行内Flex布局</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span> <span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><font color="deepskyblue">注意点, 当设为Flex布局后, 容器中所有元素的<code>float</code>、<code>clear</code>、<code>vertical-align</code> 属性将失效</font><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>设为Flex布局的元素称为<strong>Flex容器</strong>(flex container), 简称”容器”, 起所有子元素称为<strong>Flex项目</strong>(flex item), 简称”项目”</p><p><strong>项目是参照容器的两根轴进行布局的</strong>:</p><ol><li><strong>主轴</strong>(main axis), 默认水平方向</li><li><strong>侧轴</strong>(交叉轴, cross axis), 垂直于主轴</li></ol><p><img src="/images/flex-container.png" alt="Flex弹性盒子"></p><p><font color="tomato">容器图解: main start(主轴开端)、main end(主轴末端)、cross start(侧轴开端)、cross end(侧轴末端)</font></p><p><font color="tomato">项目图解: main size — 项目占据主轴的空间、cross size — 项目占据侧轴的空间</font></p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><ol><li><p><strong>flex-direction</strong></p><p>设置<strong>主轴方向</strong>, 语法: <code>flex-direction : val</code></p><p>属性值:</p><p>a) <code>row</code> 默认值, 水平, 从左到右</p><p>b) <code>row-reverse</code> 水平, 从右到左</p><p>c) <code>column</code> 垂直, 从上打下</p><p>d) <code>column-reverse</code> 垂直, 从下到上</p><p><img src="/images/flex-direction.png" alt="flex-direction"></p></li><li><p><strong>flex-wrap</strong></p><p>设置<strong>换行处理</strong>, 语法: <code>flex-wrap : val</code></p><p>属性值:</p><p>a) <code>nowrap</code> 默认值, 不换行</p><p>b) <code>wrap</code> 换行, 第一行在最上方</p><p>c) <code>wrap-reverse</code> 换行, 第一行在最下方</p></li><li><p><strong>flex-flow</strong></p><p><code>flex-direction</code> 和 <code>flex-wrap</code> 的整合属性, 语法: <code>flex-flow : &lt;direction&gt; &lt;wrap&gt;</code></p><p>默认值: <code>row nowrap</code></p></li><li><p><strong>justify-content</strong></p><p>设置<strong>项目</strong>在<strong>主轴</strong>上的<strong>对齐方式</strong>, 语法: <code>justify-content : val</code></p><p>属性值:</p><p>a) <code>flex-start</code> 默认值, 向主轴开端对齐</p><p>b) <code>flex-end</code> 向主轴末端对齐</p><p>c) <code>space-between</code> 主轴两端对齐, 项目之间的间隔相等</p><p>d) <code>space-around</code> 每个项目的两侧的间隔相等</p><p>e) <code>center</code> 主轴方向居中</p><p><img src="/images/justify-content.png" alt="justify-content"></p></li><li><p><strong>align-items</strong></p><p>设置<strong>项目</strong>在<strong>侧轴</strong>上的<strong>对齐方式</strong>, 语法: <code>align-items : val</code></p><p>属性值:</p><p>a) <code>stretch</code>  默认值, 如果项目没有设置<strong>侧轴空间</strong>( cross size ), 默认填充整个容器侧轴长度</p><p>b) <code>flex-start</code> 向侧轴开端对齐</p><p>c) <code>flex-end</code> 向侧轴末端对齐</p><p>d) <code>baseline</code> 项目第一行文本的基线对齐</p><p>e) <code>center</code> 侧轴方向居中</p><p><img src="/images/align-items.png" alt="align-items"></p></li><li><p><strong>align-content</strong></p><p>当设置了<code>flex-wrap : wrap|wrap-reverse</code>且项目换行显示时, 此属性才生效</p><p>语法: <code>align-content : val</code></p><p>属性值:</p><p>a) <code>stretch</code> 默认值, 项目<strong>侧轴空间</strong>平分侧轴长度</p><p>b) <code>flex-start</code> 向侧轴开端对齐</p><p>c) <code>flex-end</code> 向侧轴末端对齐</p><p>d) <code>space-between</code> 侧轴两端对齐, 每行项目之间间隔相等</p><p>e) <code>space-around</code> 每行项目上下侧间隔相等</p><p>f) <code>center</code> 侧轴方向居中</p><p><img src="/images/align-content.png" alt="align-content"></p></li></ol><h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><ol><li><p><strong>flex-grow</strong></p><p>设置项目的放大比例, 语法: <code>flex-grow : number</code></p><p>默认值: <code>0</code>, 表示即使存在剩余空间也不放大</p><font color="tomato">当所有项目设为1, 则平分剩余空间; 如有有一个项目设为2, 则该项目所占得剩余空间是其他项目的2倍</font></li><li><p><strong>flex-shrink</strong></p><p>设置项目的缩小比例, 语法: <code>flex-shrink : number</code></p><p>默认值: <code>1</code>, 表示空间不足时, 项目缩小</p><font color="tomato">当一个项目设为0, 其他项目为默认值1, 则当空间不足时, 该小木不缩小</font></li><li><p><strong>flex-basis</strong></p><p>设置在分配剩余空间前, 项目的<strong>主轴空间</strong>( main size ), 浏览器也是通过此属性判断是否有剩余空间</p><p>默认值: <code>auto</code>, 即项目本来的大小</p></li><li><p><strong>flex</strong></p><p><code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>的整合属性</p><p>语法: <code>flex : &lt;grow&gt; [shrink] [basis]</code></p><p>默认值: <code>0 1 auto</code>, 后2属性可省略</p><p>注意点: </p><p>a) <code>auto</code>(<code>1 1 auto</code>) 和 <code>none</code>(<code>0 0 auto</code>)</p><p>b) 建议<strong>优先使用</strong>此整合属性</p></li><li><p><strong>order</strong></p><p>设置项目的排列顺序, 语法: <code>order : number</code></p><p>默认值: <code>0</code>, 值越小越靠前, 支持负数</p></li><li><p><strong>align-self</strong></p><p>单独设置项目的侧轴的对齐方式, 语法: <code>align-self : val</code></p><p>默认值: <code>auto</code>, 表示继承容器的<code>align-items</code>属性, 其他取值与<code>align-items</code>一样</p></li></ol><h2 id="三栏布局-双飞翼布局、圣杯布局"><a href="#三栏布局-双飞翼布局、圣杯布局" class="headerlink" title="三栏布局(双飞翼布局、圣杯布局)"></a>三栏布局(双飞翼布局、圣杯布局)</h2><p><img src="/images/layout.png" alt="三栏布局效果"></p><h3 id="浮动流实现"><a href="#浮动流实现" class="headerlink" title="浮动流实现"></a>浮动流实现</h3><p><strong>CSS部分</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>html部分</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="定位流实现"><a href="#定位流实现" class="headerlink" title="定位流实现"></a>定位流实现</h3><p><strong>CSS部分</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>html部分</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="Flex布局-1"><a href="#Flex布局-1" class="headerlink" title="Flex布局"></a>Flex布局</h3><p><strong>CSS部分</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>html部分</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - 页面布局相关属性</title>
      <link href="/2018/01/12/css-layout/"/>
      <url>/2018/01/12/css-layout/</url>
      
        <content type="html"><![CDATA[<h2 id="设置元素的显示形式"><a href="#设置元素的显示形式" class="headerlink" title="设置元素的显示形式"></a>设置元素的显示形式</h2><h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h3><p><code>display</code>属性可以改变元素的显示形式</p><p>常用属性值:</p><ol><li><code>none</code> 隐藏元素</li><li><code>block</code> 将元素显示为块级元素</li><li><code>inline</code> 将元素显示为行内级元素</li><li><code>inline-block</code> 将元素显示为行内块级元素(能自定义宽高、内外边距, 并跟其他行内/行内块级元素在同一行显示)</li></ol><p>注意点: <code>display</code> 属性是<strong>强制</strong>改变元素的显示形式, 你也可以通过<code>list-item</code>、<code>table</code>等属性值将其他元素改成 <strong>列表元素</strong> 和 <strong>表格元素</strong>, 但 <font color="red">强烈反对此做法</font>( <font color="yellowgreen">标签语义化</font> )</p><h3 id="overflow属性"><a href="#overflow属性" class="headerlink" title="overflow属性"></a>overflow属性</h3><p><code>overflow</code> 属性设置内容(content)溢出盒子模型(边框)时的行为表现</p><p>语法: <code>overflow : val</code></p><p>取值:</p><ol><li><code>visible</code> 默认值, 不作任何处理, 内容完整显示</li><li><code>hidden</code> 修剪内容, 溢出部分不可见</li><li><code>scroll</code> 修剪内容, 溢出部分通过滚动条显示</li><li><code>auto</code> 如果内容被修剪, 溢出部分通过滚动条显示</li></ol><p>注意点: </p><ol><li>可按方向细分, <code>overflow-x</code> 和 <code>overflow-y</code></li><li>滚动条所占空间属于 <code>width</code> 和 <code>height</code></li></ol><h3 id="resize属性"><a href="#resize属性" class="headerlink" title="resize属性"></a>resize属性</h3><p><code>resize</code> 属性设置用户是否能调整元素大小</p><p>语法: <code>resize : none(默认)|horizontal(可调宽度)|vertical(可调高度)|both(自由调整)</code></p><p>注意点: 当 <code>overflow</code> 不为默认值 <code>visible</code> 时, <code>resize</code> 属性才生效</p><h3 id="visibility属性"><a href="#visibility属性" class="headerlink" title="visibility属性"></a>visibility属性</h3><p><code>visibility</code> 属性设置元素是否可见</p><p>语法: <code>visibility : visible(默认可见)|hidden(隐藏)</code></p><p>注意点: 在<strong>表格元素</strong>中设置 <code>visibility : collapse</code> 表示删除一行或者一列, 但不影响表格布局</p><h3 id="opacity属性"><a href="#opacity属性" class="headerlink" title="opacity属性"></a>opacity属性</h3><p><code>opacity</code> 属性设置元素的透明度</p><p>语法: <code>opacity : val</code></p><p>注意点:</p><ol><li><code>val</code> 取值 <strong>0.0</strong>(完全透明) 到 <strong>1.0</strong>(完全不透明), 默认值为1</li><li><strong>兼容性</strong>: IE8之前, 使用 <code>filter : Alpha(opacity = val)</code> 代替, <code>val</code> 取值 <strong>0 - 100</strong></li></ol><h3 id="让元素隐藏-不可见-的三种方式对比"><a href="#让元素隐藏-不可见-的三种方式对比" class="headerlink" title="让元素隐藏(不可见)的三种方式对比"></a>让元素隐藏(不可见)的三种方式对比</h3><p>让元素隐藏(不可见)可通过以下三种方式实现</p><ol><li><code>display : none</code></li><li><code>visibility : hidden</code></li><li><code>opacity : 0</code></li></ol><p>区别:</p><ol><li><code>diaplay : none</code> 是真正意义上的隐藏, 不占空间, 通过此方式控制显示隐藏会影响<strong>标准流</strong>布局, 而 <code>visibility : hidden</code> 和 <code>opacity : 0</code> 2中方式则仍会占原空间大小(不会影响标准流布局)</li><li><code>opacity : 0</code> 改变的仅是元素的透明度, 仍可被用户选中, 而<code>display : none</code> 和 <code>visibility : hidden</code> 2中方式则不可被选中</li></ol><h2 id="标准流-normal-flow"><a href="#标准流-normal-flow" class="headerlink" title="标准流(normal flow)"></a>标准流(normal flow)</h2><p>标准流指的是文本从左到右, 从上到下排列显示, 这也是传统HTML文档的文本布局</p><p>在标准流中, 块级元素独占一行, 垂直排列, 行内级/行内块级元素在水平方向一个接着一个排列, <strong>不会出现层叠现象</strong></p><h3 id="标准流中盒模型的上下外边距传递和折叠问题"><a href="#标准流中盒模型的上下外边距传递和折叠问题" class="headerlink" title="标准流中盒模型的上下外边距传递和折叠问题"></a>标准流中盒模型的上下外边距传递和折叠问题</h3><h4 id="上下外边距的传递"><a href="#上下外边距的传递" class="headerlink" title="上下外边距的传递"></a>上下外边距的传递</h4><ol><li>块级元素上顶线与块级父元素上顶线重合, <code>margin-top</code>传递到父元素</li><li>块级元素下底线与块级父元素下底线框重合, 父元素<code>height: auto</code>, <code>margin-bottom</code>传递到父元素</li></ol><p>解决方案:</p><ol><li>设置 <code>display : inline-block</code>, 改变元素的显示形式</li><li>通过给父元素设置上下内边距(<code>padding</code>)代替子元素的上下外边距(<code>margin</code>)</li><li>给父元素设置边框(<code>border</code>)</li></ol><h4 id="上下外边距的折叠"><a href="#上下外边距的折叠" class="headerlink" title="上下外边距的折叠"></a>上下外边距的折叠</h4><ol><li>垂直方向中, 两个相邻块级元素的 <code>margin-top</code> 和 <code>margin-bottom</code> 会合并, 取两者中的较大值</li><li>无内容的块级元素, 上下外边距折叠(<strong>不生效</strong>)</li></ol><p>解决方案:</p><ol><li>设置 <code>display : inline-block</code>, 改变元素的显示形式</li><li>只设一个外边距(治标不治本), 且对第二种情况不生效</li><li>设置上下内边距(<code>padding</code>)代替上下外边距(<code>margin</code>)</li></ol><h2 id="定位和浮动"><a href="#定位和浮动" class="headerlink" title="定位和浮动"></a>定位和浮动</h2><p>在工作中, 我们经常需要让元素层叠(即<strong>脱离标准流</strong>), 在CSS中我们可以通过 <code>position</code>(定位) 或者 <code>float</code>(浮动) 属性实现</p><h3 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h3><ol><li><p><strong>静态定位</strong>(默认)</p><p>语法: <code>position : static</code></p><p>注意点: <strong>标准流布局</strong>, 元素只能通过 <code>margin</code>(外边距) 和 <code>padding</code> (内边距) 调整位置</p></li><li><p><strong>相对定位</strong></p><p>语法: <code>position : relative</code></p><p>注意点:</p><ol><li><strong>标准流布局</strong>, 元素仍占着原本的位置空间</li><li>参照对象是元素原本的位置</li><li>可通过<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>以及<strong>内外边距</strong>进行调整</li><li>不会影响其他兄弟元素的布局, 可实现层叠效果 </li></ol></li><li><p><strong>绝对定位</strong></p><p>语法: <code>position : absolute</code></p><p>注意点:</p><ol><li><strong>脱离标准流</strong>, 不占原来位置</li><li>参照对象是<strong>最邻近的定位祖先元素</strong>, 如果没有, 则参照<strong>视口</strong>( <strong>viewport</strong> )</li><li>可通过<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>以及<strong>内外边距</strong>进行调整</li></ol></li><li><p><strong>固定定位</strong></p><p>语法: <code>position : fixed</code></p><p>注意点:</p><ol><li><strong>脱离标准流</strong>, 不占原来位置</li><li>参照对象是<strong>视口</strong>( <strong>viewport</strong> )</li><li>可通过<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>以及<strong>内外边距</strong>进行调整</li><li><strong>画布</strong>( document )滚动时, 元素固定不动</li></ol><p><img src="/images/position.png" alt="四种定位对比"></p></li><li><p><strong>z-index属性</strong></p><p><code>z-index</code> 属性指定元素的层叠顺序</p><p>语法: <code>z-index : number</code></p><p>注意点:</p><ol><li><p>只对<strong>定位元素</strong>生效, 而<strong>静态定位</strong>元素一般在最底层</p></li><li><p>值越高, 越靠近顶层, 可设<strong>负值</strong>, 表示被<strong>静态定位</strong>元素覆盖</p></li><li><p>两个定位元素的层叠顺序比较</p><p>a) 设置了相同<code>z-index</code>且<strong>祖先元素没有设置</strong>, 后面的覆盖前面的</p><p>b) 祖先元素设置了<code>z-index</code>,  子元素在比较时, 先比较最外层祖先元素的<code>z-index</code>属性, 然后逐层比较, 较大值覆盖较低值</p></li></ol></li></ol><h3 id="float属性"><a href="#float属性" class="headerlink" title="float属性"></a>float属性</h3><p>语法: <code>float : none(默认)|left(向左浮动)|right(向右浮动)</code></p><p>注意点:</p><ol><li><strong>脱离标准流</strong></li><li>向左或向右移动, 直到自己边界紧贴包含块(一般是父元素)或者其他浮动元素的边界</li><li>浮动元素不会跟行内级/行内块级元素层叠</li><li>浮动元素之间互不层叠</li><li>定位元素一般层叠在浮动元素上</li><li>行内级/行内块级元素浮动后, 元素顶部与该行顶部对齐</li><li>之后浮动的元素顶部不会超过之前所有浮动元素的顶部</li><li><strong>绝对定位元素</strong>会忽视<code>float</code>属性</li></ol><h4 id="浮动导致的父元素高度坍塌问题"><a href="#浮动导致的父元素高度坍塌问题" class="headerlink" title="浮动导致的父元素高度坍塌问题"></a>浮动导致的父元素高度坍塌问题</h4><p>由于元素浮动后, 不再向父元素报备高度, 因此当所有子元素都浮动后会导致父元素高度坍塌</p><p>解决办法:</p><ol><li><p>快速解决, 给父元素设置 <code>overflow : hidden</code>, 改变父元素对内容溢出的默认行为(不推荐), 一般开发测试阶段使用</p></li><li><p>清浮动, 给对应父元素加<code>clear-fix</code>类名</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clear-fix</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>    <span class="token property">content</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span> <span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">clear</span> <span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">height</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 兼容旧浏览器 */</span>    <span class="token property">visibility</span> <span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 兼容旧浏览器 */</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clear-fix</span> </span><span class="token punctuation">{</span>    *<span class="token property">zoom</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 兼容IE6~7浏览器 */</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> display </tag>
            
            <tag> position </tag>
            
            <tag> float </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - 盒子模型</title>
      <link href="/2017/12/25/css-boxmodel/"/>
      <url>/2017/12/25/css-boxmodel/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言: 盒子模型分为IE盒模型和W3C标准盒模型, IE盒模型指的是IE6之前IE浏览器所识别的盒子模型, IE6之后IE浏览器在标准兼容模式下使用的是W3C标准盒模型, 本文只研究W3C标准盒模型</p></blockquote><p>盒子包括4部分, 从里到外分别是: <code>content</code>(内容)、<code>border</code>(边框)、<code>padding</code>(内边距)、<code>margin</code>(外边距)</p><p><img src="/images/boxModel.png" alt="W3C标准盒模型"></p><h2 id="标准盒子模型中的CSS属性"><a href="#标准盒子模型中的CSS属性" class="headerlink" title="标准盒子模型中的CSS属性"></a>标准盒子模型中的CSS属性</h2><h3 id="width属性"><a href="#width属性" class="headerlink" title="width属性"></a>width属性</h3><p>语法: <code>width : 数值 + 单位</code></p><font color="deepskyblue">注意点: 指的是内容(content)的宽度</font><h3 id="height属性"><a href="#height属性" class="headerlink" title="height属性"></a>height属性</h3><p>语法: <code>height : 数值 + 单位</code></p><font color="deepskyblue">注意点: 指的是内容(content)的高度</font><h3 id="border整合属性"><a href="#border整合属性" class="headerlink" title="border整合属性"></a>border整合属性</h3><p>语法: <code>border: width style color</code></p><p>注意点: 三个属性值均允许省略(缺失), 但不建议</p><p><strong>分类属性:</strong></p><ol><li>按方向(<code>direction</code>)细分: <code>border-top</code>、<code>border-right</code>、<code>border-bottom</code>、<code>border-left</code></li><li>按类型(<code>type</code>)细分: <code>border-width</code>(边框大小)、<code>border-style</code>(边框样式)、<code>border-color</code>(边框颜色)</li></ol><p>注意点:</p><ol><li><p>边框的方向属性语法: <code>border-(direction) : width style color</code> </p></li><li><p><code>border</code>整合属性实际是同时设置四个方向属性的<code>width</code>、<code>style</code>、<code>color</code></p></li><li><p>根据 <strong>方向</strong> 和 <strong>类型</strong> 可以继续细分出 <code>border-(direnction)-(type)</code> <strong>12</strong>个属性</p></li><li><p><code>border-color</code> 不设值, 默认和目标元素的前景色(<code>color</code>)一致</p></li><li><p><code>border-style</code> 常用值</p><p><img src="/images/border.png" alt="边框样式"></p></li></ol><h3 id="padding整合属性"><a href="#padding整合属性" class="headerlink" title="padding整合属性"></a>padding整合属性</h3><p>语法: <code>padding: val</code></p><p>可按 <strong>方向</strong> 细分: <code>padding-top</code>、<code>padding-right</code>、<code>padding-bottom</code>、<code>padding-left</code></p><p>注意点:</p><ol><li>可取值 <strong>auto(自动)</strong> 或者 <strong>具体数值 + 单位</strong></li><li><code>padding</code>整合属性, 设置4个值时, 表示分别设置 <strong>上右下左</strong> 方向的内边距</li><li><code>padding</code>整合属性, 只设置一个值, 表示同时四个方向的内边距</li><li><code>padding</code>整合属性设置2个值, 即<code>padding : x y</code> , 表示 <strong>padding-left</strong> 和 <strong>padding-right</strong> 的值为 <code>x</code>, <strong>padding-top</strong> 和 <strong>padding-bottom</strong> 的值为 <code>y</code></li><li><code>padding</code>整合属性设置3个值, 即<code>padding: left y right</code>, 表示 <strong>padding-left</strong> 值为 <code>left</code>, <strong>padding-right</strong> 值为 <code>right</code>, <strong>padding-top</strong> 和 <strong>padding-bottom</strong> 的值为 <code>y</code></li></ol><h3 id="margin整合属性"><a href="#margin整合属性" class="headerlink" title="margin整合属性"></a>margin整合属性</h3><p>语法: <code>margin : val</code></p><p>可按 <strong>方向</strong> 细分: <code>marigin-top</code>、<code>margin-right</code>、<code>margin-bottom</code>、<code>margin-left</code></p><p>注意点:</p><ol><li>可取值 <strong>auto(自动)</strong> 或者 <strong>具体数值 + 单位</strong></li><li><code>margin</code>整合属性, 设置4个值时, 表示分别设置 <strong>上右下左</strong> 方向的外边距</li><li><code>margin</code>整合属性, 只设置一个值, 表示同时四个方向的外边距</li><li><code>margin</code>整合属性设置2个值, 即<code>margin: x y</code> , 表示 <strong>margin-left</strong> 和 <strong>margin-right</strong> 的值为 <code>x</code>, <strong>margin-top</strong> 和 <strong>margin-bottom</strong> 的值为 <code>y</code></li><li><code>margin</code>整合属性设置3个值, 即<code>margin: left y right</code>, 表示 <strong>margin-left</strong> 值为 <code>left</code>, <strong>margin-right</strong> 值为 <code>right</code>, <strong>margin-top</strong> 和 <strong>margin-bottom</strong> 的值为 <code>y</code></li></ol><h2 id="box-sizing属性"><a href="#box-sizing属性" class="headerlink" title="box-sizing属性"></a>box-sizing属性</h2><p>CSS3属性, 设置元素的盒模型的表现形式</p><p>语法: <code>box-sizing : content-box(默认值, 标准盒模型)|border-box(可理解为IE盒模型)</code></p><p><img src="/images/borderbox.png" alt="border-box"></p><p>观察上图可得, 当 <code>box-sizing</code> 设置为 <code>border-box</code> 时：</p><ol><li><code>width</code> 包括 <strong>content</strong>、<strong>padding-left</strong>、<strong>padding-right</strong>、<strong>border-left</strong>、<strong>border-right</strong></li><li><code>height</code> 包括 <strong>content</strong>、<strong>padding-top</strong>、<strong>padding-bottom</strong>、<strong>border-top</strong>、<strong>border-bottom</strong></li></ol><h2 id="盒子模型的其他属性"><a href="#盒子模型的其他属性" class="headerlink" title="盒子模型的其他属性"></a>盒子模型的其他属性</h2><h3 id="border-radius整合属性"><a href="#border-radius整合属性" class="headerlink" title="border-radius整合属性"></a>border-radius整合属性</h3><p>设置圆角边框(圆角半径)</p><p>语法: <code>border-radius : val</code></p><p>分类属性: </p><ol><li><code>border-top-left-radius : x [y]</code> 左上角</li><li><code>border-top-right-radius : x [y]</code> 右上角</li><li><code>border-bottom-right-radius : x [y]</code> 右下角</li><li><code>border-bottom-left-radius : x [y]</code> 左下角</li></ol><p>注意点:</p><ol><li><p>当使用单位为 <strong>%</strong> 时, <strong>x</strong> 相对当前元素<code>width</code>进行计算,  <strong>y</strong> 相对当前元素<code>height</code>进行计算</p></li><li><p>只设一个值, 表示水平和垂直半径值一样(非计算值)</p></li><li><p><code>border-radius</code>整合属性实际是同时设置4个角的圆角半径, 效果如下</p><ol><li>水平和垂直半径值一样</li></ol><pre class=" language-css"><code class="language-css"><span class="token property">border-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token property">border-top-left-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">border-top-right-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-right-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-left-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token property">border-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px <span class="token number">25</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token property">border-top-left-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">border-top-right-radius</span> <span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-right-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-left-radius</span> <span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token property">border-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px <span class="token number">25</span>px <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token property">border-top-left-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">border-top-right-radius</span> <span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-right-radius</span> <span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-left-radius</span> <span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token property">border-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px <span class="token number">25</span>px <span class="token number">15</span>px <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token property">border-top-left-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token property">border-top-right-radius</span> <span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-right-radius</span> <span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-left-radius</span> <span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span></code></pre><ol start="2"><li>水平和垂直方向半径不一样, 设置垂直方向半径, 与水平方向半径赋值效果一样, 最终效果如下</li></ol><pre class=" language-css"><code class="language-css"><span class="token property">border-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px <span class="token number">25</span>px <span class="token number">15</span>px <span class="token number">5</span>px / <span class="token number">5</span>px <span class="token number">15</span>px <span class="token number">25</span>px <span class="token number">35</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token property">border-top-left-radius</span> <span class="token punctuation">:</span> <span class="token number">35</span>px <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token property">border-top-right-radius</span> <span class="token punctuation">:</span> <span class="token number">25</span>px <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-right-radius</span> <span class="token punctuation">:</span> <span class="token number">15</span>px <span class="token number">25</span>px<span class="token punctuation">;</span><span class="token property">border-bottom-left-radius</span> <span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token number">35</span>px<span class="token punctuation">;</span></code></pre></li></ol><h3 id="outline整合属性"><a href="#outline整合属性" class="headerlink" title="outline整合属性"></a>outline整合属性</h3><p>在盒子模型(边框外)设置轮廓</p><p>语法: <code>outline : width style color</code></p><p>注意点: <code>outline</code> 整合属性和 <code>border</code> 整合属性用法一样</p><p>分类属性:</p><ol><li><code>outline-width</code> 用法与 <code>border-width</code> 一样</li><li><code>outline-style</code> 用法与 <code>border-style</code> 一样</li><li><code>outline-color</code> 用法与 <code>border-color</code> 一样</li><li><code>outline-offset : 数值 + 单位</code> 设置轮廓与边框的偏移, 支持负值</li></ol><p><code>outline</code>(轮廓) 与 <code>border</code>(边框) 的<strong>区别</strong>:</p><ol><li><p>轮廓不占用实际空间, 即<strong>不会影响页面布局</strong></p></li><li><p>边框可以通过<code>border-radius</code>属性设置圆角(可以为圆形), 轮廓只能是直角</p></li><li><p>轮廓不能单独设置某一边的属性(没有按方向细分的分类属性)</p></li><li><p>对于<strong>行内级元素</strong>, <strong>文本(一定行高内)换行</strong>时, <strong>轮廓是连续的, 边框则不连续</strong></p><p><img src="/images/border&amp;outline.png" alt="轮廓与边框"></p></li></ol><h3 id="box-shadow属性"><a href="#box-shadow属性" class="headerlink" title="box-shadow属性"></a>box-shadow属性</h3><p>给盒模型(<strong>边框</strong>)设置阴影</p><p>语法: <code>box-shadow: x y [blur [spread]] [color] [inset]</code></p><p>注意点:</p><ol><li>必须值: <strong>x</strong> — 水平位置  <strong>y</strong> — 垂直位置,  均支持负值</li><li>可选值: <strong>blur</strong> — 阴影距离, 仅<strong>正值,</strong> 值越大越模糊, 默认为0</li><li>可选值: <strong>spread</strong> — 阴影尺寸, 支持<strong>负值</strong>, 需要设置在 <strong>blur</strong> 后面(即blur需占位), 默认为 <code>border-box</code>的宽高</li><li>可选值: <strong>color</strong> — 阴影颜色, 默认跟随当前元素<strong>前景色(color)</strong></li><li>可选值: <strong>inset</strong> — 设为内部阴影, 默认为 (outset) 外部阴影</li><li>需要按顺序设置, <strong>color</strong> 可放在<strong>最前</strong>或者<strong>最后</strong></li><li>可添加多个阴影,  阴影列表用 ( <strong>,</strong> ) 逗号隔开</li><li>阴影不占实际空间, 即<strong>不会影响页面布局</strong></li></ol><h3 id="min-width-和-min-height"><a href="#min-width-和-min-height" class="headerlink" title="min-width 和 min-height"></a>min-width 和 min-height</h3><p>设置元素的最小宽高, 一般配合<code>width : 数值 + 计算单位</code>使用</p><p>语法: <code>min-width : val</code>、<code>min-height ： val</code></p><font color="deep"><strong>计算单位:  %、em、rem</strong></font><h3 id="max-width-和-max-height"><a href="#max-width-和-max-height" class="headerlink" title="max-width 和 max-height"></a>max-width 和 max-height</h3><p>设置元素的最大宽度,  一般配合<code>width : 数值 + 计算单位</code>使用</p><p>语法: <code>max-width : val</code>、<code>max-height ： val</code></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Box Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - 常用属性以及继承和优先级</title>
      <link href="/2017/12/21/css-styles/"/>
      <url>/2017/12/21/css-styles/</url>
      
        <content type="html"><![CDATA[<h2 id="字体-font-属性"><a href="#字体-font-属性" class="headerlink" title="字体(font)属性"></a>字体(font)属性</h2><ol><li><p><strong>设置字体大小</strong></p><p>语法: <code>font-size : 具体数值 + 单位</code></p><p>常用单位: <code>px</code>、<code>em</code>、<code>rem</code>、<code>%</code></p><font color="deepskyblue"><strong>em</strong> 和 <strong>%</strong> 是基于父元素字体大小进行计算, <strong>rem</strong>则基于html字体大小进行计算</font></li><li><p><strong>设置文字的粗细</strong></p><p>语法: <code>font-weight : val</code></p><p>取值: <code>n*100(1&lt;=n&lt;=9)</code>、<code>normal(400)</code>、<code>bold(700)</code></p></li><li><p><strong>设置文字的行高</strong></p><p>语法: <code>line-height : val</code></p><p><font color="deepskyblue">文字垂直方向居中:</font> <code>line-height = 容器 height</code></p></li><li><p><strong>设置字体的样式</strong></p><p>语法: <code>font-style : val</code></p><p>取值: <code>normal</code>(默认)、<code>italic</code>(斜体)、<code>oblique</code>(倾斜, 针对没有斜体的文字)</p></li><li><p><strong>设置英文字母大小写</strong></p><p>语法: <code>font - variant : val</code></p><p>取值: <code>normal</code>(默认)、<code>small-caps</code>(小型大写字母)</p></li><li><p><strong>设置字体</strong></p><p>语法: <code>font - family : val</code></p><p>注意点: </p><ol><li>可设置多个值, 用( <strong>,</strong> )逗号隔开, 解决兼容, 一直找到可用字体</li><li>字体名称包含空格, 它必须加上引号</li></ol></li><li><p><strong>自定义字体(加载网络字体)</strong></p><p>语法:</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 定义(引入)字体 */</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>     <span class="token property">font-family</span><span class="token punctuation">:</span> 自定义字体名称<span class="token punctuation">;</span>     <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('Sansation_Light.ttf')</span>,          <span class="token url">url('Sansation_Light.eot')</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* IE9 */</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* 使用字体 */</span><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> 自定义字体名称<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其他可选属性:</p><ol><li><code>font-stretch</code> 设置字体改如何被拉长</li><li><code>font-style</code> 设置字体样式</li><li><code>font-weight</code> 设置字体粗细</li><li><code>unicode-range</code> 设置字体支持的Unicode字符范围</li></ol></li><li><p><strong>font整合属性</strong></p><p>语法: <code>font: [font-style] [font-variant] [font-weight] font-size[/line-height] font-family</code></p><p>注意点:</p><ol><li>需要按顺序设置</li><li><code>font-size</code> 和 <code>font-family</code> 的值是必需的</li><li><code>line-height</code> 必须紧跟着 <code>font-size</code> 通过 <code>/</code> 连接</li></ol></li></ol><h2 id="文本-text-属性"><a href="#文本-text-属性" class="headerlink" title="文本(text)属性"></a>文本(text)属性</h2><ol><li><p><strong>设置文本水平对齐方式</strong></p><p>语法: <code>text-align : center|left|right|justify(两端对齐)</code></p></li><li><p><strong>设置文本装饰线</strong></p><p>语法: <code>text-decoration : val</code></p><p>取值: <code>none|underline|overline|line-through|blnk(闪烁文本)</code></p></li><li><p><strong>设置文本首行缩进</strong></p><p>语法: <code>text-indent : 数值 + 单位</code></p><p>注意点:</p><ol><li>支持负数, 表示向左缩进</li><li>常用单位 <strong>em</strong> , 表示缩进多少个字符</li></ol></li><li><p><strong>设置文本阴影</strong></p><p>语法: <code>text-shadow : x y [blur] [color]</code></p><p>注意点:</p><ol><li>必须值: <strong>x</strong> — 水平位置  <strong>y</strong> — 垂直位置,  均支持负值</li><li>可选值: <strong>blur</strong> — 阴影距离(仅正值)  <strong>color</strong> — 阴影颜色(默认跟随字体颜色)</li><li>需要按顺序设置, <strong>color</strong> 可放在<strong>最前</strong>或者<strong>最后</strong></li><li>可添加多个阴影,  阴影列表用 ( <strong>,</strong> ) 逗号隔开</li><li>阴影不占实际空间, 即<strong>不会影响页面布局</strong></li></ol></li><li><p><strong>设置文本大小写</strong></p><p>语法: <code>text-transform : val</code></p><p>取值: <code>none</code>(默认)、<code>capitalize</code>(首字母大写)、<code>uppercase</code>(全大写)、<code>lowercase</code>(全小写)</p></li><li><p><strong>设置字符间距</strong></p><p>语法: <code>letter-spacing : 数值 + 单位</code></p><p>注意点: 默认<code>normal</code>, 支持负值</p></li><li><p><strong>设置单词间距</strong></p><p>语法: <code>word-spacing : 数值 + 单位</code></p><p>注意点: 默认<code>normal</code>, 支持负值, <font color="deepskyblue">需要手动用空格区分单词</font></p></li><li><p><strong>设置当文本溢出容器时处理方式</strong></p><p>语法: <code>text-overflow : val</code></p><p>取值: <code>clip</code>(默认值, 修剪)、<code>ellipsis</code>(省略号代替修剪部分)、<code>string</code>(指定字符串代替)</p></li><li><p><strong>设置自动换行的处理方式</strong></p><p>语法: <code>word-break : val</code></p><p>取值: <code>normal</code>(默认)、<code>break-all</code>(允许单词内换行)、<code>keep-all</code>(只能在摆角空格/连字符处换行)</p></li><li><p><strong>允许长内容(单词/URL)自动转行</strong></p><p>语法: <code>word-wrap : normal|break-word(允许)</code></p></li><li><p><strong>设置元素内空白的处理方式</strong></p><p>语法:  <code>white-space : val</code></p><p>取值:</p><ol><li><code>normal</code> 默认忽略空白</li><li><code>pre</code> 保留空白, 与<code>&lt;pre&gt;</code>标签类似</li><li><code>nowrap</code> 不换行, 直到遇到 <code>&lt;br&gt;</code> 标签</li><li><code>pre-wrap</code> 保留空白符序列, 正常换行</li><li><code>pre-line</code> 合并空白符序列, 保留换行符</li></ol></li></ol><h3 id="文本单行忽略显示"><a href="#文本单行忽略显示" class="headerlink" title="文本单行忽略显示"></a>文本单行忽略显示</h3><pre class=" language-css"><code class="language-css"><span class="token property">white-space</span> <span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token property">text-overflow</span> <span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></code></pre><h2 id="列表-list-style-属性"><a href="#列表-list-style-属性" class="headerlink" title="列表(list-style)属性"></a>列表(list-style)属性</h2><ol><li><p><strong>设置项目标志的类型</strong></p><p>语法: <code>list-style-type : typename</code></p><p>常用属性值: <code>none</code>(无标记)、<code>disc</code>(实心圆)、<code>circle</code>(空心圆)、<code>square</code>(实心方块)、<code>decimal</code>(数字)</p></li><li><p><strong>设置项目标记的位置</strong></p><p>语法: <code>list-style-position : outside(默认)|inside</code></p><p>效果:</p><ol><li><p><code>outside</code> : 列表项目标记放置在文本以外, 且环绕文本不根据标记对齐</p></li><li><p><code>inside</code> : 列表项目标记放置在文本以内, 且环绕文本根据标记对齐</p><p><img src="/images/list-style-position.png" alt="项目标志位置"></p></li></ol></li><li><p><strong>设置图片项目标志</strong></p><p>语法: <code>list-style-image : 图片URL</code></p><p>注意点: 以防图像不可用, 使用图片项目标志时, 建议设置 <code>list-style-type</code></p></li><li><p><strong>list-style整合属性</strong></p><p>语法: <code>list-style : list-style-type list-style-position list-style-image</code></p><p>注意点: 需要按顺序设置, 但可不设置其中某个属性, 表示该属性使用默认值</p></li></ol><h2 id="表格相关样式"><a href="#表格相关样式" class="headerlink" title="表格相关样式"></a>表格相关样式</h2><ol><li><p><strong>设置单元格边框是否合并</strong></p><p>语法: <code>border-collapse : separate(默认分开)|collapse(合并)</code></p></li><li><p><strong>设置相邻单元格边框之间的距离</strong></p><p>语法: <code>border-spacing : x [y]</code></p><p>注意: </p><ol><li>需要带单位, 只设一个值表示水平和垂直方向的间距一致</li><li>当<code>border-collapse</code> 设置为 <code>collapse</code> 时, 该属性不起作用</li></ol></li><li><p><strong>设置表格标题(<code>&lt;caption&gt;标签</code>)的位置</strong></p><p>语法: <code>caption-side : top(默认)|bottom</code></p></li><li><p><strong>隐藏空单元格</strong></p><p>语法: <code>empty-cells : show(默认)|hide(隐藏)</code></p><p>注意点: <code>empty-cells : hide</code> 仅在 <code>border-collapse : separate</code> 时生效</p></li><li><p><strong>设置表格布局</strong></p><p>语法: <code>table-layout : auto|fixed</code></p><p>注意点:</p><ol><li><code>auto</code> 默认值, 列宽根据单元格内容设置</li><li><code>fixed</code> 列宽根据表格宽度设置</li></ol></li></ol><h2 id="设置颜色"><a href="#设置颜色" class="headerlink" title="设置颜色"></a>设置颜色</h2><ol><li><p><strong>前景颜色</strong></p><p>语法: <code>color : 颜色</code></p><p>注意: 前景包括 <strong>文本</strong> 、<strong>边框</strong>、<strong>阴影</strong></p></li><li><p><strong>背景颜色</strong></p><p>语法: <code>background-color : 颜色</code></p></li><li><p><strong>CSS中设置颜色</strong></p><p>a) <strong>基本颜色关键字(英文)</strong></p><p>​    如 <code>white</code>、<code>black</code>、<code>pink</code>、<code>skyblue</code>、<code>deepskyblue</code> 等</p><p>​    局限性: 仅提供百来种基本颜色关键字</p><p>b) <strong>RGB颜色(常用形式)</strong></p><p>​    十进制语法: <code>rgb(red,green,blue)</code>, 取值 <strong>0 - 255</strong></p><p>​    十六进制语法: <code>#rrggbb</code> 可简写: <code>#rgb</code>, 取值 <strong>00 - ff</strong> </p><p>​    白色: <code>rgb(255,255,255)</code>|<code>#fff</code></p><p>​    黑色: <code>rgb(0,0,0)</code>|<code>#000</code></p><p>c) <strong>RGBA颜色(一般做特效用, 带透明度)</strong></p><p>​    A — alpha透明度, 取值 <strong>0 - 1</strong></p><p>​    语法: <code>rhba(red,green,blue,alpha)</code></p><p>​    完全透明: <code>transparent</code>|<code>rgba(red,green,blue,0)</code></p></li></ol><h2 id="设置鼠标指针样式"><a href="#设置鼠标指针样式" class="headerlink" title="设置鼠标指针样式"></a>设置鼠标指针样式</h2><p>语法: <code>cursor : style</code></p><p>常用值:</p><ol><li><code>auto</code> 默认值, 使用浏览器设置的光标</li><li><code>none</code> 不显示光标</li><li><code>default</code> 系统默认光标(斜箭头)</li><li><code>pointer</code> 链接光标(小手)</li><li><code>text</code> 文本输入/选择光标</li><li><code>move</code> 移动光标</li></ol><h3 id="设置图片光标"><a href="#设置图片光标" class="headerlink" title="设置图片光标"></a>设置图片光标</h3><p>语法:  <code>cursor : url(图片URL) x y , replaceStyle</code></p><p>注意点:</p><ol><li><code>x</code> 和 <code>y</code> 代表图片光标与当前像素格(1px*1px区域)的偏移量, 支持负值</li><li><code>replaceStyle</code> 代表当图片失效时, 代替的指针样式</li></ol><h2 id="样式的继承与优先级"><a href="#样式的继承与优先级" class="headerlink" title="样式的继承与优先级"></a>样式的继承与优先级</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承指的是: 没有设置样式的元素会继承父元素的样式</p><p>注意点:</p><ol><li><p><strong>默认继承的属性</strong>: 子元素的<strong>字体样式</strong>和<strong>文本样式</strong>如果不设值, 默认继承父元素的对应样式</p></li><li><p>对于不可继承的样式属性, 可通过 <code>inherit</code> 属性<strong>强制继承</strong></p><p>语法: <code>样式属性名: inherit</code></p><p>注意点:</p><ol><li><strong>只继承属性值</strong>, 不继承样式名称</li><li>继承的是 <strong>计算值</strong></li></ol></li></ol><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>优先级指的是: 同一个元素的同一个样式属性被多次赋值时, 该元素优先使用哪个属性值</p><p>为了方便比较CSS属性的优先级, 给CSS属性所处的环境定义一个权重(从大到小):</p><font color="yellowgreen">!important &gt; 内联样式 &gt; id选择器 &gt; 类/属性/伪类选择器 &gt; 元素(标签)/伪元素选择器 &gt;通用选择器</font><p><code>!important</code> 属性语法: <code>样式属性名 : 属性值 !important</code></p><p>注意点:</p><ol><li>每条样式属性都有自己的优先级</li><li><code>!important</code> 属性只针对某条样式属性</li></ol><p>总结:</p><ol><li>针对性越强的选择器, 优先级越高</li><li>权重可叠加</li><li>优先级一样, 就近原则(后面的覆盖前面的)</li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> styles </tag>
            
            <tag> inheritance </tag>
            
            <tag> priority </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS简介</title>
      <link href="/2017/12/12/css-intro/"/>
      <url>/2017/12/12/css-intro/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="结构与样式分离"><a href="#结构与样式分离" class="headerlink" title="结构与样式分离"></a>结构与样式分离</h2><p>在介绍CSS前, 先说说结构和样式分离</p><p>结构和样式分离即<strong>尽可能不使用HTML元素来设置样式</strong></p><p>意义:</p><ol><li>各司其职, 功能分明</li><li>方便维护管理</li></ol></blockquote><h2 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h2><p>CSS(Cascading Style Sheets), 层叠样式表, 可以给每个元素设置样式</p><p><strong>样式书写格式</strong>: <code>样式名: 样式值</code></p><p>注意: <font color="tomato">css的样式名都是小写</font></p><h3 id="CSS的三种引入方式"><a href="#CSS的三种引入方式" class="headerlink" title="CSS的三种引入方式"></a>CSS的三种引入方式</h3><h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><p>直接将样式写在元素的style属性上</p><font color="yellowgreen"><strong>不推荐</strong>(结构与样式分离), 并且只能在一个元素上生效</font><p>语法: <code>&lt;标签名 style=&quot;样式1; 样式2&quot;&gt;</code></p><h4 id="文档样式表"><a href="#文档样式表" class="headerlink" title="文档样式表"></a>文档样式表</h4><p>将样式写在head元素的style元素中</p><font color="yellowgreen">写demo或者测试时常用, 方便对照管理, 但在项目中会造成混乱</font><p>语法:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">选择器 </span><span class="token punctuation">{</span>            样式<span class="token number">1</span><span class="token punctuation">;</span>            样式<span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p>注意点: <font color="tomato">style元素的type属性默认值是 text/css, 可省略</font></p><h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><p>将样式写在单独的CSS文件中, 然后在html文件head元素中引入</p><font color="yellowgreen">真正的结构和样式分离, 分文件管理</font><p>引入CSS文件的2种方式</p><ol><li><p><strong>link</strong> 标签引入</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CSS文件的URL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>注意点:</p><p>​    a) <font color="tomato">link元素的type属性默认值是 text/css, 可省略</font></p><p>​    b) <font color="tomato">CSS文件中, 最好在开头写上 @charset “UTF-8”; 然后直接写选择器和样式</font></p></li><li><p><strong>@import</strong> 引入, <font color="tomato">不建议使用, 效率比link低</font></p></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token atrule"><span class="token rule">@import</span> <span class="token string">"CSS文件的URL"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>两种方法对比:</p><ol><li><code>&lt;link&gt;</code>属于 XHTML 标签, 除了加载 CSS 外还能订阅 RSS, 而<code>@import</code>是 CSS 提供的, 只能加载CSS</li><li><code>&lt;link&gt;</code>的加载时期是与页面同步记载, 而<code>@import</code>则是等页面加载完再进行引入 CSS</li><li><code>@import</code> 不兼容 IE5 以下浏览器</li></ol><h3 id="CSS的注释语法"><a href="#CSS的注释语法" class="headerlink" title="CSS的注释语法"></a>CSS的注释语法</h3><p>CSS的注释语法: <code>/* 注释 */</code></p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>选择器编写原则: <strong>保证精准的情况下尽量简洁</strong></p><h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><font color="tomato">注意点: 通配符会降低网页显示的速度, 尽量不用</font><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><pre class=" language-css"><code class="language-css"><span class="token selector">标签名 </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="类选择器-最常用的选择器"><a href="#类选择器-最常用的选择器" class="headerlink" title="类选择器(最常用的选择器)"></a>类选择器(<font color="deepskyblue">最常用的选择器</font>)</h3><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.class</span>值 </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点: </p><p>a) 在一个HTML文档中, class值可以重复使用, 表示一类元素</p><p>b) 多单词class命名规则: 用 <code>-</code>、<code>_</code> 链接, 或者使用<strong>小驼峰命名</strong></p><p>c) 一个元素可以有多个class值, 通过空格分隔</p><p>d) 最好不要用标签名作为class值</p><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#id</span>值 </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点:</p><p>a) 一个HTML文档中, <strong>id</strong> 值是唯一的, 不能重复(即<strong>一个id对应一个元素</strong>)</p><p>b) 多单词id命名规则: 用 <code>-</code>、<code>_</code> 链接, 或者使用<strong>小驼峰命名</strong></p><p>c) 最好不要用标签名作为id值</p><h3 id="属性选择器-一般用于表单元素"><a href="#属性选择器-一般用于表单元素" class="headerlink" title="属性选择器(一般用于表单元素)"></a>属性选择器(<font color="deep">一般用于表单元素</font>)</h3><font color="yellowgreen">att — attribute(属性)、val — value(属性值)</font><h4 id="选择拥有某属性的元素"><a href="#选择拥有某属性的元素" class="headerlink" title="选择拥有某属性的元素"></a>选择拥有某属性的元素</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[att]</span> </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h4 id="选择指定属性值的元素"><a href="#选择指定属性值的元素" class="headerlink" title="选择指定属性值的元素"></a>选择指定属性值的元素</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[att=val]</span> </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="选择属性值包含某字符串的元素"><a href="#选择属性值包含某字符串的元素" class="headerlink" title="选择属性值包含某字符串的元素"></a>选择属性值包含某字符串的元素</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[att~=val]</span> </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="选择属性值恰好等于某值-或者以某值开头且后面紧接着连字符-的元素"><a href="#选择属性值恰好等于某值-或者以某值开头且后面紧接着连字符-的元素" class="headerlink" title="选择属性值恰好等于某值, 或者以某值开头且后面紧接着连字符 - 的元素"></a>选择属性值恰好等于某值, 或者以某值开头且后面紧接着连字符 - 的元素</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[att|=val]</span> </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点: 此选择器一般用在 <code>lang</code> 属性上</p><h4 id="选择属性值以某值开头的元素"><a href="#选择属性值以某值开头的元素" class="headerlink" title="选择属性值以某值开头的元素"></a>选择属性值以某值开头的元素</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[att^=val]</span> </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="选择属性值以某值结尾的元素"><a href="#选择属性值以某值结尾的元素" class="headerlink" title="选择属性值以某值结尾的元素"></a>选择属性值以某值结尾的元素</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[att$=val]</span> </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="选择属性值包含某值的元素"><a href="#选择属性值包含某值的元素" class="headerlink" title="选择属性值包含某值的元素"></a>选择属性值包含某值的元素</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[att*=val]</span> </span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>选择器中包含某些后代选择器的元素</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 后代选择器 <span class="token class">...</span></span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点:</p><ol><li>用空格隔开</li><li>包括直接子元素和间接子元素</li></ol><h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><p>特殊的后代选择器, 只包括直接子元素</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器>子选择器><span class="token class">...</span></span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点:</p><ol><li>用 <strong>&gt;</strong> 连接, 最好不要有空格</li><li>只包括直接子元素</li></ol><h4 id="兄弟选择器-sibling"><a href="#兄弟选择器-sibling" class="headerlink" title="兄弟选择器(sibling)"></a>兄弟选择器(sibling)</h4><h5 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h5><p>选择器1后面<strong>紧挨着</strong>的选择器2的元素</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器1+选择器2+<span class="token class">...</span></span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点: 用 <strong>+</strong> 连接, 最好不要有空格, 只能选后面的兄弟选择器</p><h5 id="全体兄弟选择器"><a href="#全体兄弟选择器" class="headerlink" title="全体兄弟选择器"></a>全体兄弟选择器</h5><p>选择器1后面<strong>所有</strong>选择器的元素</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器1~选择器2~<span class="token class">...</span></span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点: 用 <strong>~</strong> 连接, 最好不要有空格, 只能选后面的兄弟选择器</p><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><p>同时符合选择器1, 选择器2条件的元素</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器1选择器2<span class="token class">...</span></span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点:</p><ol><li>不留空格连接</li><li>标签名放在最前面</li></ol><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p>等价于给选择器1 选择器2的元素设置相同样式</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器1, 选择器2, <span class="token class">...</span></span><span class="token punctuation">{</span>    样式<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点: 用 <strong>,</strong> (逗号)连接, 可留空格</p><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><h4 id="动态伪类"><a href="#动态伪类" class="headerlink" title="动态伪类"></a>动态伪类</h4><ol><li><code>a:link</code> 未访问的网页</li><li><code>a:visited</code> 访问过的网页</li><li><code>a:focus</code> 当前拥有输入焦点的元素</li><li><code>a:hover</code> 鼠标移到元素上显示的样式<strong>(常用)</strong></li><li><code>a:active</code> 激活状态 (鼠标单击连接时, 未打开)</li></ol><p>注意点:</p><ol><li>除a元素外, <code>:hover</code> 和 <code>:active</code> 可以应用到其他元素上 (不常用, 兼容问题)</li><li><code>:hover</code>必须放在 <code>:link</code> 和 <code>:visited</code> 后面, <code>:active</code> 放在 <code>:hover</code> 后面</li><li><font color="deepskyblue">给a设置样式相当于给所有动态伪类设置样式</font></li></ol><h4 id="结构伪类-可单独使用"><a href="#结构伪类-可单独使用" class="headerlink" title="结构伪类(可单独使用)"></a>结构伪类(<font color="tomato">可单独使用</font>)</h4><ol><li><code>:nth-child(an+b)</code> 父元素的第an+b个子元素, a、b是常数, n是0和正整数</li><li><code>:nth-last-child(an+b)</code> 父元素的倒数第an+b个子元素</li><li><code>:nth-of-type(an+b)</code> 父元素中第an+b个该标签的子元素</li><li><code>:nth-last-of-type(an+b)</code> 父元素中倒数第an+b个该标签的子元素</li><li><code>:first-child</code> 等同于 :nth-child(1)</li><li><code>:last-child</code> 等同于 :nth-last-child(1)</li><li><code>:only-child</code> 父元素中唯一的子元素, 等同于 :first-child:last-child</li><li><code>:nth-child(2n)</code>、<code>:nth-child(even)</code> 父元素的第偶数个子元素</li><li><code>:nth-child(2n+1)</code>、<code>:nth-child(odd)</code> 父元素的第奇数个子元素</li><li><code>:empty</code> 代表内容完全空白的元素</li><li><code>:root</code> 根元素, 即html元素</li></ol><h4 id="否定伪类"><a href="#否定伪类" class="headerlink" title="否定伪类"></a>否定伪类</h4><p>语法: <code>:not(x)</code> x为简单选择器(否定伪类除外), 表示除x以外的元素</p><p>注意点</p><ol><li>最好加上标签</li><li>没有标签时, 一般加上 <code>:not(body):not(html)</code></li></ol><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><p>注意点: <font color="tomato">伪元素也能使用单冒号, 但为了更好区分伪元素和伪类, 建议伪元素使用双冒号</font></p><ol><li><p><code>::first-line</code> 针对首行文本设置(只能设置字体 颜色 背景属性)</p></li><li><p><code>::first-letter</code>  针对首字母设置(字体 margin padding)</p></li><li><p><code>::before</code> 和 <code>::after</code> 往元素前后加内容(<strong>比较常用</strong>)</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"文字内容"</span><span class="token punctuation">;</span>        -----插入文本    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token url">url("图片url")</span><span class="token punctuation">;</span>   -----插入图片    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>属性名<span class="token punctuation">)</span><span class="token punctuation">;</span>     -----获取属性值, 并插入元素中<span class="token punctuation">}</span></code></pre><p><font color="tomato"><strong>伪元素可以被鼠标选中</strong></font></p><br><p><font color="tomato"><strong>在伪元素选择器可以设置任何样式, 改变伪元素的行为表现</strong></font></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS introduce </tag>
            
            <tag> querySelector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML - 其他元素(持续更新)</title>
      <link href="/2017/12/09/html-elements-updating/"/>
      <url>/2017/12/09/html-elements-updating/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="标签语义化"><a href="#标签语义化" class="headerlink" title="标签语义化"></a>标签语义化</h2><p>其实单独使用任何一个元素标签(如div), 通过CSS和JS的渲染后即可编写一个完整的网页, 但这不利于团队开发</p><p><strong>标签语义化</strong>即选择标签时让每个标签都有正确的语义</p><p>意义:</p><ol><li>方便代码维护</li><li>减少开发者之间的沟通成本</li><li>让语音合成工具正确识别网页元素的用途</li><li>SEO优化</li></ol></blockquote><h2 id="vedio元素"><a href="#vedio元素" class="headerlink" title="vedio元素"></a>vedio元素</h2><p>视频标签, 支持 <strong>ogg</strong>、<strong>mp4</strong>、<strong>webm</strong> 格式</p><p>语法: <code>&lt;video src=&quot;视频URL&quot; poster=&quot;海报图片URL&quot; controls&gt;&lt;/video&gt;</code></p><p>属性:</p><ol><li><p><code>autoplay</code> 布尔属性, 自动播放, 高版本浏览器限制失效</p></li><li><p><code>muted</code> 布尔属性, 静音播放</p></li><li><p><code>width</code>和<code>height</code></p></li><li><p><code>loop</code> 循环次数, 值为 <strong>loop</strong> 或者 <strong>-1</strong> 表示无限循环</p></li><li><p><code>preload</code> 预加载, 取值 <strong>auto</strong>(默认全加载, 会影响整个网页加载速度)|<strong>metadata</strong>(加载元数据)</p></li><li><p>解决兼容性问题</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">poster</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>海报图片URL<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>视频URL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="audio元素"><a href="#audio元素" class="headerlink" title="audio元素"></a>audio元素</h2><p>音频标签, 支持 <strong>ogg</strong>、<strong>mp3</strong>、<strong>wav</strong> 格式</p><p>语法: <code>&lt;audio src=&quot;音频URL&quot; controls&gt;&lt;/audio&gt;</code></p><p>属性与<code>vedio</code>类似, 没有 <code>poster</code>、<code>width</code>、<code>height</code> 属性</p><h2 id="details元素"><a href="#details元素" class="headerlink" title="details元素"></a>details元素</h2><p>详情标签</p><p>语法: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>概要标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre><p>注意点:</p><ol><li>如果没有 <code>&lt;summary&gt;</code> 标签, 标题默认为 “<strong>详细信息</strong>“</li><li>有多个 <code>&lt;summary&gt;</code> 标签, 只认<strong>第一个</strong>, 其他当详情内容</li></ol><h2 id="其他增强语义的元素"><a href="#其他增强语义的元素" class="headerlink" title="其他增强语义的元素"></a>其他增强语义的元素</h2><h3 id="header元素"><a href="#header元素" class="headerlink" title="header元素"></a>header元素</h3><p><code>&lt;header&gt;</code>元素用来表示介绍性的内容</p><p>注意点:</p><ol><li>W3C规范, 一个<code>&lt;header&gt;</code>标签内至少有一个标题元素( h1-6 )</li><li>一个文档中可以定义多个<code>&lt;header&gt;</code>元素, 表示文档或者文档的一部分区域的页眉</li><li><code>&lt;header&gt;</code>元素不能嵌套在<code>&lt;footer&gt;</code>,<code>&lt;address&gt;</code>或者另一个<code>&lt;header&gt;</code>标签内部</li></ol><h3 id="footer元素"><a href="#footer元素" class="headerlink" title="footer元素"></a>footer元素</h3><p><code>&lt;footer&gt;</code>元素定义文档或者文档的一部分区域的页脚</p><p>一般情况下, 该元素包含文档创作者的姓名、文档的版权信息、使用条款的链接、联系信息等</p><h3 id="nav元素"><a href="#nav元素" class="headerlink" title="nav元素"></a>nav元素</h3><p><code>&lt;nav&gt;</code>元素用于表示HTML页面中的导航, 可以是页与页之间导航, 也可以是页内的段与段之间导航</p><p>注意, <code>&lt;nav&gt;</code>元素值作为标注一个导航链接的区域, 一般里面会嵌套多个<code>&lt;a&gt;</code>标签</p><h3 id="section元素"><a href="#section元素" class="headerlink" title="section元素"></a>section元素</h3><p><code>&lt;section&gt;</code>元素用来对文档中的内容进行分块或分段, 与<code>&lt;div&gt;</code>标签类似</p><h3 id="article元素"><a href="#article元素" class="headerlink" title="article元素"></a>article元素</h3><p><code>&lt;article&gt;</code>元素用来定义独立的内容</p><p>注意点:</p><ol><li><code>&lt;article&gt;</code>定义的内容本身必须是有意义的且必须是独立于文档的其余部分</li><li>一般是论坛帖子、博客文章、新闻故事、评论等</li></ol><h2 id="被HTML5废弃的元素"><a href="#被HTML5废弃的元素" class="headerlink" title="被HTML5废弃的元素"></a>被HTML5废弃的元素</h2><h3 id="marquee元素"><a href="#marquee元素" class="headerlink" title="marquee元素"></a>marquee元素</h3><p>走马灯标签(目前使用不多, 被JS动画取代)</p><p>语法: <code>&lt;marquee behavior=&quot;行为&quot; direction=&quot;滚动方向&quot;&gt;&lt;/marquee&gt;</code></p><p>属性:</p><ol><li><code>behavior</code>: <strong>scroll</strong>(循环滚动)|<strong>slide</strong>(滚一次)|<strong>alternate</strong>(来回滚)</li><li><code>scrollamount</code>: 滚动速度, 单位像素(px/s)</li><li><code>loop</code>: 循环次数, 默认无限循环</li></ol><h3 id="不-bu-是-is-标签"><a href="#不-bu-是-is-标签" class="headerlink" title="不(bu)是(is)标签"></a>不(bu)是(is)标签</h3><ol><li>加粗强调: <code>&lt;b&gt;&lt;/b&gt;</code> —–&gt; <code>&lt;strong&gt;&lt;/strong&gt;</code></li><li>下划线: <code>&lt;u&gt;&lt;/u&gt;</code> —-&gt; <code>&lt;ins&gt;&lt;/ins&gt;</code></li><li>斜体: <code>&lt;i&gt;&lt;/i&gt;</code> —–&gt; <code>&lt;em&gt;&lt;/em&gt;</code></li><li>删除线: <code>&lt;s&gt;&lt;/s&gt;</code> —-&gt; <code>&lt;del&gt;&lt;/del&gt;</code></li></ol><p>废弃原因: <strong>标签语义化</strong></p><p>注意点: 目前, <code>&lt;i&gt;</code>标签在网页中多用于表示<strong>图标</strong>(icon)</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tags(elements) </tag>
            
            <tag> H5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML - 表单元素</title>
      <link href="/2017/11/20/html-form/"/>
      <url>/2017/11/20/html-form/</url>
      
        <content type="html"><![CDATA[<h2 id="form元素"><a href="#form元素" class="headerlink" title="form元素"></a>form元素</h2><p>一般情况下, 一个表单需要一个form元素, 其他表单元素都是forn元素的子元素</p><p>语法: <code>&lt;form action=&quot;提交数据的URL&quot;&gt;其他表单元素&lt;/form&gt;</code></p><p>其他属性:</p><ol><li><p><strong>method</strong>  表单提交的方法</p><p>a)get: 以明文形式提交数据</p><p>b)post: 将数据放在请求体中, 然后以请求体形式提交数据</p><p>区别: </p><ul><li>get的数据显示在请求路径中(格式: url?name1=val1&amp;name2=val2), post的在请求体中</li><li>get提交的数据一般不超过1kb, post则没有限制</li></ul></li><li><p><strong>enctype</strong> 对提交数据的编码方式</p></li><li><p><strong>accept-charset</strong> 对请求路径进行字符编码, 默认跟随当前HTML文档的编码</p></li></ol><h3 id="文件上传的必要条件"><a href="#文件上传的必要条件" class="headerlink" title="文件上传的必要条件"></a>文件上传的必要条件</h3><ol><li>method=”post”</li><li>enctype=”multipart/form-data”</li><li><code>&lt;input type=&quot;file&quot; name=&quot;xxx&quot;&gt;</code></li></ol><h2 id="input元素"><a href="#input元素" class="headerlink" title="input元素"></a>input元素</h2><p>语法: <code>&lt;input type=&quot;类型&quot;&gt;</code></p><h3 id="type属性"><a href="#type属性" class="headerlink" title="type属性"></a>type属性</h3><ol><li><code>text</code> 文本输入框(明文输入)</li><li><code>password</code> 文本输入框(密文输入)</li><li><code>radio</code> 单选框</li><li><code>checkbox</code> 复选框</li><li><code>button</code> 普通按钮</li><li><code>reset</code> 重置按钮</li><li><code>submit</code> 提交按钮</li><li><code>file</code> 文件上传</li><li><code>number</code> 数字输入框</li><li><code>email</code> 邮箱输入框</li><li><code>search</code> 搜索输入框</li><li><code>color</code> 颜色控件</li><li><code>date</code> 日期控件</li><li><code>month</code> 年份月份控件</li><li><code>week</code> 年份周数控件</li><li><code>time</code> 时间控件</li><li><code>datetime</code> 日期时间控件(基于UTC时区), <strong>chrome不支持</strong></li><li><code>datetime-local</code> 日期时间控件</li><li><code>image</code> 图片按钮, 效果和submit相同</li><li><code>range</code> 拖拽条</li><li><code>tel</code> 电话输入框</li><li><code>url</code> 地址输入框</li><li><code>hidden</code> 隐藏输入字段(在页面中隐藏一个数据, 在发送请求时, 将隐藏数据发送给服务器)</li></ol><h3 id="其他通用属性"><a href="#其他通用属性" class="headerlink" title="其他通用属性"></a>其他通用属性</h3><ol><li><code>name</code> 规定input元素的名称</li><li><code>value</code> 规定input元素的value值</li><li><code>required</code> 布尔属性, 规定该字段是必填项</li><li><code>readonly</code> 布尔属性, 规定该字段是只读字段</li><li><code>disabled</code> 布尔属性, 规定该input元素被禁用</li><li><code>autofocus</code> 布尔属性, 规定当文档加载完, 该input元素自动获得焦点</li><li><code>pattern</code> 正则表达式, 验证input元素的<code>value</code>值</li></ol><h3 id="注意点和特殊属性"><a href="#注意点和特殊属性" class="headerlink" title="注意点和特殊属性"></a>注意点和特殊属性</h3><ol><li><p><font color="deep">w3c规范规定input标签要有关联的label标签</font>, 当用户点击<code>&lt;label&gt;</code>里面的文字时, 浏览<br>器会自动把光标转载表单控件上</p><p>label语法: <code>&lt;label for=&quot;input元素id值&quot;&gt;描述&lt;/label&gt;</code></p></li><li><p>一般 <code>name</code>、<code>value</code> 、<code>id</code>都是和后台约定的值</p></li><li><p>除了按钮, 其他input元素一般需要 <code>name</code> 属性</p></li><li><p>如果form元素中没有name属性元素, form元素的action属性会失效, 提交不了表单</p></li><li><p>常用type类型为 <strong>1 - 8</strong>, 后面的可能有兼容性问题</p></li><li><p>针对所有<strong>输入框</strong>的属性:</p><p>a) <code>placeholder</code> 占位文字, 提示词</p><p>b) <code>maxlength</code> 规定输入的最大字符数</p><p>c) <code>minlength</code> 规定输入的最小字符数</p><p>d) <code>size</code> 规定输入框的可见宽度(按字符计算)</p><p>e) <code>autocomplete</code> 值为 <strong>on</strong>|<strong>off</strong> 规定输入框是否弃用自动完成功能</p><p>f) <code>list</code> 指向<code>&lt;datalist&gt;</code>元素的id值, 含input元素的预定义选项</p><p>​    datalist语法: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span></code></pre></li><li><p>针对所有<strong>按钮</strong>, value属性可以改变按钮的名称</p></li><li><p>针对<strong>单选框</strong>(<code>radio</code>)和<strong>复选框</strong>(<code>checkbox</code>), 让同一组选择框产生关联, <code>name</code>属性值需要一致, <code>checked</code>布尔属性表示默认选中</p></li><li><p>针对<strong>文件上传</strong>, <code>multiple</code>属性支持上传多文件</p></li></ol><h2 id="button元素"><a href="#button元素" class="headerlink" title="button元素"></a>button元素</h2><p>和input元素的按钮效果一样</p><p>语法: <code>&lt;button type=&quot;按钮类型&quot;&gt;按钮名字&lt;/button&gt;</code></p><font color="deep">button元素一般搭配js赋予动作效果</font><h2 id="select元素"><a href="#select元素" class="headerlink" title="select元素"></a>select元素</h2><p>下拉选择菜单</p><p>语法: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>select</strong>元素常用属性: a) <code>multiple</code> 多选    b) <code>size</code> 显示多少项</p><p><strong>option</strong>元素常用属性: <code>selected</code> 默认选中</p><h2 id="textarea元素"><a href="#textarea元素" class="headerlink" title="textarea元素"></a>textarea元素</h2><p>文本域</p><p>语法: <code>&lt;textarea cols=&quot;列&quot; rows=&quot;行&quot;&gt;预设值&lt;/textarea&gt;</code></p><p>注意点: </p><ol><li>建议不用col, row设置尺寸, 通过CSS的width, height设置</li><li>文本域设置CSS样式: <code>resize: none(禁止缩放)|horizontal(水平缩放)|vertical(垂直缩放)|both(水平垂直缩放);</code></li></ol><h2 id="fieldset元素"><a href="#fieldset元素" class="headerlink" title="fieldset元素"></a>fieldset元素</h2><p>fieldset 元素可将表单内的相关元素分组, 将表单内容的一部分打包，生成一组相关表单的字段</p><p>语法:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>fieldset标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tags(elements) </tag>
            
            <tag> form </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML - 常用元素</title>
      <link href="/2017/11/11/html-elements/"/>
      <url>/2017/11/11/html-elements/</url>
      
        <content type="html"><![CDATA[<h2 id="h元素"><a href="#h元素" class="headerlink" title="h元素"></a>h元素</h2><p><strong>h元素(h1-h6)(heading)标题</strong></p><p>语法: <code>&lt;h1&gt;标题&lt;/h1&gt;</code></p><p>注意点:</p><ol><li><font color="tomato">常用的是h1, h2, h3</font></li><li><font color="tomato">一个网页最好只有一个h1元素,有助于网站的SEO(Search Engine Optimizatiob)优化, 促进关键词排名</font></li></ol><h2 id="p元素和pre元素"><a href="#p元素和pre元素" class="headerlink" title="p元素和pre元素"></a>p元素和pre元素</h2><p><strong>p元素(paragraph)段落</strong></p><p>语法: <code>&lt;p&gt;段落文字&lt;/p&gt;</code></p><font color="yellowgreen">一般情况下, html代码中大部分空格会被浏览器压缩, 连续的空格会压缩成一个空格</font><p><strong>pre元素也是段落, 但可以完全保留html代码中的空格, 换行</strong></p><p>语法: <code>&lt;pre&gt;带格式的段落&lt;/pre&gt;</code></p><p>pre元素常见用法一般配合 <strong>code</strong> 元素使用, 表示代码块</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">></span></span>    代码字符串(注意特殊符号需要使用字符实体)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span></code></pre><h2 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h2><p>Character Entity 用来让浏览器正确显示某些特定字符,如&lt;, &gt;等</p><p>书写格式: <code>&amp;实体名称;</code> 或者 <code>&amp;#实体编号;</code></p><p><img src="/images/CharacterEntity.png" alt="常用字符实体"></p><h2 id="img元素"><a href="#img元素" class="headerlink" title="img元素"></a>img元素</h2><p>img(image)元素专门用来显示一张图片</p><p>语法: <code>&lt;img src=&quot;图片路径(URL)&quot; alt=&quot;占位文字(图片加载失败时显示)&quot; width=&quot;像素&quot; height=&quot;像素&quot;&gt;</code></p><p>注意点:</p><ol><li><font color="tomato">HTML5规范中, alt是img的必要属性</font></li><li><font color="tomato">width和height属性可以省略, 等比缩放时只用设置其中一个</font></li><li><font color="tomato">常用图片格式: jpg(静态, 不支持透明) 、png(静态, 支持透明)、gif(支持动态和透明)</font></li></ol><h3 id="像素介绍"><a href="#像素介绍" class="headerlink" title="像素介绍"></a>像素介绍</h3><p>像素是图像显示的最小单位, <font color="tomato">默认单位是px</font></p><p>每个像素都能代表一种颜色</p><p>屏幕显示出来的图像都是由一堆像素组成的</p><p>组成图片的像素越多,显示越清晰</p><h2 id="HTML文档中的路径地址"><a href="#HTML文档中的路径地址" class="headerlink" title="HTML文档中的路径地址"></a>HTML文档中的路径地址</h2><p>路径分为 </p><p>​    a) 绝对路径, 完整的描述目标文件位置的路径</p><p>​    b) 相对路径, 目标文件与当前文件所在位置的路径关系</p><p><img src="/images/url.png" alt="相对路径和路径分隔符"></p><h2 id="a元素"><a href="#a元素" class="headerlink" title="a元素"></a>a元素</h2><p>a元素定义超链接, 用于打开新的URL</p><p>语法: <code>&lt;a href=&quot;跳转的地址(URL)&quot; target=&quot;在哪打开URL&quot;&gt;链接描述&lt;/a&gt;</code></p><h3 id="a标签属性"><a href="#a标签属性" class="headerlink" title="a标签属性"></a>a标签属性</h3><ol><li><p>href全称Hypertext Reference, 可放超链接(外部链接)、锚点链接(内部链接, #id值)</p></li><li><font color="deepskyblue">tabindex属性, tab选中的顺序, 当值为-1时, 不可被tab选中</font></li><li><p>target属性的属性值</p><p>a) _self  默认值, 可省略,在当前窗口打开</p><p>b) _blank  在新的窗口打开</p><p>c) _parent  在父辈窗口打开(用在多个窗口嵌套)</p><p>d) _top  在顶层窗口打开</p><p>e) 某个frame的name值  在某个frame元素中打开</p></li></ol><h3 id="iframe元素"><a href="#iframe元素" class="headerlink" title="iframe元素"></a>iframe元素</h3><p>作用: 页面里面的窗口, 实现在一个HTML文档中嵌入其他HTML文档</p><p>语法: <code>&lt;iframe src=&quot;目标网页地址&quot; frameborder=&quot;边框像素&quot; name=&quot;frame名字&quot;&gt;&lt;/iframe&gt;</code></p><font color="deepskyblue">frameborder属性的值: 0 –没边框; 1 –有边框</font><p>注意点:</p><ol><li><code>&lt;iframe&gt;</code>元素会阻碍页面的<code>onload</code>事件</li><li>浏览器搜索引擎一般无法读取<code>&lt;iframe&gt;</code>页面, 不利于 SEO 搜索引擎优化</li><li><code>&lt;iframe&gt;</code>和主页面共享链接池, 影响叶明的并行加载</li><li>可通过 JS 代码动态添加<code>&lt;iframe&gt;</code>的<code>src</code>属性, 避免一三问题</li></ol><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>语法: <code>&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/a&gt;</code></p><h3 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h3><p>锚点(anchor)链接: 定位到页面的某一位置(如返回顶部)</p><p>页内跳转: </p><ol><li><code>给跳转位置元素设置id属性</code></li><li><code>&lt;a href=&quot;#跳转位置元素的id属性值&quot;&gt;&lt;/a&gt;</code></li></ol><p>返回顶部: <code>&lt;a href=&quot;#&quot;&gt;返回顶部&lt;/a&gt;</code></p><p>页外跳转: <code>&lt;a href=&quot;目标网页超链接#目标网页跳转位置id值&quot;&gt;&lt;/a&gt;</code></p><font color="deepskyblue">除了id属性外, a元素的name属性也可以作为锚点</font><h3 id="伪链接"><a href="#伪链接" class="headerlink" title="伪链接"></a>伪链接</h3><p>没有指明具体链接地址的链接, 点击后具体要实现什么功能, 需要编写对应的JavaScript代码, 可当做按钮使用</p><p>语法: </p><p><code>&lt;a href=&quot;#&quot; onclick=&quot;return false;&quot;&gt;伪链接1&lt;/a&gt;</code></p><p><code>&lt;a href=&quot;javascript:&quot;&gt;伪链接2&lt;/a&gt;</code></p><h3 id="base元素"><a href="#base元素" class="headerlink" title="base元素"></a>base元素</h3><p><strong>放在head元素里</strong>, 设置所有a元素的默认行为</p><p>语法: <code>&lt;base href=&quot;&quot; target=&quot;_blank&quot;&gt;</code></p><font color="deep">href属性设置所有相对链接的基准URL</font><h2 id="div元素和span元素"><a href="#div元素和span元素" class="headerlink" title="div元素和span元素"></a>div元素和span元素</h2><h3 id="div元素"><a href="#div元素" class="headerlink" title="div元素"></a>div元素</h3><p>一般作为其他元素的父元素, 代表一个整体, 用于把网页分割成多个独立的部分, 方便统一设置样式</p><p>语法: <code>&lt;div&gt;分块内容&lt;/div&gt;</code></p><h3 id="span元素"><a href="#span元素" class="headerlink" title="span元素"></a>span元素</h3><p>默认情况下和普通文本没区别, 通常用于给文本加CSS属性</p><p>语法: <code>&lt;span&gt;文本&lt;/span&gt;</code></p><h2 id="列表元素"><a href="#列表元素" class="headerlink" title="列表元素"></a>列表元素</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>语法: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p>注意点:</p><font color="tomato">ol直接子元素只能是li, 其它元素嵌套在li中</font><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>语法: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>注意点:</p><font color="tomato">ul直接子元素只能是li, 其它元素嵌套在li中</font><h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h3><p>语法:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>项目名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>项目描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre><p>注意点:</p><ol><li><font color="tomato">dl元素的直接子元素只能是dl, dt</font></li><li><font color="tomato">一个dl后跟一个或者多个dd</font></li></ol><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><strong>基本组成: table表格 tr行 td单元格</strong></p><p>语法: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p><strong>table元素常用属性</strong></p><ol><li>border 边框宽度</li><li>cellpadding 单元格内部内边距</li><li>cellspacing 单元格之间边距</li><li>width 表格宽度</li><li>align 表格水平对齐方式</li><li>valign 表格垂直对齐方式</li></ol><h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><p>语法: </p><ol><li><code>&lt;td colspan=&quot;val&quot;&gt;&lt;/td&gt;</code> 合并多少列(横向合并)</li><li><code>&lt;td rowspan=&quot;val&quot;&gt;&lt;/td&gt;</code> 合并多少行(竖向合并)</li></ol><p>注意点:</p><ol><li>将合并属性写在左上角的元素</li><li>方向是向右向下合并, 手动删除合并区域的td元素</li></ol><h3 id="完整的表格"><a href="#完整的表格" class="headerlink" title="完整的表格"></a>完整的表格</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 表头 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>descriptions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 主体 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>details<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 表尾 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>summary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><font color="tomato"><strong>注意点</strong>: caption、thead、tbody、tfoot元素的书写顺序不影响实际排版, 但建议按照顺序书写</font>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tags(elements) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML简介</title>
      <link href="/2017/11/07/html-intro/"/>
      <url>/2017/11/07/html-intro/</url>
      
        <content type="html"><![CDATA[<h2 id="网站与网页"><a href="#网站与网页" class="headerlink" title="网站与网页"></a>网站与网页</h2><p>一个网站包含N个网页, 网站与网页是1对N的关系</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p><strong>服务器本质就是一台电脑</strong></p><p>服务器的特点:</p><ol><li>配置比较高(用户量、数据访问量越大, 对服务器性能要求越高)</li><li>24小时不关机</li></ol><p>服务器的作用:</p><ol><li>存放网站</li><li>实时为客户端提供数据服务</li></ol><p>服务器死机 —– 宕机</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端指PC端、移动端、只能设备等联网设备</p><font color="tomato">在浏览一个网页时, 客户端起码向服务器发送一个请求</font><h2 id="缓存-cache-技术"><a href="#缓存-cache-技术" class="headerlink" title="缓存(cache)技术"></a>缓存(cache)技术</h2><p>缓存指第一次访问网页后在本地电脑存放的一些数据</p><p><img src="/images/cache.png" alt="缓存的使用过程"></p><p>好处:</p><ol><li>减少网络请求次数</li><li>节省用户流量</li><li>加快网页的响应速度</li><li>提升用户体验</li></ol><p>坏处:</p><ol><li>占用本地电脑内存空间</li><li>服务器更改数据后，客户端可能没有得到及时响应</li></ol><p>解决缓存问题 —– 清除缓存</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>URL全称 uniform resource locator  统一资源定位符</p><p>ERL就是资源的地址, 位置, 互联网上每个资源都有一个唯一的URL</p><p>即<strong>通过一个URL能找到全球唯一一个资源</strong></p><p>URL的基本格式: <code>protocol://hostname/path</code> 协议  :// 主机地址 / 路径</p><p>常见协议:</p><ol><li><strong>http</strong> 超文本传输协议 <strong>https</strong>是http协议的安全版　格式：https://</li><li><strong>file</strong> 访问本地主机的资源, 不用加主机地址　格式：file://</li><li><strong>mailto</strong> 访问电子邮件地址　格式：mailto://</li><li><strong>ftp</strong> 访问共享主机的资源　格式：ftp://</li><li><strong>ed2k</strong></li><li><strong>thunder</strong></li></ol><h2 id="网页的组成"><a href="#网页的组成" class="headerlink" title="网页的组成"></a>网页的组成</h2><ol><li>HTML  —  内容结构 (文字、图片、表格)</li><li>CSS  —  视觉体验 (视觉效果、美观)</li><li>JavaScript  —  交互处理 (动态显示)</li></ol><h2 id="HTML标签元素的书写格式"><a href="#HTML标签元素的书写格式" class="headerlink" title="HTML标签元素的书写格式"></a>HTML标签元素的书写格式</h2><ol><li><p>非替换元素(有实际内容的, 双标签), 如 html、head、title、body等</p><p>格式:  <code>&lt;起始标签&gt;&lt;/结束标签&gt;</code> 如 <code>&lt;title&gt;网页标题&lt;/title&gt;</code></p></li><li><p>替换元素(没实际内容的, 单标签), 如 a、img、input</p><p>格式: <code>&lt;标签名&gt;</code> 如 <code>&lt;br&gt;</code> 转行标签</p><font color="tomato">标签不区分大小写, 建议使用小写</font></li></ol><h2 id="元素的嵌套"><a href="#元素的嵌套" class="headerlink" title="元素的嵌套"></a>元素的嵌套</h2><p>意义: 将多个功能相似的的元素包装成一个整体来使用，方便对它们进行归类、统一操作</p><p><img src="/images/nestification.png" alt="元素嵌套语法示例"></p><h2 id="元素的属性"><a href="#元素的属性" class="headerlink" title="元素的属性"></a>元素的属性</h2><p>作用: 属性可以增强元素的功能</p><p>语法: <code>&lt;起始标签 属性名=&quot;属性值&quot;&gt;</code></p><font color="deep">属性名都是小写，属性是无序的</font><h2 id="HTML文档的注释"><a href="#HTML文档的注释" class="headerlink" title="HTML文档的注释"></a>HTML文档的注释</h2><p>作用: 一般用来解释某段代码的具体含义、作用</p><p>意义: </p><ol><li>只给开发者看，方便回忆，检查旧代码，方便团队协作</li><li><font color="tomato">可将暂时不需要(或出错)的代码注释掉</font></li></ol><p>html中的注释语法: <code>&lt;!-- 注释 --&gt;</code></p><h2 id="网页基本结构"><a href="#网页基本结构" class="headerlink" title="网页基本结构"></a>网页基本结构</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>网页标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图标URL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">CSS样式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>javascript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>HTML标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h3><p>作用: 告诉浏览器当前页面是HTML5页面，让浏览器用HTML5的标准去解析识别HTML文档</p><p>语法: <code>&lt;!DOCTYPE html&gt;</code></p><font color="deepskyblue">放在最前面，不能省略，省略了会出现兼容问题</font><p><strong>标准模式下</strong>: 页面排版及JS解析是以该浏览器支持的最高标准来执行</p><p><strong>怪异模式下</strong>: 向后兼容, 模拟老浏览器模式行为, 防止页面无法正常工作</p><h3 id="html元素"><a href="#html元素" class="headerlink" title="html元素"></a>html元素</h3><p>html元素是HTML文档的根元素，其他所有元素都是html元素的子元素，W3C标准建议html有一个lang属性</p><p>语法: <code>&lt;html lang=&quot;zh&quot;&gt;&lt;/html&gt;</code></p><h4 id="离线存储资源"><a href="#离线存储资源" class="headerlink" title="离线存储资源"></a>离线存储资源</h4><p><code>manifest</code> 属性, 规定文档的缓存<code>manifest</code>的位置</p><p>HTML5 引入了应用程序缓存, 这意味着 Web 应用程序可以被缓存, 然后在无互联网连接的时候进行访问(即 <strong>离线存储资源</strong> ):</p><p><strong>在线</strong> 的情况下, 浏览器发现<code>&lt;html&gt;</code>元素有<code>manifest</code>属性, 就会请求 <strong>manifest文件</strong>, 如果是第一次访问 App, 浏览器根据 manifest 文件的内容下载相应资源并进行离线存储, 再次访问时, 会使用离线资源加载页面, 对比新旧 manifest 文件, 如有变动, 重新下载资源并进行离线储存</p><p><strong>离线</strong> 的情况下, 如果有离线存储资源, 浏览器直接使用并加载页面</p><h3 id="head元素"><a href="#head元素" class="headerlink" title="head元素"></a>head元素</h3><p>head元素里面的内容是HTML文档的一般信息(元数据)</p><p>语法: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">chatset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>网页标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p>head元素中常见的子元素: </p><ol><li><p>title(必须), 语法: <code>&lt;title&gt;网页标题&lt;/title&gt;</code></p></li><li><p>meta, 辅助性标签, 提供网页的原信息(针对搜索引擎和更新频度的描述和关键词、定义页面使用的语言), <font color="tomato">放在head元素的最前面</font></p><p>a) <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code> 设置网页的字符编码</p><p>​        常见字符编码: </p><p>​             <strong>UTF-8</strong> 万国码 包含多国文字</p><p>​             <strong>GBK/GB2312</strong> 汉字/数字/英文字母</p><p>​             <strong>ISO-8859-1</strong> 只包含数字和英文字母</p><p>b) <code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</code></p><p>​    告诉IE浏览器以最新的解析器 , 去解析当前的页面</p><p>​    快捷键:  <strong>meta:compat</strong></p><p>c) <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</code></p><p>​    客户端屏幕尺寸适配</p><p>​    快捷键:  <strong>meta:vp</strong></p></li><li><p>link, 引入外部资源, 常用于引CSS样式表</p><p>a) <code>&lt;link rel=&quot;icon&quot; href=&quot;图标URL&quot;&gt;</code> 引入网站图标</p><p>b) <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;外联样式表URL&quot;&gt;</code> 引入外联样式表</p></li><li><p>style, 创建一个书写文档样式表的环境, 语法: <code>&lt;style&gt;书写CSS样式&lt;/style&gt;</code></p></li><li><p>script, 定义(创建JS环境/引入外联JS)客户端脚本</p></li><li><p>base, 定义HTML文档内部a标签的默认行为</p></li><li><p>noscript, 在不支持JS的浏览器中显示替换的内容</p></li></ol><h3 id="body元素"><a href="#body元素" class="headerlink" title="body元素"></a>body元素</h3><p>body元素里面的内容是网页的具体内容和结构</p><p>语法: <code>&lt;body&gt;网页内容&lt;/body&gt;</code></p><h2 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h2><ol><li>按显示类型分: 块级元素, 行内级元素</li><li>按内容类型分: 替换元素, 非替换元素</li></ol><p><img src="/images/element.png" alt="元素分类"></p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li><p>块级元素理论上可以嵌套其他任何元素, <font color="tomato">特殊: <strong>p元素不能包括其他块级元素</strong></font></p></li><li><p>行内级元素一般只能包含行内级元素</p></li><li><p>行内级替换元素 </p><p>a) <font color="deepskyblue">width、height、margin-top、margin-bottom</font> 等属性不起作用</p><p>b) <font color="deepskyblue">padding-top、padding-bottom、border-top、border-bottom</font> 等属性不占实际位置</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML introduce </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
