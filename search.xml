<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>firstArticle</title>
      <link href="/2019/05/24/firstarticle/"/>
      <url>/2019/05/24/firstarticle/</url>
      
        <content type="html"><![CDATA[<h1 id="GUI-图形界面"><a href="#GUI-图形界面" class="headerlink" title="GUI(图形界面)"></a>GUI(图形界面)</h1><p>人机交互图形化界面设计</p><p>特点: 减少用户的认知负担, 建立界面与用户的互动交流</p><h1 id="CLI-命令行界面"><a href="#CLI-命令行界面" class="headerlink" title="CLI(命令行界面)"></a>CLI(命令行界面)</h1><p><strong>字符用户界面(CUI)</strong></p><h1 id="常用Bash命令"><a href="#常用Bash命令" class="headerlink" title="常用Bash命令"></a>常用Bash命令</h1><h2 id="pwd-print-working-directory"><a href="#pwd-print-working-directory" class="headerlink" title="pwd(print working directory)"></a>pwd(print working directory)</h2><h2 id="cd-change-directory"><a href="#cd-change-directory" class="headerlink" title="cd(change directory)"></a>cd(change directory)</h2><h2 id="ls-list"><a href="#ls-list" class="headerlink" title="ls(list)"></a>ls(list)</h2><ol><li><strong><code>ls -a</code> 显示隐藏文件</strong></li><li><strong><code>ls -l</code> 列表方式显示文件详情</strong></li><li><code>ls -S</code> 列出当前目录所有文件(子目录递归), <strong>win10 prowershell 有效</strong></li></ol><h2 id="mkdir-make-directory"><a href="#mkdir-make-directory" class="headerlink" title="mkdir(make directory)"></a>mkdir(make directory)</h2><ol><li><code>mkdir sub -v</code> 创建目录并显示过程信息</li><li><strong><code>mkdir sub/sub1/sub11/sub111 -p</code> 快速创建子目录</strong></li></ol><h2 id="touch-创建空文件"><a href="#touch-创建空文件" class="headerlink" title="touch(创建空文件)"></a>touch(创建空文件)</h2><p><strong>echo</strong> 和 <strong>cat</strong> 也能<strong>创建</strong>文件并<strong>书写</strong>内容</p><h2 id="wc-word-count"><a href="#wc-word-count" class="headerlink" title="wc(word count)"></a>wc(word count)</h2><ol><li><code>wc -c</code> 字节统计</li><li><code>wc -m</code> 字符统计</li><li><code>wc -l</code> 行数统计(索引值, 0开始)</li><li><code>wc -w</code> 单词统计(按空格, 换行符统计)</li></ol><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><ol><li><strong><code>echo &quot;content&quot; &gt; filename</code>  替换内容, 文件不存在就创建文件</strong></li><li><strong><code>echo &quot;content&quot; &gt;&gt; filename</code> 追加内容, 文件不存在就创建文件</strong></li></ol><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><ol><li><code>cat filename</code> 查看文件内容</li><li><code>cat -n filename</code> 带行号</li><li><code>cat -b filename</code> 带行号, 不包括空行(但会留空)</li><li><code>cat &gt; filename</code> 替换文件内容, 进入编辑模式, <strong>ctrl+c</strong> 退出并保存, <strong>能创建文件</strong></li><li><code>cat &gt;&gt; filename</code> 追加文件内容, 进入编辑模式, <strong>ctrl+c</strong> 退出并保存, <strong>能创建文件</strong></li><li><code>cat filename1 filename2 &gt; filename3</code> <strong>合并文件</strong></li></ol><h2 id="rm-remove"><a href="#rm-remove" class="headerlink" title="rm(remove)"></a>rm(remove)</h2><ol><li><code>rm -i filename</code> 带确认提示</li><li><code>rm -f filename</code> 强制删除</li><li><code>rm -r directory</code> 删除目录及目录下的所有文件</li></ol><h2 id="rmdir-remove-empty-directory"><a href="#rmdir-remove-empty-directory" class="headerlink" title="rmdir(remove empty directory)"></a>rmdir(remove empty directory)</h2><h2 id="mv-move"><a href="#mv-move" class="headerlink" title="mv(move)"></a>mv(move)</h2><ol><li><code>mv filename url/[rename]</code> 移动文件[并改名字]</li><li><code>mv filename rename</code> 改名字</li></ol><h2 id="cp-copy"><a href="#cp-copy" class="headerlink" title="cp(copy)"></a>cp(copy)</h2><p>用法用于mv类似, 复制文件</p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>查看历史操作记录</p><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>发送网路请求</p><h2 id="who-am-i"><a href="#who-am-i" class="headerlink" title="who am i"></a>who am i</h2><p>查看当前用户信息</p><h2 id="tab"><a href="#tab" class="headerlink" title="tab"></a>tab</h2><p>自动补全, 连按将匹配内容显示出来</p><h2 id="cls-clear"><a href="#cls-clear" class="headerlink" title="cls, clear"></a>cls, clear</h2><p>清屏</p><h2 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h2><p><code>vi filename</code> 编辑文件, 键入 <strong>i</strong> 进行编辑 <strong>esc</strong> 退出编辑, :<strong>wq</strong> 退出编辑模式并保存, <strong>:q!</strong>强制退出不保存</p><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="源代码管理工具"><a href="#源代码管理工具" class="headerlink" title="源代码管理工具"></a>源代码管理工具</h2><ol><li><strong>cvs</strong> 一代目: 不稳定, 可能提交不成功也不提示</li><li><strong>svn</strong>:  <strong>集中式版本控制</strong>, 一般搭在内网中, 离开内网就不可用了</li><li><strong>git</strong>: <strong>分布式源代码管理</strong></li></ol><h2 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h2><ol><li><p><code>mkdir projectdir</code></p></li><li><p><code>cd projectdir</code></p></li><li><p><code>git init</code></p></li><li><p>配置项目用户:</p><p>​    a) 当前项目用户 <code>git config user.name=&quot;xxx&quot;</code> <code>git config user.email=&quot;xxx&quot;</code> </p><p>​    b) 全局项目用户 加上 <code>--global</code></p><p><img src="C:\Users\asus\Desktop\git.png" alt="git操作"></p></li></ol><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>情景1: 项目项目正在开发中(主干, 主分支, master), 不影响开发, 开分支修复bug(分支名随意改, 一般 x.1)</p><p>情景2: 开发新的功能, 开分支(一般名为future) </p><p>命令:</p><ol><li><code>git branch</code> 查看分支(当前为*绿色)</li><li><code>git checkout -b 分支名 [hash]</code> 创建分支</li><li><code>git add</code> 和 <code>git commit -m &quot;修复bug/新增功能&quot;</code></li><li><code>git checkout 分支名</code> 切换分支</li><li>切换到主干(master)后 <code>git merge 分支名</code> 和并分支(<strong>合并前先提交到历史区</strong>)</li><li><code>git branch -d 分支名</code> 删除分支</li></ol><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><ol><li><code>git init --bare</code> 创建共享仓库(本地)</li><li><code>git clone 共享仓库url</code> 个人开发前, 先克隆</li><li><code>git pull</code> 同步共享仓库, 可能出现冲突</li><li><code>git pull --allow-unrelated-histories</code> 新项目可能出现的问题</li><li><code>git push</code> 上传到共享仓库, 要先解决冲突</li></ol><h2 id="创建版本标签tag"><a href="#创建版本标签tag" class="headerlink" title="创建版本标签tag"></a>创建版本标签tag</h2><ol><li><code>git tag</code> 查看标签</li><li><code>git tag -a tagname -m &quot;desc&quot; hash</code> 对历史commit打标签</li><li><code>git show tagname</code>  查看详情</li><li><code>git tag -d tagname</code> 本地删除标签</li><li><code>git push origin tagename</code> 或者 <code>git push origin --tags</code> 上传标签</li><li>删除远程标签, 先删本地, 在<code>git push origin :refs/tags/&lt;tagname&gt;</code></li><li><code>git checkout tagname</code> 切换标签</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
